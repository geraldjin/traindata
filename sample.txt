"开发和运维的战争 
     
    
   
  
 五天前，张大胖负责的开发团队向运维部门交付了一批新代码，这是一次用户期待已久的重要升级，部署进行得非常顺利，大家都很高兴。  
 可是今天生产环境的CPU持续接近100%，有好几台服务器都down机了， 运维老大勃然大怒：“已经是第三次了！ 张大胖，你们开发团队怎么搞的？ 新代码一上线CPU就100%！”   
 张大胖自然也不甘示弱：“我们在测试环境测试得非常充分，用户压力比生产环境大多了，代码坚如磐石，肯定是你们配置错了什么东西！”  
 “不可能，我们是严格按照你们要求的步骤来部署的，肯定是你们代码的问题！”  
 “那测试环境怎么就没有问题？” 
  ......   
 两位主管吵了好久，也没有什么好的解决方案，大家又熬了一个通宵，把代码回滚到上个版本，烧香拜佛，希望不要再出问题。  
 经过这一番折腾，今年年底的奖金估计是悬了！  
 张大胖觉得极为郁闷， 心绪难平，黑着脸来到茶水间倒了一杯咖啡，坐在那里一边喝一遍感慨这运维部门简直是太难合作了！  
 看看他们新招的这些人，完全不懂业务，他们为了要“逃避责任”，经常说：“我不懂业务，这次上线的内容，你要把每一步都写得清清楚楚，我只管执行，不问为什么，出了问题可不是我的责任。”你说气人不气人！ 难道他就想当个机器人吗？  
 还有，他们运维团队每个人侧重不同，有人负责数据库脚本执行，有人负责Web服务器，有人负责SSO ， 我的天，每次上线前都得把一堆人拉过来开好几次会，让他们熟悉操作步骤。 这个人部署了一次，好不容易熟悉了，下一次又换了一个人，还美其名曰这是人力资源池，能提高效率，但是新人又需要从头儿学习，这怎么可能不出错？！ 唉...... 
  
   
    
    
      张大胖的回忆 
     
    
   
  
 喝了两杯咖啡以后，张大胖稍微平静了一下，仔细想想，本质原因还是软件本身太复杂了，不但开发复杂，部署也超级复杂，每次部署就把人扒掉一层皮。  
 张大胖不由地想起来这些年来自己经历过的软件开发和部署流程。  
 大学时候，跟着老师做一些小项目，开发、测试都是一个人搞定，部署到用户那里也是自己做，几乎没出过岔子。  
 毕业后进入一个小公司，做的是C/S架构的系统，有了开发团队、测试团队之分，开发团队把代码写完，交给测试团队测试，通过以后就可以到客户那里部署了。  
 通常来说实施人员也都是开发或者测试的兄弟们兼任，自己也兼职干过，拿着部署文档和光盘，到客户那里严格按照步骤把系统安装到客户的机器上，基本上没啥大问题，即使有了问题，现场调试一下也都能解决，大不了把开发的兄弟们叫过来一起熬夜。 
 再后来互联网浪潮来临，自己也跳槽到这家互联网公司，专门做一个网上约车的系统，给用户提供约车服务，根本不用到客户那里去安装软件，公司独立地运行、维护好这个系统就万事大吉。  
 但是这个网上约车的系统可比原来的单机软件、C/S软件要复杂得多，尤其是要面对海量用户的高并发访问，需要解决各种各样的技术难题，挑战巨大。 系统不但复杂，还需要以24*7的方式运行， 靠开发或测试的兼职人员已经无法维护了。 
 公司专门设立了运维（Operations）部门，负责系统的部署、日常维护、监控。运维人员的地位空前提高，当然，对他们的技能的要求也空前提高。  
 张大胖看过一个招聘的运维的邮件:  
 熟练使用Linux, unix, windows操作系统；  
 精通各种常用服务器软件（tomcat, apache, nginx,redis,mysql...)的配置及优化  
 了解负载均衡和高可用的原理，如LVS,Keepalived等  
 熟悉网络原理，TCP/IP协议，掌握至少一种脚本语言。  
 会使用各种配置管理和部署管理的工具。  
 ......  
 总之，运维的重要性已经和开发差不多了。  
  
   
    
    
      开发和运维的鸿沟 
     
    
   
  
 为了加快交付速度，前两年，自己带领着开发团队实施了敏捷转型，成功地把原来的瀑布开发方式转换成了小步快跑，经常交付的敏捷模式。   
 （图片来源：http://www.agilenutshell.com/scrum）  
 通过敏捷软件开发，把需求人员，开发人员，测试人员拉到了一起，形成所谓“特性团队”，把需求拆分成一个个独立的，对用户有价值的故事，按优先级排序以后再开发、测试，甚至可以达到每两周就能交付几个独立需求的程度。 
  （码农翻身注，参见《白话敏捷软件开发》）  
 成功的敏捷转型获得了公司的极大认可，还对外输出了不少培训。  
 虽然能频繁地交付，但是却不能频繁地上线，原因很简单：搞运维的家伙们总是希望系统稳定、稳定、再稳定， 稳定压倒一切。所以他们从骨子里不想频繁地上线，那不是给自己找麻烦吗？  
 这恰恰和自己的敏捷软件开发相反，敏捷就是要拥抱变化啊 ！ 
  
  
  (开发要求变化，运维要求稳定，图片创意来自 http://dev2ops.org，老刘做了重画)  
 想通了这个本质矛盾，张大胖就明白自己是搞不定这个问题了，必须上层出面解决。  
 张大胖立刻去找CTO Bill，希望他能出点好主意。   
  
   
    
    
      Dev + Operations = DevOps 
     
    
   
  
 让张大胖没想到的是， 运维主管老李已经在Bill办公室里了，张大胖心说不好，这小子也许恶人先告状了。  
 Bill 一看到愁眉哭脸的张大胖，让他先坐下，听老李把开发和运维之间的“矛盾”和“战争”讲完。  
 老李唠唠叨叨，说的问题和自己思考的也差不多。  
 Bill笑着说：“大胖，软件的开发流程基本上就是需求->开发->测试->部署， 现在你的团队已经把需求、开发、测试给‘团结’到一起了， 看来你又要‘团结’一个新的小伙伴了！”  
 “难道是老李的运维部门？”  
 “没错。”  
 “那是不可能的， 我们的目标都完全不同，一个要变化，一个要稳定，怎么可能在一起玩？” 大胖非常诧异。 
 “不，以后我们要强调业务目标，以用户的价值为唯一的评判标准，团队的考核评价机制也要改变，个体和团队的成功都要放在整个开发-运维生命周期内来进行评价，开发完成了很多用户需求不一定是成功，运维保障系统不down机也不一定是成功！只有用户想要的功能被及时实现了，被成功部署了，被稳定使用了才算成功。 ” CTO总是很擅长用MBA的词汇来讲话。  
 “就是说要求我们运维和开发紧密合作喽？” 老李接着问道。  
 “是啊，现在有个热词叫做DevOps，就是把敏捷开发部门和运维部门之间的围墙打通，形成闭环。” 
  
  
  “难道我们要再增加一个部门，叫DevOps部门？ 招聘DevOps工程师？”  
 “不不，如果再增加一个这样的部门，岂不是又增加了一堵墙？ 我们本来是要打破开发和运维团队之间的隔阂啊。其实运维部门的工作目标不仅仅是让我们的网上约车系统更加稳定和高效，更需要支持业务的快速演化——这一点是和你们敏捷软件开发的目标是一致的啊。” 
  ""但我们也不能频繁部署啊？快速和稳定的矛盾还是解决不了。""老李叹了口气。 
  ""我知道张大胖的团队正在实施微服务的改造，将来再部署的话就不是以一个巨无霸应用为单位了，而是以一个个微服务为单位，那样就简单得多，频繁部署是有可能的，并且出了错回滚也便捷得多，肯地不用你们熬夜了！""   
 张大胖和老李都点头认同。  
  “那具体该怎么做？”  
  “首先是观念的改变，以后你们不能互相推卸责任，互相指责，而要共同担责了！一个项目的开发、部署、维护，是你们双方的事情，双方都要对业务负责，出了什么问题，你们要通力合作，共同解决。这一点你们回去后要给组员多`洗洗脑`。” 
  张大胖心想，我们刚刚通力合作回滚了代码。 
  “还有，”，Bill看了一眼老李， “运维人员也要了解业务，Code变化带来的影响要告知运维人员。你们开发人员工作的开发/测试环境要尽可能地和生产环境一致。”  
 “运维部门所要求的详细安装步骤实在是太烦人了！” 张大胖抱怨。 
 Bill说道：“我们先设定一个短期目标，把部署工作完全自动化起来。部署的脚本由老李的运维部门主导，有问题大胖来辅助， 将来这个部署脚本要在所有的环境都用起来！” 
  张大胖和老李再次点头。  
 Bill又说道：“最后一点就是度量，例如失败部署的百分比，用户开的ticket数目，故障恢复的平均时间等等，这些老李应该比我清楚。我们会用这些度量指标去衡量DevOps做得到底怎么样， 最重要的是我们无论用了什么工具、方法，如果最后没有减少需求从提出到上线，交付给用户使用的时间，那都是失败。我要求你们两个想尽一切办法，去减少这个时间，不是一次、两次，而是持续、稳定地交付给用户。” 
 张大胖说：“这DevOps听起来不错，但实施起来估计难度不小啊！” 
 Bill说道：“我们先选定一个产品作为试点，然后再扩大推广吧！” 
  
  
  
 —————END————— 
  
  
  

  
  
  

                
        
        
"本人当前的工作范围主要的就是DevOps，更具体一点就是写Jenkins Pipeline 脚本。我最近慢慢学习一个DevOps基础的视频教程，这个教程是Lynda.com，纯英文的。打算写一个笔记，应该来说是翻译这个课程。任何新奇的事物，我们接触它们都是通过学习表面的理论知识来达到初步的了解和掌握。 
      我也不知道，我能不能坚持看完这个视频教程，然后坚持翻译完每一个小视频，一个视频翻译成一篇文章。这些内容大部分是我自己的翻译，少部分是自己的理解。 
     今天我们来学习第一小节，什么是DevOps。首先，我觉得有必要去了解DevOps的英语发音，这里我建议你拷贝到谷歌翻译或者百度翻译，带上耳机，听几遍发音。DevOps，它是当今计算机领域内一个很火的概念。但是，DevOps到底是什么呢？大型软件公司，IBM和微软都在谈论DevOps，但是目前并没有一个比较明确的单一的定义，所以，要解释这个定义，有些困难。 
1.定义 
（两个讲师）我们认为DevOps可以从两个方面去定义。首先，DevOps是在软件生命周期内，从设计到编码，然后从开发环境部署到生产环境上，由开发人员和运维人员共同参与的软件迭代过程。在之前的软件研发模型，大部分是这样的：开发组去写代码，另外一个组（比如测试）去进行测试，一个组负责部署到生产环境，还有一个组负责后期软件运营。这个生产方式，当今很多公司依然存在，而且是普遍现象。在这里，DevOps就可以改变这个模型，请看下图。 
 
     如果采用DevOps就变成了两个组，或者DevOps本身就是一个组，里面的人员既要懂得开发，也要懂得运维，这个只是粗浅的解释，然后DevOps就变成下面这张图的样子。 
 
       上图中并不是说DevOps中就没有了测试和部署，只不过这两部分是高度自动化完成，任务量相对编程和运维是比较少的。其实真正的devops应该是以下图的范围。这里加了一个QA，也就是质量保证，包括QE，也就是一般我们叫软件测试工程师。 
 
    第二点，DevOps有这么一个明显的特征：运维操作人员在进行系统运维工作采用的技术和开发人员是一样的。（这里只代码技术手段）你要知道，在DevOps中，系统工程师的工作就和开发工程师工作流程一样。所有的检查点都采用源码版本控制，并完成了相关的自动化测试。但是DevOps和敏捷开发一样，它是一个很广的概念和一个很高级的定义，并没有真实地告诉你，它是什么。 
  
2.五个方面去描述DevOps 
这里打算分成5层去描述DevOps: 价值，准则，方法，实践，工具。 
 
在稍后课程，我们会依次讲到这些。 
  
3.最大的问题 
       但是首先，我们来思考这个最大问题，你为什么关注DevOps，它能为你带来什么以及为什么你还是想尝试用它？ 
第一个原因是，DevOps已经被证实能在IT和商业两方面提升效率。在Puppet实验室发布的DevOps 2015调查研究报告中，指出使用了DevOps的团队和没有使用DevOps团队对比，部署更改频率提高30倍，交付周期缩短200倍。在问题质量方面，和其他组织相比，问题故障减少了60倍，在问题恢复上快了168倍。这是一个多么大的优势， 
     Ps：我想，大家都经历过加班到深夜的上线活动。运维拿着开发提供的上线清单去核对，然后进行系统操作，更新文件，启动服务，我靠，上线失败，再来，又失败，这样就面临回滚操作。运维的理由是开发给的文件清单有问题，开发的理由是这生产环境和开发环境不一样。作为测试人员，你一直在陪他们加班，难道你不会去怀疑，运维人员到底有没有失误做错的地方，这些都只是猜测。DevOps都是脚本自动化运作，都有日志输出，上面的问题就不存在了。 
       第二个原因是，DevOps能让你的日常工作变得简单。在普通运维上线过程中，由于技术和环境，经常产生不可控制认为失误或者其他问题。我们发现，DevOps减少了计划外的工作，增加了同事之间的友好关系和减轻了工作压力。就像上面我具体，运维和开发真的经常吵架，关系不好是常态。开发是追求业务功能快速上线，进入下一个迭代，运维的口号是稳定压倒一切。 
     DevOps从单词缩写就可以看出来，代表的是开发和运维，但是这并不表示，DevOps中就没有其他团队，例如测试。DevOps中同样由开发，测试，运维和其他人员组成，例如系统管理员和DBA。每一个参与软件交互人之间的合作，是DevOps的一个重要的宗旨。 
        DevOps 会同时改善运维和开发以及其他团队的工作效率。这部分并没有完成关于什么是DevOps的讨论。它不是运维组的一个新的叫法，也不是一个职位职称描述，更不是一个工具的集合。下面一篇，我们讨论DevOps的核心价值：CAMS。
                
        
        
"DevOps: Development Operations 
是一组过程,方法与系统的统称,用于促进开发,技术运营和质量保障(QA)部门之间的沟通,协作与整合

目的: 为了按时交纳产品与服务,开发和运营工作必须紧密合作
123 
1.简介 
1)开发,技术运营和质量保障(QA)三者的交集

2)传统的软件组织将开发,IT运营和质量保障设为分离的部门

        按照从前的工作方式,开发和部署不需要IT支持或QA支持,却需要紧密的多部门协作

3)DevOps考虑的不止是软件部署,它是一套针对几个部门间沟通与协作问题的流程和方法

4)如果一个组织要生产面向多种用户,具备多样功能的应用程序,其部署周期必然会很短,这种能力被称为持续部署

5)在缺乏DevOps能力的组织中,开发与运营之间存在着信息""鸿沟"",

        运营要求更好的可靠性和安全性

        开发希望基础设施响应更快

        业务用户需求是更快的将更多的特性发布给最终用户

6)与传统开发大规模的,不频繁发布相比,敏捷方法大大提升了发布频率

        与传统瀑布式开发相比,采用敏捷或迭代开发意味着更频繁的发布,每次发布包含的变化更少

        由于经常部署,因此每次部署不会对生产系统造成巨大影响

        加强发布协调靠强有力的发布协调人来弥合开发与运营之间的技能鸿沟与沟通鸿沟

        自动化强大的部署自动化手段确保部署任务的可重复性,减少部署出错的可能性
123456789101112131415161718192021222324252627 
2.现状 
1)很多组织将开发和系统管理划分为不同的部门,开发部门的驱动力通常是""频繁交付新特性"" ,而运营部门更关注IT服务的可靠性和IT成本投入的效率,两者目标的不匹配,就在开发与运营部门之间造成了鸿沟,从而减慢了IT交付业务价值的速度.

2)开发人员倾向使用有利于快速开发的工具,运维人员要求稳定性和性能

3)开发人员使用桌面电脑,生产环境运行的系统通常是服务器操作系统

4)运营人员可能对应用程序内部缺乏了解,难以正确的选择运行时环境和发布流程

5)开发人员可能对运行时环境缺乏了解,难以正确的对代码进行调整
123456789 
3.诉求 
1)更小,更频繁的变更---意味着更小的风险

2)让开发人员更多的控制生产环境

3)更多的以应用程序为中心来理解基础设施

4)定义简介明了的流程

5)尽可能的自动化

6)促成开发与运营的协作
1234567891011 
4.DevOps度量标准 
1)开发应用所花费的最高时间

2)失败部署的百分比

3)客户ticket数

4)故障恢复的平均时间

5)用户数
123456789 
5.DevOps的作用 
DevOps是Develop与Operations的缩写,是企业内开发,技术运营和质量保障这三方面工作的融合,用于促进开放,技术运营和质量保障部门之间的沟通,协作与整合

然而最为重要的如何成为一名真正的消费者用户并像消费者用户那样考虑这整件事情的意义所在,如何提升最终用户体验一直是DevOps战略发展的第一驱动力
123 
6.DevOps工具 
FlowDock或HipChat这样的DevOps实用工具能够帮助开发团队的成员互相以及与DevOps人员保持联系,Asana或Basecamp这类服务能够有助于跟踪开发任务以及在应用发布中的注意事项

以客户为中心的支持门户网站可以让用户直接与管理层或开发团队进行需求沟通,有助于触发新的或改进的功能
123 
来源张永光的博客
                
                
                
        
        
"DevOps 是一个完整的面向IT运维的工作流，以 IT 自动化以及持续集成（CI）、持续部署（CD）为基础，来优化程式开发、测试、系统运维等所有环节。 
  
  
DevOps的概念 
DevOps一词的来自于Development和Operations的组合，突出重视软件开发人员和运维人员的沟通合作，通过自动化流程来使得软件构建、测试、发布更加快捷、频繁和可靠。 
 
DevOps是为了填补开发端和运维端之间的信息鸿沟，改善团队之间的协作关系。不过需要澄清的一点是，从开发到运维，中间还有测试环节。DevOps其实包含了三个部分：开发、测试和运维。 
 
  
 换句话说，DevOps希望做到的是软件产品交付过程中IT工具链的打通，使得各个团队减少时间损耗，更加高效地协同工作。专家们总结出了下面这个DevOps能力图，良好的闭环可以大大增加整体的产出。 
 
历史变革 
由上所述，相信大家对DevOps有了一定的了解。但是除了触及工具链之外，作为文化和技术的方法论，DevOps还需要公司在组织文化上的变革。回顾软件行业的研发模式，可以发现大致有三个阶段：瀑布式开发、敏捷开发、DevOps。 
DevOps早在九年前就有人提出来，但是，为什么这两年才开始受到越来越多的企业重视和实践呢？因为DevOps的发展是独木不成林的，现在有越来越多的技术支撑。微服务架构理念、容器技术使得DevOps的实施变得更加容易，计算能力提升和云环境的发展使得快速开发的产品可以立刻获得更广泛的使用。 
好处是什么？ 
DevOps的一个巨大好处就是可以高效交付，这也正好是它的初衷。Puppet和DevOps Research and Assessment (DORA) 主办了2016年DevOps调查报告，根据全球4600位各IT公司的技术工作者的提交数据统计，得出高效公司平均每年可以完成1460次部署。 
与低效组织相比，高效组织的部署频繁200倍，产品投入使用速度快2555倍，服务恢复速度快24倍。在工作内容的时间分配上，低效者要多花22%的时间用在为规划好或者重复工作上，而高效者却可以多花29%的时间用在新的工作上。所以这里的高效不仅仅指公司产出的效率提高，还指员工的工作质量得到提升。 
DevOps另外一个好处就是会改善公司组织文化、提高员工的参与感。员工们变得更高效，也更有满足和成就感；调查显示高效员工的雇员净推荐值（eNPS:employee Net Promoter Score）更高，即对公司更加认同。 
快速部署同时提高IT稳定性。这难道不矛盾吗？ 
快速的部署其实可以帮助更快地发现问题，产品被更快地交付到用户手中，团队可以更快地得到用户的反馈，从而进行更快地响应。而且，DevOps小步快跑的形式带来的变化是比较小的，出现问题的偏差每次都不会太大，修复起来也会相对容易一些。 
 
因此，认为速度就意味着危险是一种偏见。此外，滞后软件服务的发布也并不一定会完全地避免问题，在竞争日益激烈的IT行业，这反而可能错失了软件的发布时机 
为什么DevOps会兴起？ 
为什么会继续火下去？ 
条件成熟：技术配套发展 
技术的发展使得DevOps有了更多的配合。早期时，大家虽然意识到了这个问题的，但是苦于当时没有完善丰富的技术工具，是一种“理想很丰满，但是现实很骨感”的情况。DevOps的实现可以基于新兴的容器技术；也可以在自动化运维工具Puppet、SaltStack、Ansible之后的延伸；还可以构建在传统的Cloud Foundry、OpenShift等PaaS厂商之上。 
来自市场的外部需求：这世界变化太快 
IT行业已经越来越与市场的经济发展紧密挂钩，专家们认为IT将会有支持中心变成利润驱动中心。事实上，这个变化已经开始了，这不仅体现在Google、苹果这些大企业中，而且也发生在传统行业中，比如出租车业务中的Uber、酒店连锁行业中的Airbnb、图书经销商Amazon等等。能否让公司的IT配套方案及时跟上市场需求的步伐，在今天显得至关重要。 
DevOps 2016年度报告给出了一个运维成本的计算公式：  停机费用成本 = 部署频率 * 版本迭代失败概率 * 平均修复时间 * 断电的金钱损失 
来自团队的内在动力：工程师也需要 
对于工程师而言，他们也是DevOps的受益者。微软资深工程师Scott Hanselman说过“对于开发者而言，最有力的工具就是自动化工具”（The most powerful tool we have as developers is automation）。 
工具链的打通使得开发者们在交付软件时可以完成生产环境的构建、测试和运行；正如Amazon的VP兼CTO Werner Vogels那句让人印象深刻的话：“谁开发谁运行”。（You build it, you run it） 
实现DevOps需要什么？ 
硬性要求：工具上的准备 
上文提到了工具链的打通，那么工具自然就需要做好准备。现将工具类型及对应的不完全列举整理如下： 
 代码管理（SCM）：GitHub、GitLab、BitBucket、SubVersion  构建工具：Ant、Gradle、maven  自动部署：Capistrano、CodeDeploy  持续集成（CI）：Bamboo、Hudson、Jenkins  配置管理：Ansible、Chef、Puppet、SaltStack、ScriptRock GuardRail  容器：Docker、LXC、第三方厂商如AWS  编排：Kubernetes、Core、Apache Mesos、DC/OS  服务注册与发现：Zookeeper、etcd、Consul  脚本语言：python、ruby、shell  日志管理：ELK、Logentries  系统监控：Datadog、Graphite、Icinga、Nagios  性能监控：AppDynamics、New Relic、Splunk  压力测试：JMeter、Blaze Meter、loader.io  预警：PagerDuty、pingdom、厂商自带如AWS SNS  HTTP加速器：Varnish  消息总线：ActiveMQ、SQS  应用服务器：Tomcat、JBoss  Web服务器：Apache、Nginx、IIS  数据库：MySQL、Oracle、PostgreSQL等关系型数据库；cassandra、mongoDB、redis等NoSQL数据库  项目管理（PM）：Jira、Asana、Taiga、Trello、Basecamp、Pivotal Tracker  
在工具的选择上，需要结合公司业务需求和技术团队情况而定。（注：更多关于工具的详细介绍可以参见此文：51 Best DevOps Tools for #DevOps Engineers） 
软性需求：文化和人 
DevOps成功与否，公司组织是否利于协作是关键。开发人员和运维人员可以良好沟通互相学习，从而拥有高生产力。并且协作也存在于业务人员与开发人员之间。 
出席了2016年伦敦企业级DevOps峰会的ITV公司在2012年就开始落地DevOps，其通用平台主管Clark在接受了InfoQ的采访，在谈及成功时表示，业务人员非常清楚他们希望在最小化可行产品中实现什么，工程师们就按需交付，不做多余工作。 
这样，工程师们使用通用的平台（即打通的工具链）得到更好的一致性和更高的质量。此外，DevOps对工程师个人的要求也提高了，很多专家也认为招募到优秀的人才也是一个挑战。 
DevOps的采用现状 
哪些公司在用？ 
DevOps正在增长，尤其是在大企业中：调查发现，DevOps的接受度有了显著提高。74%的受访者已经接受了DevOps，而去年这一比例为66%。目前，在81%的大企业开始接受DevOps，中小企业的接受度仅为70%。 
那么具体而言都有些公司在采用DevOps呢？Adobe、Amazon、Apple、Airbnb、Ebay、Etsy、Facebook、LinkedIn、Netflix、NASA、Starbucks、Target（泛欧实时全额自动清算系统）、Walmart、Sony等等。 
他们怎么实施的？ 
首先，大企业正在自下而上接受DevOps，其中业务单位或部门（31%）以及项目和团队（29%）已经实施DevOps。不过，只有21%的大企业在整个公司范围内采用了DevOps。  
其次，在工具层面上，DevOps工具的用量大幅激增。Chef和Puppet依然是最常用的DevOps工具，使用率均为32%。Docker是年增长率最快的工具，用量增长一倍以上。Ansible的用量也有显著增加，使用率从10%翻倍至20%。 
 
                
        
        
"一：DevOps 是什么 
 
 DevOps（Development和Operations的组合词）是一组过程、方法与系统的统称，用于促进开发（应用程序/软件工程）、技术运营和质量保障（QA）部门之间的沟通、协作与整合。它是一种重视“软件开发人员（Dev）”和“IT运维技术人员（Ops）”之间沟通合作的文化、运动或惯例。透过自动化“软件交付”和“架构变更”的流程，来使得构建、测试、发布软件能够更加地快捷、频繁和可靠。它的出现是由于软件行业日益清晰地认识到：为了按时交付软件产品和服务，开发和运营工作必须紧密合作。 
 
DevOps试图通过发展开发和运营团队之间的伙伴关系，弥合这条鸿沟。DevOps活动强调软件开发人员和IT运营部门之间的沟通、协作和整合。 
DevOps促进协作，通过自动化和编排改善过程为协作提供方便。换言之，DevOps本质上将敏捷活动的持续开发目标扩展到持续集成和发行。DevOps是利用云解决方案的优势，将敏捷实践与过程组合起来。敏捷开发和测试方法帮助我们实现应用程序的持续集成、开发、构建、部署、测试和发行目标。 
构建自动化 
自动化构建运用Gradle、Apache Ant和Apache Maven等构建自动化工具，帮助我们创建应用程序构建。 
自动化构建过程包括将源代码编译成类文件或者二进制文件、提供第三方库文件引用、提供配置文件路径、将类文件或者二进制文件打包成包文件、执行自动化测试用例、在本地或远程机器上部署包文件和减少包文件创建中的手工作业等活动。 
持续集成 
简言之，持续集成（CI）是一种软件工程实践，在这种方法中，开发人员的每次签入（Check-in）都使用如下任一种方法验证。 
“拉”机制：在计划的时间点执行自动化构建。 
“推”机制：在存储库中保存更改时执行自动化构建。 
这一步之后，对源代码库中最新的更改执行一次单元测试。持续集成是一种流行的DevOps方法，要求开发人员将代码每天数次整合为Git和SVN等代码库，以验证代码的完整性。 
然后，自动化构建验证每次签入，使团队可以及早发现问题。 
CI（甚至CD）是公司同步DevOps存档的基线。在组织中如果没有很好地实施CI和CD，就无法实施DevOps。 
云配给 
在本章前面，我们已经介绍了云计算的基本知识。云配给为架构即代码（Infrastructure as Code ，IAC）敞开了大门，使整个过程变得极其高效，因为我们在很大的程度上将涉及人工干预的过程自动化了。 
现收现付的计费模式使所需的资源更加容易承受，不仅对大型组织，对中小规模组织和个人也是如此。 
云配给有助于改进和创新，因为以前的资源约束从成本和维护的角度阻碍了组织的进一步发展。一旦我们在基础设施资源上拥有了敏捷性，就可以考虑自动化运行应用程序所需软件包的安装和配置。 
配置管理 
配置管理（CM）系统中的更改，更具体地说，就是服务器运行时环境。我们可以使用市场上的许多工具实现配置管理。流行工具包括Chef、Puppet、Ansible、Salt等。 
让我们来考虑一个需要管理多个同类配置服务器的例子。 
例如，我们需要在每个服务器上安装Tomcat。如果需要改变所有服务器上的端口、更新某些软件包或者为某些用户提供权限，该怎么办？这种情形下的任何修改都是人工的，也就是一种容易出错的过程。因为所有服务器都使用相同的配置，可以利用自动化手段。 
持续交付 
持续交付和持续部署是可以互换使用的术语。但是，两者之间还是有一些小的差别。 
持续交付是在任何环境中以自动化方式部署一个应用程序并提供持续反馈以改善其质量的过程。持续交付和持续部署中的自动化方法不会改变。但是批准过程和其他小细节可能改变。 
持续测试和部署 
持续测试是端到端应用程序生命期管理过程中很重要的阶段，包括功能测试、性能测试、安全性测试等。 
Selenium、Appium、Apache JMeter和许多其他工具都可以用于相同的目的。另一方面，持续部署是部署应用程序，包含对生产环境的最新更改。 
持续监控 
持续监控是端到端交付流水线的骨干，开源监控工具就像冰淇淋勺的头部。 
我们必须理解，这是一种分阶段的方法，不一定要一次性完成各个阶段的自动化工作。每次选择一种DevOps实践、实施并理解其好处，然后再实施另一个，这是更有效的做法。 
这样，我们可以安全地评估组织文化改变带来的改善，消除应用程序生命期管理中的手工劳动。 
二：DevOps 常用的工具 
 
 代码管理（SCM）：GitHub、GitLab、BitBucket、SubVersion构建工具：Ant、Gradle、maven自动部署：Capistrano、CodeDeploy持续集成（CI）：Bamboo、Hudson、Jenkins配置管理：Ansible、Chef、Puppet、SaltStack、ScriptRock GuardRail容器：Docker、LXC、第三方厂商如AWS编排：Kubernetes、Core、Apache Mesos、DC/OS服务注册与发现：Zookeeper、etcd、Consul脚本语言：python、ruby、shell日志管理：ELK、Logentries系统监控：Datadog、Graphite、Icinga、Nagios性能监控：AppDynamics、New Relic、Splunk压力测试：JMeter、Blaze Meter、loader.io预警：PagerDuty、pingdom、厂商自带如AWS SNSHTTP加速器：Varnish消息总线：ActiveMQ、SQS应用服务器：Tomcat、JBossWeb服务器：Apache、Nginx、IIS数据库：MySQL、Oracle、PostgreSQL等关系型数据库；cassandra、mongoDB、redis等NoSQL数据库项目管理（PM）：Jira、Asana、Taiga、Trello、Basecamp、Pivotal Tracker 
 
对于其他工具可自行查阅，符合的才是最好的 
三：需求层面上来说敏捷和瀑布差异 
瀑布：一次性把需求提完，这样在开发过程中会存有些地方可能没想到，在客户使用过程中会有很多感觉不好用，开发的软件达不到预想的效果。 
敏捷：一小部分完成，投入使用，预估效果和收益。以滴滴平台为例，先开展出租车业务（先看市场反应和收益效果）在开展顺风车，网约车等业务，让客户慢慢的接受产品，如果一次性开展所有业务，到会让使用者感觉乱，不知道如何使用。 
备注：敏捷模型，会要求业务员和开发人员一起工作和沟通。
                
                
                
        
        
"，还能周周比对手早一步──Gartner预言：2016年全球大企业中25％要抢用DevOps。 
　　正是如此，企业正为DevOps所苦恼。他们都想得到DevOps，即使很多企业并不知道它到底是什么。比如，在很多情况下，一些工程师将自己宣传为DevOps，但是这仅是你自己的看法，实际上你并不是。DevOps并不是一个人，一个角色或者一个头衔。  
　　 
　　那么DevOps到底是什么呢？  
　　DevOps是一种文化转变，或者说是一个鼓励更好地交流和协作（即团队合作）以便于更快地构建可靠性更高、质量更好的软件的运动。Cloud Technology Partners公司的副总裁兼首席架构师Mike Kavis如此定义。  
　　Kevin Behr是HedgeServ的创始人和首席信息官，他说，DevOps综合了社会体系和技术体系。  
　　ThoughtWorks Studios的首席顾问 Jez Humble谈到了DevOps不仅仅是个工具，更是一种理念。DevOps是一种使持续交付成为可能的理念，关注于所有人共同协作以改进开发效率方面的衡量（比如生产力），同时增加稳定性并降低平均故障修复时间。  
　　2U Inc的技术总监James Kenigsberg描述了DevOps几个主要部分的本质：  
　　自动化：自动化确保过程的可重复性和稳定性。一直以来，它都是将任务执行予以标准化的最佳方式，避免任何可能产生偏差的风险，从同行评审代码到整个团队的流程改进。  
　　透明度：透明度让团队中的每个成员都可以清楚地看到其他人正在做什么，正在改进的沟通机制和业务流程，等等等等。  
　　才华：天才雇员把业务需要、效率和自动化放到硬件如何运作之前，在IT和开发人员之间不做严格的区分。在解决问题之前，他们到处找有此类经验的同事们交流，问问他们之前是如何解决这种问题的。  
　　DevOps是种与众不同的方案，它同时兼顾技术和人的问题。VersionOne 的敏捷老师Steve Ropa如此认为。Steve说，DevOps参考了许多技术方案。充分理解大多数这类实践是DevOps的基础。像持续集成此类的已经深入人心非常长的时间了，为了确保持续集成值得花时间做下去，它不但需要一台持续集成服务器还需要一致的自动化装置和验收测试。它还需要和版本控制系统紧密地集成在一起，以使所有事都在版本控制之下。除了这种技术实践之外，为了成功地实施DevOps，我们还要关注人、协作和理念。要从事这些实践，我们就需要人。把运维融入团队中需要一种理念，那就是心甘情愿地去做出艰难地调整和改变。这是思维模式的巨大转变。  
　　DevOps的定义  
　　术语“DevOps”通常指的是新兴的专业化运动，这种运动提倡开发和IT运维之间的高度协同，从而在完成高频率部署的同时，提高生产环境的可靠性、稳定性、弹性和安全性。  
　　为什么是开发和IT运维？因为典型的价值流就是在业务（定义需求）和客户（交付价值）之间。  
　　DevOps运动的起源通常被放在2009年前后，伴随着许多运动的相辅相成和相互促进——效率研讨会运动，特别是由John Allspaw和Paul Hammond展示的开创性的“一天10次部署”，基础设施即代码”运动(Mark Burgess 和Luke Kanies)，“敏捷基础设施运动” (Andrew Shafer)，“敏捷系统管理”运动(Patrick DeBois)，“精益创业”运动（Eric Ries），Jez Humble的持续集成和发布运动，以及Amazon的“平台即服务运动”等这些运动的相辅相成和相互促进而发展起来的。  
　　DevOps与敏捷有哪些不同？  
　　相对于瀑布开发模式，敏捷开发过程的一个基本原则就是以更快的频率交付最小化可用的软件。在敏捷的目标里，最明显的是在每个Sprint的迭代周期末尾，都具备可以交付的功能。  
　　部署的高频率经常会导致部署堆积在IT运维的面前。StreamStep公司的创始人，Clyde Logue总结过一句话：“敏捷对于开发重新获得商业的信任是大有益处的，但是它无意于将IT运维拒之门外，DevOps使得IT组织作为一个整体重新获得商业的信任”。  
　　DevOps和敏捷软件开发是相辅相成的，因为它拓展和完善了持续集成和发布流程，因此可以确保代码是生产上可用，并且确实能给客户带来价值。  
　　DevOps不仅仅创建了一个面向IT运维的工作流，当代码已经开发完成但是却无法被部署到生产上时，这些部署就会堆积在IT运维的面前，客户也将因而无法享受到任何价值，更糟糕的是，部署经常导致IT环境的中断和服务不可用。  
　　DevOps具有与生俱来的文化变革的基因组成，因为它革新了开发和IT运维之间的工作流和传统的衡量标准。  
　　DevOps与ITIL和ITSM有什么不同？  
　　尽管很多人视DevOps为ITIL和ITSM的颠覆，而我则有着不同的看法，在支撑IT运维的业务流程方面，ITIL和ITSM流程无疑还是最好的。实际上，他们描述了需要被IT运维支持的功能集合，这些功能集合足以支撑DevOps式的工作流。  
　　敏捷和持续集成以及持续发布是开发的输出，这些输出同时作为IT运维的输入，为了适用跟DevOps相关的快速部署的节奏，ITIL流程的很多方面，特别是围绕着变更、配置和发布流程方面，需要自动化。  
　　DevOps的目标不仅只是增加变更的频率，而且也支持在不中断和破坏当前服务的基础上，确保功能部署成功，同时也可以快速检测和修复缺陷。这引入了服务设计，事故和问题管理方面的ITIL新准则。  
　　DevOps和可视运维如何搭配  
　　2004年，我与Kevin Behr以及George Spafford合著了《The Visible Ops Handbook》，可视运维是一个说明性的指南，该指南使得高性能IT运维能顺利实现“从优秀到卓越”的转变，关键点之一是如何控制和减少计划外的工作。  
　　在开发和IT运维之间，DevOps不仅聚焦在创建快速和稳定的计划工作流，而且DevOps也有一个更全面的方法来系统的消除计划外工作，定义开发弹性准则，并负责管理和减少技术债务。  
　　DevOps的基本原则  
　　在《The Phoenix Project: A Novel About IT, DevOps, and Helping Your Business Win》和《DevOps Cookbook》的书里，我们描述了DevOps的支撑原则——“DevOps三个基本点”，所有的DevOps模式都可以源自这3个基本点。  
　　第一个基本点强调整个系统的性能，而非将性能局限于特定的工作领域里，这个工作领域可以大到一个部门（例如开发和IT运维）或者小到一个个人贡献者（例如开发者，系统管理员等）。  
　　重点是由IT推动的的业务价值流，换句话说，它始于需求定义（比如被业务或IT部门定义），进行开发构建，又交给IT运维，最后价值以一种服务的形式交付给客户。  
　　实践第一个基本点的结果——决不传递一个已知缺陷至下游，决不因小失大，总是致力于改进流程，执着于深刻理解系统需求（根据戴明的理论）  
　　第二个基本点是关于创建从右至左的反馈回路，几乎所有的流程改进计划的目标都是缩短和放大反馈回路，以便可以持续进行必要的修正。  
　　应用第二个基本点的结果——包括理解和回应所有内部和外部客户，缩短和放大所有的反馈回路，必要时，非常容易的嵌入客户需要的知识。  
　　第三个基本点是打造一种文化用来促进两件事情——持续不断的探索精神，勇担风险的精神以及从成功和失败中来学习的能力，同时也得谨记：重复和实践是融会贯通的前提。  
　　这两件事情对我们来说同等重要，探索精神和勇担风险的精神可以确保我们持续改进，它甚至意味着我们可能到达了之前曾未到过的危险区域，因此这也迫使我们去学习，掌握并融会贯通那些技能，因而使得我们能够顺利离开危险区。  
　　第三个基本点的结果——分配时间去改进每天的例行工作，培养一种奖励冒险精神的风气，同时主动引入故障到系统中，从而提高弹性。  
　　DevOps模式的应用领域  
　　在《DevOps Cookbook》里，我们将DevOps模式分成4个领域，  
　　领域一，将开发延伸至生产中——包括拓展持续集成和发布功能至生产，集成QA和信息安全至整个工作流，确保代码和环境可在生产中直接部署，。  
　　领域二，向开发中加入生产反馈——包括建立开发和IT运营事件的完整时间表用于帮助事件的解决，使得开发融入无指责的生产反思，尽可能使得开发可以自助服务，同时创建信息指示器用来表明本地的决策如何影响全局的目标。  
　　领域三，开发嵌入到IT运维中——包括开发投入到整个生产问题处理链，分配开发资源用于生产问题管理，并协助退回技术债务，而且开发为IT运维提供交叉培训，增加IT运维处理问题的能力，从而降低升级问题的数量。  
　　领域四，将IT运维嵌入至开发——包括嵌入和联络IT运维资源至开发，帮助开发创建为IT运维(部署，生产代码的管理等)使用的可重用的用户故事，定义一些可以被所有项目共用的非功能性需求。  
　　DevOps的价值  
　　我相信企业在应用了DevOps之后可以得到3个业务优势：产品快速推向市场（比如，缩短开发周期时间和更高的部署频率），提高质量（比如，提高可用性，提高变更成功率，减少故障，等等）并提高组织的有效性（比如，将时间花在价值增加活动中，减少浪费，同时交付更多的价值至客户手中）。  
　　产品快速推向市场：  
　　2007年，在IT流程协会，在评测了超过1500个IT组织结构之后，我们得出结论：相比较于一般的组织，高效的IT组织的效率要高出5到7倍。变更要多出14倍，变更故障率只有前者的1/2，第一次修复率要高出4倍，而且一级事故时间要短10倍。重复审计发现要少4倍，通过内部控制来检测漏洞方面要高出5倍左右，并且8倍于前者的项目到期日表现！  
　　在我们的研究中，观察到的最高部署频率大约是每周1000次生产变更，变更成功率为99.5%，我们认为这真得很快……  
　　其中一个高绩效的特点是，最好正在继续变得更好。这绝对是发生在部署频率的领域内。在应用了DevOps实践的组织正表现出更快的快速部署和实施，而且相比于一般组织要快几个数量级。  
　　埃森哲最近做了一个研究：互联网公司都在做什么？通过亚马逊的记录显示，他们在保持目前每周部署1000次的情况下，同时还能保证99.999%的成功率！  
　　http://www.youtube.com/watch?v=dxk8b9rSKOo 
　　http://www.slideshare.net/slideshow/embed_code/9466635?startSlide=33)  
　　维持高部署率（即，快速的迭代次数）的能力转化为业务价值的两种主要方式：  
　　组织如何快速的把一个想法变成价值交付到客户手中(比如，Damon Edwards 和John Willis说得“概念到落地”),组织同时可以做多个尝试。  
　　对我来说，如果我在一个每9个月才能部署一次的机构里，而我的竞争对手可以每天部署10次，那么无疑我将有着明显的竞争劣势。  
　　高频率部署也实现了快速和持续不断的部署。Intuit公司的创始人，Scott Cook一直在组织的各个层面，不停的倡导“犀利创新文化”，我最喜欢的例子之一就记录在  http://network.intuit.com/2011/04/20/leadership-in-the-agile-age/。  
　　“每一位员工应该能够做到快速，高速的交付……Dan Maurer负责我们的消费者部门，包括TurboTax网站。当他接手的时候，我们一年只做几次部署，但是通过营造一个犀利的创新文化，在报税季节的3个月里，他们现在能做165次部署。商业价值？网站转化率高达50%。员工价值？这帮家伙们真得喜爱它，因为可以将他们的想法很快交付到市场中”  
　　对我来说，Scott Cook的故事最令人震惊的是，他们在繁忙的报税季节做所有这些部署！在旺季，大多数组织都会冻结任何变更（例如，从十月到一月，零售商可能经常有变更冻结）。但如果在旺季，若你能提高转换率，而你的竞争对手不能，那么这就是一个真正的竞争优势。  
　　达到这个效果的前提就是，在不影响客户的基础上，可以快速的完成并部署很多小的变更。  
　　减少IT浪费总量：  
　　Mike Orzen和我很早就谈到了IT价值流中的巨大浪费，这些浪费是缘起于交付期限延长，不良的交接，计划外工作和返工。基于Michael Krigsman的一篇文章，在应用了DevOps的原则之后，可以挽回很多价值而非浪费。  
　　我们计算过，如果能够减少一半的IT浪费量，然后把这些省下来的钱重新投资，若能得到5倍的投资回报，那么每年可以产生30万亿美元的价值。  
　　这就是溜过我们指尖的巨大的价值和机会。占了全球GDP的4.7%，甚至超越整个德国的经济产出。  
　　我觉得这真的很重要，尤其是当我想到我的三个孩子将继承的这个世界，这些浪费对生产率，生活水平和经济繁荣的潜在影响正在不断增加，让我觉得不得不改变。  
　　然而，还有一个更大的成本，在大部分的IT组织结构里，工作是吃力不讨好和令人沮丧的，人们觉得他们自己就像被困在一部不断重复的恐怖电影里，无法改变最终的结局。管理人员本应将IT管理的很好，但是他们放弃了这样的职责，直接导致开发，IT运维与信息安全之间无休止的部门冲突，而审计师的出现只会让事情变得更糟。  
　　长期来说，必然的结果就是进步迟缓。IT专业人士的生活往往令人泄气和沮丧的，通常导致渗透在生活方方面面的无力感和高压状态。IT专业人员面临着压力相关的健康问题、社交问题、宅在家里等问题，这样使得他们不但不健康，同时生活也很可能难以为继。  
　　作为人，我们注定就是去贡献，感觉就好像我们正在积极发挥作用，与众不同。但是，往往当IT专业人员向他们的组织寻求帮助的时候，他们会得到回答：“你不明白”，更糟的是，他们甚至会得到“你不重要”这样的待遇。  
　　信息安全和QA如何融入DevOps工作流  
　　DevOps的高部署频率通常会给QA和信息安全带来很大的压力，考虑这样一种情形，开发每天部署10次，而信息安全通常需要4个月的时间来评估应用的安全。很显然，在代码开发和代码安全审计方面的速率一点都不匹配。  
　　2011年Dropbox故障就是一个著名的例子，其体现了未经充分测试的开发代码带来的风险有多大。因为这次事故，认证功能被关闭了4个小时，从而导致未授权的用户可以访问所有存储的数据。  
　　当然对QA和信息安全来说，也不全是坏消息，开发会通过持续集成和好的发布惯例(持续测试的文化)来维持高频率部署。换句话说，一旦代码被提交，自动测试便开始运行，而且一旦发现问题，必须马上解决，就像开发人员在检查还没编译的代码。  
　　通过集成功能测试，集成测试和信息安全测试到开发的每天例行工作中，问题将会被更快发现，同时也会被更快解决。  
　　同样，也有着越来越多的信息安全工具，比如Gauntlet和Security Monkey，可以帮助我们在开发和上线的过程中测试安全对象，达到信息安全目标。  
　　但是也有一个很重要的问题需要考虑，静态代码分析工具通常需要花费很长时间才能运行完，以数小时或天记。在这种情况下，信息安全就必须注明特定的有安全隐患的模块，比如加密，认证模块。只要这些模块变化，一轮全面的信息安全测试就运行，否则部署就可以继续，而不需要全覆盖信息安全测试。  
　　需要特别提到的一点是，我们观察到，相较于标准的功能单元测试，DevOps工作流依赖于检测和恢复更多一点。换句话说，当然开发以软件套件的方式交付的时候，那么部署变更和补丁就比较困难，同时QA也严重依赖代码测试来验证功能的正确性。另一方面，当软件以服务的形式交付，缺陷就可以被很快修复。而且QA也可以减少测试依赖，取而代之的更多依赖缺陷的生产监控，只要缺陷能被快速的修复。  
　　代码故障恢复可借助于“功能标签”等手段，通过以配置的形式来启用或禁用某些代码功能，从而达到避免推出一个全功能部署，而只部署通过测试的功能至生产。  
　　当功能不可用或性能出现下降等较坏的情况发生的时候，依赖于检测和恢复进行QA将会一种更好的选择。但是当面对损失保密性或数据和系统一致性的时候，我们就不可以依赖检测和恢复这种方法。取而代之的是，在部署之前，必须进行充分的测试，否则可能导致重大的安全事故。  
　　DevOps模式之一  
　　通常，在软件开发项目中，开发都会用完所有计划中的时间用于开发功能。这样会导致无法充分解决IT运维的问题，于是他们就在定义，创建和测试数据库、操作系统、网络、虚拟化等代码依赖的方面直接抄捷径，以此节省时间。  
　　所以这就是开发和IT运维以及次优结果之间的永恒的紧张关系的主要原因。后果很严重，比如不适当的定义和指定环境、无法重部署、代码和环境的不兼容等等。  
　　在这种模式下，我们会再开发过程的早期提出环境要求，并强制代码和环境必须被一起测试的策略，一旦使用敏捷开发方法，我们可以做到非常简洁和优雅。  
　　按敏捷的要求，在每个迭代结束后，我们就会发布能运行且可被部署的代码，通常时间为两周。我们将修改敏捷迭代周期策略，不仅仅只交付能运行且可被部署的代码，同时在每个迭代周期的早期，还必须准备好环境用于部署这些代码。  
　　由此，我们不再让IT运维负责创建生产环境的规格要求，取而代之的，建立一个自动化的环境创建流程，这种机制不仅仅只创建生产环境，同时也包括开发和QA环境。  
　　通过使得环境早期即可用，甚至可能早于软件项目开始之前，开发和QA可以在统一和稳定的环境中运行和测试他们的代码，从而控制不同环境之间的差异。  
　　此外，通过保持不同阶段（例如，开发、QA、集成测试、生产）尽可能小的差异，在生产部署之前，我们就能发现并修复代码和环境之间的互操作性问题。  
　　理想情况下，我们建立的部署机制是完全自动化的。可以使用像Shell脚本、Puppet、Chef、Soaris Jumpstart、Redhat Kickstart、Debian Preseed等等很多工具来完成。  
　　DevOps模式之二：  
　　BrowserMob前CEO，Patrick Lightbody曾经说过，“当我们在凌晨2点叫醒开发工程师来解决问题时，缺陷被修复的比以前更快了，这真是一个惊人的反馈回路”，这是我最喜欢的引用之一。  
　　它强调了问题的关键点，开发一般会在周五的5点提交代码，然后高高兴兴的回家，而IT运维则要花费一整个周末来收拾残局。更糟的是，缺陷和已知错误在生产上不断递归，迫使IT运维不停的救火，而根本原因从不被修复，造成这种现象的原因就是开发总是关注开发新功能。  
　　第二种模式的一个重要要素就是缩短和放大反馈回路，使得开发更贴近客户体验(包括IT运维和最终用户)  
　　注意这里的对称性，模式一讨论的尽早让环境统一并可用即是将IT运维嵌入到开中发，而模式二则为将开发嵌入到IT运维中。  
　　我们将开发嵌入进IT运维的问题升级链中，可以将他们放在三级支持中，甚至使开发对整个代码的部署成功负责。要么回滚，要么修复缺陷，直到服务恢复。  
　　我们的目标不是让开发取代IT运维，相反，就是想确开发看到他们工作和变更的下游变化，激励他们以IT运维的视角来更快的解决问题，从而达到一个全局的目标。  
　　DevOps模式之三：  
　　在开发和IT运维之间DevOps价值流中，另一个经常发生的问题就是不够规范。这方面的例子是，每个部署都带有其特殊性，因此也使得每次部署后的环境带有特殊性，一旦这样的事情发生，那么这个组织里就没有针对流程配置的控制。  
　　在这种模式下，我们定义可重用且可跨多个项目的部署流程，敏捷方法里有个很简单的解决方案。就是将部署的活动变成一个用户故事。例如，我们为IT运维构建一个可重用的用户故事，叫做“部署到高可用环境”，这个用户故事定义了明确的构建环境的步骤、需要多长时间、需要哪些资源等等。  
　　那么这些信息可以被项目经理用来集成部署内容到项目计划中去。例如，如果我们知道在过去的3年时间里，“部署到高可用环境”用户故事被部署了15次，每次的平均部署时间为3天，加或减一天，那么我们对自己的部署计划将会非常有信心。  
　　此外，我们还可以因部署活动被合适的集成到软件项目中而获得信心。  
　　我们也得认识到有些特定的软件项目要求特别的环境，且其不被IT运维官方支持，我们可以允许这些被生产允许的环境中的例外，但是被IT运维部门外面的人提供支持的。  
　　通过这种方法，我们即获得了环境标准化的好处（比如，减少生产差异，环境更一致，IT运维的支持和维护能力增加），又能再允许的特殊情况下，提供业务需要的灵活性。  
　　的确，DevOps的提出旨在消除开发人员和系统运维工程师之间的障碍，但能否成功却取决于公司的文化和灵活性。 
                
        
        
"DevOps（英文Development和Operations的组合）是一组过程、方法与系统的统称，用于促进开发（应用程序/软件工程）、技术运营和质量保障（QA）部门之间的沟通、协作与整合。它的出现是由于软件行业日益清晰地认识到：为了按时交付软件产品和服务，开发和运营工作必须紧密合作。 
可以把DevOps看作开发（软件工程）、技术运营和质量保障（QA）三者的交集。  传统的软件组织将开发、IT运营和质量保障设为各自分离的部门。在这种环境下如何采用新的开发方法（例如敏捷软件开发），这是一个重要的课题：按照从前的工作方式，开发和部署不需要IT支持或者QA深入的、跨部门的支持，而却需要极其紧密的多部门协作。然而DevOps考虑的还不止是软件部署。它是一套针对这几个部门间沟通与协作问题的流程和方法。 
需要频繁交付的企业可能更需要对DevOps有一个大致的了解。Flickr发展了自己的DevOps能力，使之能够支撑业务部门“每天部署10次”的要求──如果一个组织要生产面向多种用户、具备多样功能的应用程序，其部署周期必然会很短。这种能力也被称为持续部署，并且经常与精益创业方法联系起来。 从2009年起，相关的工作组、专业组织和博客快速涌现。  DevOps的引入能对产品交付、测试、功能开发和维护（包括──曾经罕见但如今已屡见不鲜的──“热补丁”）起到意义深远的影响。在缺乏DevOps能力的组织中，开发与运营之间存在着信息“鸿沟”──例如运营人员要求更好的可靠性和安全性，开发人员则希望基础设施响应更快，而业务用户的需求则是更快地将更多的特性发布给最终用户使用。这种信息鸿沟就是最常出问题的地方。 
以下几方面因素可能促使一个组织引入DevOps：  使用敏捷或其他软件开发过程与方法  业务负责人要求加快产品交付的速率  虚拟化和云计算基础设施（可能来自内部或外部供应商）日益普遍  数据中心自动化技术和配置管理工具的普及  有一种观点认为，占主导地位的“传统”美国式管理风格（“斯隆模型 vs 丰田模型”）会导致“烟囱式自动化”，从而造成开发与运营之间的鸿沟，因此需要DevOps能力来克服由此引发的问题。  DevOps经常被描述为“开发团队与运营团队之间更具协作性、更高效的关系”。由于团队间协作关系的改善，整个组织的效率因此得到提升，伴随频繁变化而来的生产环境的风险也能得到降低。 
DevOps对应用程序发布的影响  在很多企业中，应用程序发布是一项涉及多个团队、压力很大、风险很高的活动。然而在具备DevOps能力的组织中，应用程序发布的风险很低，原因如下：  与传统开发方法那种大规模的、不频繁的发布（通常以“季度”或“年”为单位）相比，敏捷方法大大提升了发布频率（通常以“天”或“周”为单位）  减少变更范围与传统的瀑布式开发模型相比，采用敏捷或迭代式开发意味着更频繁的发布、每次发布包含的变化更少。由于部署经常进行，因此每次部署不会对生产系统造成巨大影响，应用程序会以平滑的速率逐渐生长。加强发布协调靠强有力的发布协调人来弥合开发与运营之间的技能鸿沟和沟通鸿沟；采用电子数据表、电话会议、即时消息、企业门户（wiki、sharepoint）等协作工具来确保所有相关人员理解变更的内容并全力合作。强大的自动化部署手段能够确保部署任务的可重复性、减少部署出错的可能性。
                
                
                
        
        
"目录 
 1. 什么是 `DevOps`2. `DevOps` 概念的起源2.1. 单体架构 + 瀑布模式2.2. 分布式架构 + 敏捷开发模式2.2.1. 多人协同开发问题2.2.2. 多机器问题2.2.3. 开发和运维角色的天生对立问题 
   2.3. 微服务架构 + `DevOps` 
  3. `DevOps` 到底是什么4. `DevOps` 常用的工具4.1. `Jenkins`4.2. `Kubernetes` 
  
 
 
1. 什么是 DevOps 
DevOps 这个词，其实就是 Development 和 Operations 两个词的组合。它的英文发音是 /de'vɒps/，类似于""迪沃普斯"" 
 它的目标：DevOps 就是让开发人员和运维人员更好地沟通合作，通过自动化流程来使得软件整体过程更加快捷和可靠 
2. DevOps 概念的起源 
2.1. 单体架构 + 瀑布模式 
 
 以电商系统为例，它是单体应用架构，这个时候只有开发人员 ，没有运维人员，开发人员就是全栈，项目开发好，找台服务器安装好环境，把 jar 包丢到远程服务器，放上去开启服务就可以 
这个时候服务监控也简单，服务出了问题，直接去线上看一下运行日志，为了解放双手监控服务，开发者会写一些脚本分析日志，服务器少，部署简单，通常开发就可以完成运维的工作，不需要专门的运维来做部署，所以开发模式很简答，直接按照瀑布流方式开发就可 
2.2. 分布式架构 + 敏捷开发模式 
  随着业务体量发展越来越大，一台机器扛不住，那么就加机器，单机变多机，业务架构也开始加入了 nginx，cdn 缓存等通用基础服务，业务变多肯定会招人，就涉及到多人协同开发，多人多机器模式 
2.2.1. 多人协同开发问题 
人员一多，为了更好的分工，大多会将项目进行拆分，每个人负责专注于一部分，有点包干到户的感觉。敏捷开发的核心理念：就是既然我们无法充分了解用户的真实需求是怎样的，将一个大的目标不断拆解，把它变成一个个可交付的小目标，然后通过不断迭代，以小步快跑的方式持续开发。另外，一个项目是很大的，为了保证项目质量，测试环节不可减少，为了加快速度增大开发效率，QA 的工作最好是和开发同步交替进行的，需要将测试环节从后面注入到整个开发环节当中，每次可交付的都是一个可用的功能集合，对开发交付的内容进行持续验证 
2.2.2. 多机器问题 
再说说多机器问题，之前机器很少架构简单的时候，开发就可以干运维的活，就算加了几台服务器，那也是脚本将 JAR 包同时发布到这些机器上，好像也挺简单，但是会有两个人同时上线部署被覆盖的问题，所以大家在上线之前可能会去群里吆喝一声，”我要上线了，大家先别上线哈“，可想而知这样效率也很低下 
公司业务一大，像大公司的动不动就是几千台服务器，就需要专门的运维介入了，一方面是因为开发分工每个人都专注于自己的事情，不会那么用心进行维护，另一方面是运维的学习成本确实变高了，开发人质量参差不齐，服务器要是每个人都可以上估计领导每天晚上都要做噩梦。但是这个时候也不是 DEVOPS，而是 DEV+OPS，这时 Ops 的主要职责就是：硬件维护、网络设备维护、DBA 、基础服务维护、数据监控等，运维们擅长写各种部署，监控脚本，减少机械的重复工作，开发模式变成了敏捷开发模式 
2.2.3. 开发和运维角色的天生对立问题 
加入运维，就要协调人员配合，运维的宿命就是维稳，他们是很讨厌变动的；开发的天职确是不断地推代码上线，进行代码变动，更替迭代，这两个工种天生就是对立的 
很多大公司有那种，开发人员想要上线，需要提交各种审批，层层签字画押，多少人的上线激情被一句冷冰冰的‘还没到窗口发布期’给泼的透心凉。所以，敏捷开发解决了协同开发和多机器部署开发问题，但是没有解决内部人员的矛盾，留着这个矛盾在公司，开发和运维随时都可能约‘生死架’ 
2.3. 微服务架构 + DevOps 
  将项目拆成一个个小的服务单独部署，以电商项目为例如图，将整个项目拆分为用户服务，商品服务，订单服务，积分服务…每个服务单独部署，之间通过互相调用的方式来交互，而且可以将一些基础服务例如上传图片，发送短信等很多服务都需要的基础东西，抽象到一个单独的服务，也就是前些年鼓吹的很厉害的‘中台服务’ 
拆分部署催生出 DevOps，再看看这种架构下的开发模式 DevOps，运维需要做的上线工作，主要就是将代码部署到对应的机器里面，微服务有那么多的服务，每个大点的公司几百个服务不算多，而且还可能随时搞一个服务出来，如果还按照原始的脚本部署方式，可能最后连是哪个脚本都找不到。而且，如果每个服务上线都需要运维来同意，开发也太卑微了，估计要天天求着运维同意发布，运维也会烦不胜烦 
那么为何不能再远程部署一些机器，专门用来管理代码，进行上线工作，由运维事先把上线的规则都给定义好了，开发只要按照他的规则都访问这台服务器进行各自的代码合成和发布，自己上线呢，能用代码自动完成的事情就绝不要手动解决，这是每个开发人员都在想的东西。运维需要做的事情，慢慢的都沉淀到了各个平台上面，例如监控，有专门的监控组件和可视化，基础服务例如服务器，CDN，负载均衡等基础服务可以外包到云服务厂商，日志也有专门的日志工具，链路追踪也有专门的组件和可视化，还有网关等，渐渐的，只要这些都配置好了，开发也可以做运维的部分工作，毕竟开发才是最了解代码的人，哪里出了问题看看监控日志，可以最快速度定位到问题，于是 DevOps开发模式诞生了，开发也是运维 
3. DevOps 到底是什么 
从目标来看，DevOps 就是让开发人员和运维人员更好地沟通合作，通过自动化流程来使得软件整体过程更加快捷和可靠 
对比前面所说的瀑布式开发和敏捷开发，我们可以明显看出，DevOps 贯穿了软件全生命周期，而不仅限于开发阶段 
 下面这张图，更明显地说明了 DevOps 所处的位置，还有它的价值 
 在 DevOps 的流程下，运维人员会在项目开发期间就介入到开发过程中，了解开发人员使用的系统架构和技术路线，从而制定适当的运维方案。而开发人员也会在运维的初期参与到系统部署中，并提供系统部署的优化建议 
DevOps 的实施，促进开发和运维人员的沟通，增进彼此的理（gan）解（qing） 
4. DevOps 常用的工具 
GitJenkinsDockerKubernetes 
4.1. Jenkins 
Jenkins（读：[ˈdʒɛŋkɪnz]）是很多软件开发团队在走向 DevOps 时会用的自动化工具。它是开源的 CI/CD 服务器，帮助用户自动化交付流水线的不同阶段。Jenkins 之所以流行的主要原因是其巨大的插件生态系统。目前，它提供 1000 多个插件，因此它可以和几乎所有 DevOps 工具集成 
使用 Jenkins 很容易，它在 Windows，Mac OS X 和 Linux 上开箱即用。很容易就可以使用 Docker 安装它。用户可以通过浏览器搭建并且配置 Jenkins 服务器。如果你是第一次使用它，可以选择安装最常用的插件。当然也可以创建自定义配置。使用 Jenkins 用户可以尽快迭代并部署新代码。它还帮助用户度量流水线里每一步是否成功 
官网：https://jenkins.io/ 
4.2. Kubernetes 
Kubernetes 又称 K8S，它是容器编排平台，将容器化推进到下一个层面。它可以使用 Docker 或者其他替代产品。使用 Kubernetes 用户可以将容器组织成逻辑单元。如果你只有几个容器，那么可能并不需要容器编排平台。但是，当系统达到一定级别的复杂度，需要扩展资源的时候，这就是合理的下一步。Kubernetes 让用户可以自动化管理上百个容器的过程 
使用 Kubernetes 无需将容器化的应用程序绑定到某个单独的机器里。相反，你可以将它部署到一个机器集群里，Kubernetes 会自动化分发并在整个集群里调度容器 
一个 Kubernetes 集群包含一个 master 和几个 worker 节点。master 节点实现预定义的规则，并且将容器部署到 worker 节点上。Kubernetes 负责所有一切。比如，它注意到某个 worker 节点下线了，就会将其上的容器重新分发到别的节点上 
官网：https://kubernetes.io/
                
                
                
        
        
"目录 
 专栏导读一、DevOps是什么？二、为什么会出现DevOps？1、容器化技术的发展，微服务架构的发展，直接促进了DevOps的迅速发展2、敏态需求的增加，即探索性工作的增加3、软件开发活动在企业经营活动中占比的不断增加4、企业存在对消除浪费的需求 
   三、DevOps的优势四、DevOps生命周期五、DevOps三大原则1、流动原则2、反馈原则3、持续学习与实验原则 
   六、快速实现DevOps 
  
 
 
专栏导读 
 
 🏆作者简介：哪吒，CSDN2022博客之星Top1、CSDN2021博客之星Top2、多届新星计划导师✌、博客专家💪 ，专注Java硬核干货分享，立志做到Java赛道全网Top N。 🏆本文收录于Java基础教程系列（进阶篇），本专栏是针对大学生、初级Java工程师精心打造，针对Java生态，逐个击破，不断学习，打通Java技术栈。 🏆订阅后，可以阅读Java基础教程系列（进阶篇）中全部文章，包含Java基础、Java高并发、Spring、MySQL等Java进阶技术栈。 🏆还可以订阅其姐妹篇，Java基础教程系列，包含全部Java基础知识点、Java8新特性、Java集合、Java多线程、Java代码实例，理论结合实战，实现Java的轻松学习。 🏆哪吒多年工作总结：Java学习路线总结，搬砖工逆袭Java架构师。 🏆面试福音：10万字208道Java经典面试题总结(附答案) 
 
大家好，我是哪吒。 
本系列为SpringCloud微服务系列，上一期分享了 图解Nginx，系统架构演变 + Nginx反向代理与负载均衡，今天分享DevOps，读哪吒编程，品技术人生。 
一、DevOps是什么？ 
DevOps 是 Development 和 Operations 的组合词。它是一组过程、方法与系统的统称，用于促进开发（应用程序 / 软件工程）、技术运营和质量保障（QA）部门之间的沟通、协作与整合。 
 它是一种重视“软件开发人员（Dev）”和“IT 运维技术人员（Ops）”之间沟通合作的文化、运动或惯例。透过自动化“软件交付”和“架构变更”的流程，来使得构建、测试、发布软件能够更加地快捷、频繁和可靠，把敏捷开发部门和运维部门之间的围墙打通，形成闭环。 
 
在 DevOps 流程下，运维人员会在项目开发期间就介入到开发过程中，了解开发人员使用的系统架构和技术路线，从而制定适当的运维方案。而开发人员也会在运维的初期参与到系统部署中，并提供系统部署的优化建议。 
二、为什么会出现DevOps？ 
我觉得根本原因有如下几点： 
1、容器化技术的发展，微服务架构的发展，直接促进了DevOps的迅速发展 
2、敏态需求的增加，即探索性工作的增加 
软件开发从传统的瀑布流方式到敏捷开发，再到现在对敏捷开发提出了更高的要求，近些年创新型的应用不断涌现，在这些应用的研发过程中多采用小步快跑、快速试错的方式，这些探索性工作要求运维能够具备一天发布多次的能力，需要企业完成由稳态到敏态的转变。 
3、软件开发活动在企业经营活动中占比的不断增加 
业务发展对软件的依赖由轻度依赖、中度依赖发展到目前的重度依赖。 
4、企业存在对消除浪费的需求 
软件开发活动在企业中的位置越来越重要，而像企业经营活动一样，软件开发活动中也存在着许多的浪费，企业管理上必然存在着 「识别并消除浪费」 的需求。软件开发中的浪费包括不必要和必要的浪费，不必要的浪费有：无人使用的功能、软件bug、等待测试、等待审批等；必要的浪费包括：工作项移交、测试、项目管理等。 
三、DevOps的优势 
工程效率提升50%，这是一个真实的案例。  
DevOps 的主要优势在于，自动化流程可以比人员更快，更可靠地执行重复操作。对于组织而言，让开发人员或其他人员整天构建和部署代码既不可行，也无济于事。使这些重复性任务自动化可以使开发人员腾出精力去做自己最擅长的工作 ~ 修改代码。 
这样做是允许在几分钟之内构建和部署代码，这仅受组织选择管理其DevOps管道的方式的限制。这意味着从开发功能或错误修正到向最终用户提供更好的体验之间的时间可以大大缩短，从而使用户更加满意。 
它还创建了更好的反馈循环。新功能越早交付给用户，组织就越早可以收集反馈和指标并深入了解用户对其产品的喜好。这使组织保持敏捷并为创新提供了更好的环境。 
四、DevOps生命周期 
DevOps生命周期主要包括产品（策划、研发、运营、推出）、项目（立项、执行、完工），而敏捷、持续集成、持续部署、持续交付都是 DevOps 的一个局部的阶段。 
 DevOps 在支持全生命周期的过程，要以产品的视角来看待，真正进行交付的时候，也要以产品为维度进行组织的设立。 
DevOps 的核心是一组工具和实践，可帮助组织更可靠，更快地构建，测试和部署软件。DevOps 使组织能够比具有传统开发和发布周期的组织更快地发展和交付其产品，从而可以提供竞争优势。与其每天两周或更长时间发布一次版本，不如每天向用户交付新功能，并且可以在数小时内部署错误修正，所有这些都遵循相同的可重复自动化流程。 
五、DevOps三大原则 
 
1、流动原则 
「加速」 从开发、运维到交付给客户的流程； 
坚持少做，产品开始开发时采用 MVP 原则，产品迭代时要适时做减法；持续分解问题，大的变更或需求拆解为一系列小的变更，快速解决；工作可视化，采用 Sprint 看板将工作可视化；控制任务数量，减少前置时间，降低测试人员的等待时间；减少交接次数，减少不必要的沟通和等待；持续识别和改善约束点，提高搭建环境、需求文档、QA、开发、运维的生产力；消除价值流中的困境和浪费； 
2、反馈原则 
建设 「安全可靠」 的工作体系； 
在复杂系统中安全地工作；及时发现问题；在源头保障质量；为内部客户优化工作； 
3、持续学习与实验原则 
采用科学的工作方式，将对组织的 「改进和创新」 作为工作的一部分。 
建立学习型组织和安全文化；将日常工作的改进制度化；把局部发现转化为全局优化；在日常工作中注入弹性模式；领导层强化学习文化； 
六、快速实现DevOps 
 
开发人员完成了为其小部件的新功能编写代码。他们将代码提交到功能分支，该功能分支在其开发计算机上启动了一些轻量级测试，检查是否存在任何代码样式问题，同时还扫描具有新公开的安全漏洞的软件包。开发人员提交拉取请求以将其代码合并到代码存储库中，该代码存储库向团队聊天发送通知。 
团队中的另一位开发人员检查了代码更改，在发现代码中没有问题之后，批准了请求请求。该代码会自动合并到开发分支中，从而开始构建过程。构建服务器将克隆 developer分支，安装所有软件包依赖项并构建窗口小部件。生成服务器会运行单元测试和集成测试，以确保新功能不会在小部件的其他部分引起任何退步。 
每个测试都通过了，构建成功。根据代码库中定义的最佳实践配置，将在云中自动配置一个新容器，并部署小部件。 
此时，组织有两个选择。他们可以选择将更新后的窗口小部件自动发布到生产环境中，并使所有用户或选择接收最新功能的部分用户可以使用该功能。自动部署到生产中称为连续部署（CD）。 
或者，组织可以选择仅将功能发布到用户验收测试（UAT）环境中，然后根据预定义的时间表手动批准将发布发布到生产中。在管道中添加手动审批流程通常称为“持续交付”（CD的另一种形式）。 
无论是否涉及手动步骤，一旦将小部件成功部署到生产中，都将执行附加的自动化测试。其他工具收集有关性能和用户行为的指标，这些指标将提供给IT运营和开发团队，以提供实时反馈，突出显示潜在的错误并帮助塑造新功能。 
对于基本的 DevOps 管道，这是一个相当典型的过程，但具体细节取决于组织。 
一些组织倾向于在生产环境中快速部署，将新功能隐藏在功能标记后面，以允许向用户群分阶段发布。其他人则更喜欢使用更传统的开发，测试和生产环境结构，在此结构中，功能被批量部署并在部署到生产之前通过多个手动门缓慢发布。 
DevOps 可以根据组织或项目的特定需求进行定制。 
该过程趋于发展，添加其他测试以生成更安全的应用程序，或找到优化管道以加快构建速度并减少人工干预的方法。 
  
  
Java学习路线总结，搬砖工逆袭Java架构师 
10万字208道Java经典面试题总结(附答案) 
Java基础教程系列 
Java基础教程系列（进阶篇）
                
                
                
        
        文章知识点与官方知识档案匹配，可进一步学习相关知识云原生入门技能树云原生环境小结云原生的分层12783 人正在系统学习中
        
          
            
            
          
            
              
                哪吒编程
                
                  
                  微信公众号
                  
                
              
              领取学习资料、大厂面试真题、职业规划"
"1.1 什么是DevOps  
DevOps是Development和Operations两个词的缩写，引用百度百科的定义：  
DevOps是一种方法或理念，它涵盖开发、测试、运维的整个过程。DevOps是提高软件开发、测试、运维、运营 等各部门的沟通与协作质量的方法和过程，DevOps强调软件开发人员与软件测试、软件运维、质量保障（QA）部 门之间有效的沟通与协作，强调通过自动化的方法去管理软件变更、软件集成，使软件从构建到测试、发布更加快 捷、可靠，最终按时交付软件。 
1.2 DevOps工具链  
  
DevOps兴起于2009年，近年来由于云计算、互联网的发展，促进了DevOps的基础设施及工具链的发展，涌现了 一大批优秀的工具，这些工具包括开发、测试、运维的各各领域，例如：GitHub、Git/SVN、Docker、Jenkins、 Hudson、Ant/Maven/Gradle、Selenium、QUnit、JMeter等。下图是DevOps相关的工具集： 
  
2 Git/GitLab  
2.1 Git与GitLab介绍  
引用百度百科中对Git和GitLab的描述： 
Git是一个版本控制系统，GitLab是一个远程的Git仓库，GitLab与GitHub及国内的码云类似，用户在GitLab上注 册账号，上传项目到GitLab，通过GitLab对项目进行版本控制。通常企业使用GitLab在局域网搭建自己的Git代码 管理仓库，不过随着云计算的发展，很多企业也开始使用提供Git仓库管理公共服务的平台，比如：码云、GitHub 等。 
  
2.2 安装 Git及GitLab  
  
个人电脑上安装Git，过程略。 注意：Git安装完成需配置user.name和user.email 
 查询user.name和uesr.email  git config user.name  git config user.email  设置：  git config ‐‐global user.name ""itcast""  git config ‐‐global user.email ""itcast@itcast.cn""  
在Linux服务器上安装GitLab，安装方法见“GitLab安装文档” 。 注意：个人测试Git版本控制推荐建议直接使用GitHub或码云，两者提供免费创建项目的功能。 
备注： 
1、现在的项目都是微服务，那么多的资源需要部署安装，那么如何能够进行批量的部署呢。那么这个技术就涉及到了虚拟化技术。虚拟化技术就是将一台计算机虚拟为多台逻辑计算机，虚拟化技术包括两方面：硬件虚拟化和软件虚拟化。 
2、虚拟化现在可以使用的两种方式：VMware与容器化技术。容器化其实取代了现在的VMware,不再使用操作系统，直接使用containner,占有系统资源更少，启动速度也快。 
3、持续集成：每天要多次将代码合并到主干，并进行集成、测试，这样就可以提早发现问题并解决问题。 
4、雪崩效应：容错保护是指微服务在执行过程中出现错误并从错误中恢复的能力。微服务容错性不好很容易导致雪崩效应，什么 是雪崩效应？摘自百度百科中的定义：微服务的雪崩效应表现在服务与服务之间调用，当其中一个服务无法提供服务可能导致其它服务也死掉，比如：单 点登录服务调用用户信息服务查询用户信息，由于用户信息服务无法提供服务导致单点登录服务一直等待，从而导 致用户登录、用户退出功能无法使用，像这样由一个服务所引起的一连串的多个服务无法提供服务即是微服务的雪 崩效应。 
  
  
 
                
        
        
"DevOps 解决方案 
 1.1 容器化 CI/CD1.2 容器化流水线1.3 深度集成 Jenkins1.4 灰度发布1.5 制品库设计1.6 DevOps 安全1.6.1 CI/CD 安全设计1.6.2 DevSecOps 设计 
    
   
  
 
 
容器 PaaS 平台提供 DevOps 完整周期的支持，在开发、测试、运维各个环节提供支撑能力。平台自研的 DevOps 流程满足企业对接代码仓库、定时触发构建作业、部署测试环境、执行自动化测试用例、输出测试结果、滚动升级和回滚在线应用、配合负载均衡能力，进行蓝绿发布和灰度发布的功能。  
1.1 容器化 CI/CD 
容器平台提供自研容器化 CI/CD 方案“构建项目”支持持续集成场景。持续集成与持续交付的第一步是提交代码和 Dockerfile 给 Gitlab、SVN 等代码仓库；第二步是利用 Webhook 勾取代码到容器 PaaS 平台构建镜像，并提交给私有镜像中心；第三步再将镜像部署运行于容器之上。  代码对接 
持续集成的代码对接功能主要有： 
支持 SVN 、GIT 、BitBucket、OSChina 的对接支持 Gitlab 的 Webhook 的自动触发支持普通SVN、Git、BitBucket 自动触发 
支持编译环境配置 
构建的编译和镜像打包过程分离。自带 Java，Node，Go, Python 的标准编译环境，用户也可以自定义编译 环境。支持通过YAML 来指定编译环境和编译命令。 
支持编译命令自定义配置 
允许用户通过自己编写 YAML 文件和代码仓库存放在一起，在 YAML 里 面自定义各种编译环境和命令。 
支持统一配置管理 
支持流水线功能，实现一份镜像多环境（Dev、Qas、Prd）部署。 
支持自定义脚本配置与执行 
在流水线的其中一个任务类型是“执行命令”，通过指定镜像和执行的命令， 触发流水线会自动执行命令。 
多语言支持 
平台不限制开发语言的选择，流行的语言，比如 Java, Python, Perl, PHP,NodeJS, C/C++，.NET 都可以在平台上开发和运行。同时，客户可以根据需要选择在 Linux 环境或者 Windows 环境中运行应用，满足各种业务场景的需要。 
单元测试支持 
平台支持集成各种单元测试框架，如 JUnit, EasyMock, Mokito, TestNG 框架，支持在开发过程中，模拟消费端或者服务端，可以对服务端行为进行录制，回放检查，模拟各种返回值和异常，方便开发人员进行持续测试。 
1.2 容器化流水线 
通过提供的 API 和 CLI 工具、内置的 CI/CD 流水线，或 Jenkins 等提供的多种持续集成工具，结合镜像仓库，容器 PaaS 平台可以支持从代码到镜像到运行的完整流水线。此外，容器 PaaS 平台也可根据需求定制提供更复杂的结合开发测试流程的持续集成平台。 
容器 PaaS 平台能够创建自定义的流水线任务，实现持续自动化的部署、测试和更新服务、同步镜像，并可查看任务执行的数据和结果、接收任务通知。流水线支持对接代码仓库，可关联 GitLab 私有部署版、Gogs 、SVN、Github 、关联 Github 企业版 、激活关联代码仓库仅需要的项目 ；流水线可对接Jenkins、对接云化 CD 工具 Spinnaker、静态代码扫描工具 Sonarqube、可使用 Hitchhiker 进行接口测试、压力测试等 。  
平台支持开放式流水线插件，满足企业内 DevOps 流程管理的需求，支持流水线定时触发、手工控制、产出物管理等多个特色功能，其基础插件如下图所示：  
1.3 深度集成 Jenkins 
容器 PaaS 平台还将 Jenkins 工具深度集成进 DevOps 流程中，用户可以通过多种方式灵活的使用 Jenkins 引擎，完成构建和流水线功能。集成 Jenkins后的流水线功能如下： 创建使用 Jenkins 的构建项目，有以下方式： 
直接编写 Jenkins file 进行构建，根据用户输入确定触发时机平台为一些典型场景预先定义了 pipeline 模板，用户选择模板快速构建使用 pipeline 可视化编排组件创建： 
平台预先定义好可以共享的各种 stage 片段（也称作 Jenkins module）使用类似流水线的图形界面，拼接配置出一份 pipeline提交 pipeline 给 Jenkins编写 DSL 插件调用平台 API，包括服务创建、设置负载均衡、自动通知等，这样 Jenkins 可通过 DSL 插件在 pipeline 中调用各项平台功能。 
1.4 灰度发布 
平台支持基于策略的多种服务发布机制，包括灰度发布、蓝绿部署。发布策略的设定由规则和权重分配组成。具体功能描述如下： 
支持丰富的规则设定服务的流量分配。可根据下面各种属性实现引流： ➢ 域名 ➢ URI: 支持正则表达式等 ➢ IP 地址 ➢ Http Header ➢ URI 参数 ➢ 会话保持等支持多项服务同时进行灰度发布蓝绿部署：实际是灰度发布权重规则的一种特殊形式，通过调整两个服务的请求量比例来控制线上是蓝版本还是绿版本。将设置权重设为 100或者 0 来达到蓝绿切换。发布回滚：发布新版本的时候保持旧版本在线，通过调节服务的权重迅速回滚到上一个版本。平台会记录下来上一个版本的信息，然后快速的把当前服务的版本恢复到上一个版本。滚动升级：容器 PaaS 平台系统支持对容器服务的滚动升级。用户通过图形界面点击按钮即可进行升级操作，容器升级后默认处于升级中状态，用户可以选择完成升级或回滚操作。滚动升级可进行复杂策略配置，包括容器启停顺序、批量大小、批量间隔等，确保升级过程中业务不中断。  
1.5 制品库设计 
基于JFROG Artifactory构建组织级的制品仓库，对制品进行成熟度管理，只有制品满足各项度量指标后，制品才能部署到下一阶段，最终部署生产环境。同时在制品元数据中记录制品的质量数据，确保了部署到生产环境的制品是经过严格测试的、满足质量要求的。 
1.6 DevOps 安全 
DevOps 作为软件生命周期管理领域的方法论，已经被越来越多的IT 企业所接受，它所带来的价值也是毋庸置疑，下面将就如何实现DevOps 的安全进行具体的分析。 
1.6.1 CI/CD 安全设计 
DevOps 集合了开发和运维团队，并通过自动化流程（CI/CD）来促进团队之间的协作效率并加速产品的版本迭代。以下是对CI/CD 的一些安全性建议： 
将代码在隔离并受控的Docker 容器中执行，这样会安全得多，并不会导致整个持续集成服务器受到威胁；对持续集成过程中的代码和程序进行备份，以防止环境出错导致不必要的调试操作；CI/CD 流程如果涉及到有登录验证过程，那密码就有可能会有被暴力破解的风险，所以可以加上登录次数限制、手机短信验证或者第三方认证集成来验证用户的身份；在持续集成和持续部署中，对关键的测试场景和部署场景进行手动授权 
1.6.2 DevSecOps 设计 
提及DevOps 安全， 就不得不提到DevSecOps，DevOps 是Development 和Operations 的缩写， 而DevSecOps 则是Development、Security 和Operations 的缩写，也就是说要在整个开发、运营的流程中，融入安全的理念。其核心是：安全是整个IT 团队（包括开发、运维及安全团队）所有成员的责任，需要贯穿整个业务生命周期（从开发到运营）的每一个环节。 DevOps 安全的关键是风险的控制和管理，因此在进行安全风险管理（Security and Risk Management，SRM）时，应当注意： 
将安全性和合规性测试无缝集成到DevSecOps 中，以便开发人员永远不必离开其CI/CD 环境；扫描所有开源或第三方组件中的已知漏洞和错误配置。理想情况下，构建一套完整的资产清单，来实现所有软件组件分析；不要尝试删除自定义代码中的所有未知漏洞，这会增加误报。相反，将开发人员专注于那些具有最严谨和自信的人；鼓励使用新类型的工具和方法，以最大限度地减少开发人员的摩擦，例如使用交互式应用程序安全测试（IAST），以取代传统的静态和动态测试；使用安全冠军模型（Security Champion Model），将信息安全团队尽可能的融入到DevOps 流程中。使用统一的规范来处理所有自动化脚本、模板、图像和设计，并保证安全工作覆盖了所有的源代码。
                
                
                
        
        文章知识点与官方知识档案匹配，可进一步学习相关知识云原生入门技能树云原生环境小结云原生的分层12781 人正在系统学习中"
"安装运行Jenkins 
docker pull jenkins/jenkins:lts

# 不使用-u root 容器内可能会报错(读写权限问题), 容器起不来
docker run -u root -d --name jenkins -p 8090:8080 --restart=always -v /root/jenkins:/var/jenkins_home jenkins/jenkins:lts
1234 
启动成功之后，打开浏览器，访问服务器的8090端口  
安装一些插件 
安装Gitee插件  进行Gitee配置   安装nodejs插件 这里省略，和安装Gitee插件一样。 nodejs配置安装  安装publicoverssh插件 配置ssh 云服务器： 
# 生成钥匙
ssh-keygen -t rsa -C ""xxxx@qq.com""
cat .ssh/id_rsa.pub >> authorized_keys	# 将公钥放进去
cat .ssh/id_rsa	# 复制私钥的内容
1234 
Jenkins： 将私钥的内容复制过去   
创建一个项目 
 
General 
 
源码管理 
   
触发器配置 
 
配置GiteeWebHook 
 
构建环境 
 
构建命令 
   
docker run --name invoicing_ui --restart=always -p 80:80 -d \
-v /root/nginx/html:/usr/share/nginx/html \
-v /root/nginx/conf/nginx.conf:/etc/nginx/nginx.conf \
-v /root/nginx/logs:/var/log/nginx \
nginx
12345
                
                
                
        
        文章知识点与官方知识档案匹配，可进一步学习相关知识云原生入门技能树持续集成和部署(Jenkins)使用helm安装Jenkins12781 人正在系统学习中"
"DevOps的新出路：平台工程 
DevOps是一种文化，是敏捷的一部分，主要是解决引入敏捷活动的持续开发、快速反馈后带来的新的运维问题。 
然也： 
DevOps的初衷是让开发能够掌握运维知识，对自己的产品全生命周期负责（you build it, you run it), 开发者是对它的产品最了解的，如果全流程都是由开发来执行的话，无疑是会提升产品的质量，提升敏捷性（毕竟没有多层的信息损耗）。 
非也： 
但是事实情况却并非如此，开发本身的工作都已经消耗了其大部分精力，让他还要去掌握运维的工作，无疑是给他增加了更多的认知负担，根本不现实！事实上不管是不是开发，大多数人在面临认知负担的时候，往往都会选择逃避。 并且随着技术的不断推成出新，技术复杂度和持续学习成本是不断增加的，这更加导致了让开发去做运维的事情在长期看来更加无法达到预期的。 
柳暗花明： 
在 Gartner发布2023年10大战略技术趋势中我们赫然看到了平台工程PLatform Engineering”的存在！  从字面上的意思去理解的话，平台工程是一个能实现让开发者管理产品生命周期的自助式开发者平台。 
而深入思考的话，平台工程其实是把运维的大部分工作做了抽象封装，变成一个个功能集成在了平台中。这就从另一个角度给了devops目前面临问题的一个解法：把运维能力封装出去给到开发使用，开发无需知道具体的运维知识，只要会使用对应功能即可。其实目前最火、认知最广、最佳成功实践就是CICD，而CICD就是把以前运维的打包发布工作，通过jenkins这类工具，封装成一个个工程，再在上层封上一个发布平台提供打包发布的能力给到开发，从而使得开发并不需要知道系统是如何打包的发布的，只要知道如何使用发布平台即可，这个认知成本是大大降低的，同时也实现了开发管理产品全生命周期中的发布这一环。 
为什么是CICD？ 
打包发布技术成熟度是随着语言发展速度同步成长的，使用某种语言开发不管在哪家公司，打包流程其实是大同小异的，特异性小，从而让它有可能成为一个产品，而且目前不管是jenkins还是其他产品，都还提供了开放社区和插件功能来进一步消除仅剩的这些特异性，这导致了不管你在哪家公司只要是想做CICD，市面上必然有开源软件能够帮到你，大多数情况你并不需要自己去做特异性开发，那CICD技术的快速普及和发展也是意料之中的。 
那生命周期中其他阶段呢？ 
目前常见的devops工具链已经解决了很多关键的部分，但为什么预测说80%的软件工程组建还需要自己建立平台团队呢？因为目前这些工具链在搭建完后，在宏观上还是一个个孤岛，只能说devops工具链的搭建是从0-1的变化，只是第一阶段，这个时候只是把线下搬到了线上，但是信息是相对割裂的，无法通过这些“隐藏”的数据去产生其该有的价值，而数据的透明化、易获取、可分析是敏捷发展到一定程度所必须的。再者，如果在规划推广上处理不当，出现太多的特殊情况，形成“破窗效应”，devops反而会成为”效率杀手“！这就再次强调了，devops是文化不只是技术。 
为什么20%的组织不需要建立平台团队呢？ 
一方面小规模研发团队是不需要高成熟度的平台工程的，20人以下的研发团队，线下面对面沟通是更加高效的。另一方面现在市面上提供了很多一体化的研发平台，比如说阿里的云效、华为的devcloud等，完全可以满足小开发团队的需求。但是为什么80%不能用这现成的平台呢？还是因为具体到每个公司的差异性太大，平台终究只是一个工具，如果无法结合企业情况形成最佳实践的话，效果也是会大打折扣的。同时目前这些平台自己的生态还不完善，对外开放程度也比较差，无法让开发者们能够基于它的生态自行去扩展以消除差异，就算像backstage这种已经相对灵活的平台，目前也并没有在国内有快速发展起来。 
顺势而为： 
未来很长一段时间平台工程必然会逐渐被更多企业重视起来，自建平台的需求也会越来越多，在这过程中识别哪些能力是可以被封装的是一个突破口。之后必然会孕育出更多专业的工具链服务，一体化研发平台也会迎来新的定义，这个赛道也能开拓出更多新的蓝海！ 有任何问题或者想讨论的，欢迎大家留言，一期共识共创！
                
                
                
        
        
"文章目录 
 云原生与DevOps1. 云原生的基本概念2. 微服务3. 容器4. CI/CD及DevOps 
   
  
 
 
云原生与DevOps 
1. 云原生的基本概念 
1. 云原生的定义： “云原生技术有利于各组织在公有云。私有云和混合云等新型动态环境中，构建和运行可弹性扩展的应用。云原生的代表技术包括容器、服务网格、微服务、不可变基础设施和声明式API。” 
云原生的定义一直在变 – 不同组织有不同的定义:Pivotal & CNCF – 同一个组织在不同时间点有不同的定义 – 同一个人在不同时间点也有不同的定义云原生的定义未来还会变CNCF最新的定义:版本V1.0 
2. 云计算的服务模型  
3. 云原生应用的关注点 
微服务容器技术CI/CDDevOps  
2. 微服务 
1. 微服务架构的演进 
 
2. 微服务的好处 
独立的可拓展性 
每个微服务都可以独立进行横向或纵向扩展，根据业务实际增长情况来进行快速扩展; 
独立的可升级性 
每个微服务都可以独立进行服务升级、更新，不用依赖于其它服务，结合持续集成工具可以进行持续发布，开发人员就可以独立快速完成服务升级发布流程; 
语言无关性 
研发人员可以选用自己最为熟悉的语言和框架来完成他们的微服务项目 
故障和资源的隔离性 
在系统中出现不好的资源操作行为时，将仅仅只会影响单个微服务 
3. 微服务带来的挑战 
分布式系统的复杂性 
API数目成倍增加调试分布式系统很复杂跨服务的重构会很困难很难在测试中重建和生产环境一致的环境 
微服务的运维开销更大 
多个服务需要多种编程语言运行环境多个服务需要集群来处理故障转移，负载均衡需要高质量的服务监控和运维基础设施对健壮和自动化的部署要求更高 
对团队的要更高 
组织结构需要转型到自治的，跨功能的团队团队的技术能力，技术栈需要扩展要求团队更高的DevOps水平 
3. 容器 
1. 什么是容器 
与系统其他部分隔离开的一系列进程容器提供了一种逻辑打包机制，以这种机制打包的应用可以脱离其实际运行的环境  
2. Docker基本概念 
容器镜像Docker File仓库  
3. Docaker工作流 从Docker File ---- Build到 ---- images ---- push到----容器仓库（ship） 
images运行起来就是一个Run 
 
4. CI/CD及DevOps 
概念： CI: Continuous Integration 持续集成 CD: Continuous Deployment 持续部署 DevOps: 从字面上直观理解∶开发运维一体化 
 
1. CI 持续集成流程 持续集成指的是∶ 1．开发人员频繁地向代码库提交代码 2．提交的代码需要经过构建、测试验证并及时得到结果反馈。  
2. CD 持续部署/持续交付 
CD Continuous Deployment持续部署的主要目标: 
持续部署是持续集成的延伸，将集成后的代码部署到生产环境频繁部署确保可以小批次发布，在发生问题时可以轻松排除故障。 
 
3. DevOps的定义 
 维基百科:是一组过程、方法与系统的统称，用于促进开发(应用程序/软件工程)、技术运营和质量保障（QA)部门之间的沟通、协作与整合。  DevOps经常被描述为“开发团队与运营团队之间更具协作性、更高效的关系”。   
4. 阿里云DevOps策略 ： 打造一站式DevOps效能平台交付流水线 

                
                
                
        
        文章知识点与官方知识档案匹配，可进一步学习相关知识云原生入门技能树云原生环境小结云原生的分层12781 人正在系统学习中"
"文章目录 
 一、前言二、敏捷宣言三、精益软件开发四、进入DevOps ：高速公路的三条车道4.1 车道1：获取速度4.2 车道2：换挡加速4.3 车道3：飞速前进 
   五、概要：DevOps清单六、总结七、拓展阅读 
  
 
 
 
一、前言 
为了能够更好的理解什么是DevOps，我们很有必要对当时还只有程序员（此前还没有派生出开发者、前台工程师、后台工程师之类）这个称号存在的历史进行一下回顾。 
如编程之道中所言：老一辈程序员是神秘且深奥的。我们没法揣摩他们的想法，我们所能做的只是描述一下他们的表象。 
 
 清醒的像一只游过水面的狐狸 警惕的像一位战场上的将军 友善的像一位招待客人的女主人 单纯的像一块未经雕琢的木头 深邃的像一潭幽深洞穴中漆黑的池水 
 
程序员开发了机器语言，机器语言又产生了汇编语言，汇编语言产生了编译器，如今的语言已经多不胜数。每一种语言都有其各自的谦卑用途。每一种语言都表达出软件的阴和阳。每一种语言都在此道之中有其一席之地。 
遥想当年，软件程序员的大部分办公室那时还被称作实验室，程序员那时还叫做科学家。为了开发出一套优秀的软件，程序员们必须深入了解他们需要的应用相关的所有问题。他们必须清楚知道这个软件应用在什么场合，这个软件是必须在什么系统上运行。本质上说，程序员对所要开发的软件的所有环节都有透彻的了解，从规格说明书编写、到软件开发、测试、部署、再到技术支持。 
过了不久，人类（客户）贪婪的特性就开始表现出来，他们开始不断的进行更多的索求。更快的速度，更多的功能，更多的用户，更多的所有所有。 
作为一类谦虚、谦卑且平静的生物，我们的老一辈程序员们将很难在这种爆发性的过度需求索取中幸存。最好的取胜办法就是往不同的方向进化成不同的新物种。很快，程序员这个称号就开始绝迹于江湖，而那些叫做开发者、软件工程师、网络管理员、数据库开发者、网页开发者、系统架构师、测试工程师等等更多的新物种就开始诞生。快速进化和快速适应外界的挑战成为了他们的DNA的一部分。这些新的种族可以在几个星期内就完成进化。网页开发者很快就能进化成后台开发者、前台开发者、PHP开发者、Ruby开发者、Angular开发者……多得让人侧目。 
很快他们就都忘却了他们都是起源于程序员这个共同的祖先的事实，忘却了曾经有过这么一个单纯且平静的，想要让这个世界变得更好的科学家。然后他们开始不断的剑拔弩张，都声称自己才是“程序员”的纯血统继承人。 
随着时间的转移，各门各派开始独占山头，很少进行交流互动，只有在迫不得已的时刻才会进行沟通。他们开始不再为同源的遥远同宗兄弟们的成功而欢呼雀跃，甚至再也不会遥寄张明信片进行嘘寒问暖。但是在深夜仰望星空的时候，他们发现他们心底深处的程序员基因还是会不停的闪烁着，期盼着这闪烁的火花能照亮整个银河系并带来和平。  在这场自私且以自我为中心的欲征服世界的赛跑旅程里，程序员的子孙们早把他们真正的工作目标（为客户解决问题）置之脑后。面对一拖再拖的项目交付日期，昂贵的开发代价，甚至最终失败的项目，客户们开始对这种情况深恶痛绝。 
偶尔，也会有一个闪亮的明星站出来，灵机一动的提供一种办法来尝试结束这种混乱并带来和平。所以瀑布开发流程就应运而生了。这是一个非常了不起的创意，因为它利用了不同团队的开发者只在必须的时候才进行沟通的这个事实。当一个团队完成了他们的工作的时候，它就会和下游的团队进行交流并把任务往下传，如此一级接一级的传递下去，永不回首。  这种方式在一段时间内发挥了效用，但很快，一如既往，贪婪的人们（客户）又开始提出更多的诉求。他们希望能够更多地参加到整个软件开发流程中来，不时提出他们的建议，甚至在很晚的时候还提出改需求这种丧心病狂的事情来。 
结果就是如大家有目共睹的事实一样，软件项目非常容易失败这个说法已经作为一个行业标准被人们所接受。数据表明超过50%的项目最终都是以失败告终的。更可悲的是，在当时看来，人们对这种情况是束手无策。 
二、敏捷宣言 
值得庆幸的是，每一个时代总会有那么几个思想开放的英雄如漆黑中的萤火虫般冒出来。他们知道这些不同团队的开发者们必须要找到一个可以协同工作、进行交流，并且能够弹性的向客户保证对方将会拿到最优解决方案的方式。这种尝试最早可以追溯到1957年，伟大的约翰·冯·诺依曼和同行们的努力。但是我们最终却是等到2001年才收获革命的果实，当时行业的十多个精英创造出了如今闻名世界的“敏捷宣言”。 
敏捷宣言基于以下十二条原则： 
 
 我们的首要任务是通过尽早地、持续地交付可评价的软件来使客户满意。乐于接受需求变更，即使是在开发后期也应如此。敏捷过程能够驾驭变化，从而为客户赢得竞争优势。频繁交付可使用的软件，交付间隔越短越好，可以从几个星期到几个月。在整个项目开发期间，业务人员和开发人员必须朝夕工作在一起。围绕那些有推动力的人们来构建项目。给予他们所需的环境和支持，并且信任他们能够把工作完成好。与开发团队以及在开发团队内部最快速、有效的传递信息的方法就是，面对面的交谈。可使用的软件是进度的主要衡量指标。敏捷过程提倡可持续发展。出资人、开发人员以及使用者应该总是共同维持稳定的开发速度。为了增强敏捷能力，应持续关注技术上的杰出成果和良好的设计。简洁——最大化不必要工作量的艺术——是至关重要的。最好的架构、需求和设计都源自自我组织的团队。团队应该定期反思如何能变得更有战斗力，然后相应地转变并调整其行为。 
 
敏捷宣言是为银河系带来和平以及维护各自的平衡所迈出的很重要一步。在很长的时间里，相比此前基于流程和机械化的方式，这是第一次基于文化和“人性”来将不同的关键项目干系人连接在一起的方式。人们开始互相交流，进行基本的碰头会议，并开始不断的交流意见和看法。他们开始意识到他们是有着很多比想象中还多的共同点，客户也开始成为他们之中的一员，而不再是像以往一样只是往项目砸钱然后开始求神拜佛祈求一切顺利如愿。  
尽管前面还是有不少的障碍需要克服，但是未来已经光明了许多。敏捷意味着开放和拥抱（需求）改变。但是，如果改变过多的话，人们就很难专注到最终的目标和交付上来。此时精益软件开发就开始破土而出了。 
三、精益软件开发 
因为对精益软件开发的着迷以及为了达成放逐和驱赶风险的目的，一些程序员的子孙们就开始探首窗外，开始向软件之外的行业进行取经。他们从一家主要的汽车生产商身上找到了救赎，丰田生产系统在精益上面的成就是不可思议的，同时它们精益生产的经验也是很容易应用到软件开发上来的。 
精益有以下7个原则： 
 
 杜绝浪费内建质量创建知识（放大学习）延迟决策（尽量延迟决定）快速交付尊重人员（团队授权）全局优化 
 
将这些放到敏捷上去，精益原则就能让人们在从精神上关注做正确的事情，同时还能够让整个开发流程拥有足够的弹性。一旦敏捷和精益软件开发被软件开发团队采纳，那么下一步就是把这一套原则应用到IT团队上来。把IT也纳入到整体战略上，然后我们就来到了DevOps跟前了！ 
四、进入DevOps ：高速公路的三条车道 
老一派的软件开发团队成员会包含业务分析员、系统架构师、前端开发者、后端开发者、测试员等等。优化如敏捷和精益原则等的软件开发流程的关注点就在这些地方。比如，软件一旦达到”可以生产“的程度，就会发到系统工程师、发布工程师、DBA、网络工程师，安全专家这些“运维人员”的手上。这里该如何将横在Dev（开发）和Ops（运维）之间的鸿沟给填平，这就是DevOps的主要关注点了。 
 
 DevOps是在整个IT价值流中实施精益原则的结果。IT价值流将开发延伸至生产，将由程序员这个遥远的祖宗所繁衍的所有子孙给联合在一起。 
 
这是来自Gene Kim对DevOps的最好解析，如果你还没有看过他的《凤凰项目》这本书的话，我建议你真的该好好花时间看看。 
你不应该重新招聘DevOps工程师，且DevOps也不应该是一个IT的新部门。DevOps是一种文化，一种理念，且是和IT糅合成一体的。世间没有任何工具可以把你的IT变成一个DevOps组织，也没有任何自动化方式可以指引你该如何为你的客户提供最大化的效益。 
DevOps通常作为下面这三个方式而为人所熟知，而在我眼里我是把它们看成是一条高速公路上的三条车道。你从第一条车道开始，然后加速进入到第二条车道，最终在第三车道上高速行驶。 
 
 车道1 - 系统级别的整体效率考量是最主要的关注点，这超过对系统中任何一个单独个体元素的考虑； 
 车道2 - 确保能提供持续不断的反馈循环，且这些反馈不被忽视。 
 车道3 - 持续的学习和吸取经验，不停的进步，快速的失败。 
 
4.1 车道1：获取速度 
要采纳DevOps的原则，理解整个运作系统的重要性并对工作事项进行合适的优先级排序是组织首先要学的事情。在整个价值流中不能允许任何人产生瓶颈并降低整个工作流程。  确保工作流程的不可中断是身处流程中的所有成员的终极目标。无论一个成员或者团队的角色是什么，他们都必须力图对整个系统进行深入的理解。这种思维方式对质量会有直接影响，因为缺陷永远不会被下放到“下游“中，这样做的话将会导致瓶颈的产生。 
确保整个工作流程不会被瓶颈堵塞住还不够。一个高产的组织应该时常考虑该如何提升整个工作流程。有很多方法论可以做到这一点，你不妨去看下“约束理论”、“六西格玛”、精益或者丰田生产系统。 
DevOps原则并不关心你身处哪个团队，你是否是系统架构师、DBA、QA或者是网络管理员。相同的规则覆盖所有的成员，每个成员都应该遵循两个简单的原则： 
 
 保持系统运作流程不可中断；随时提升和优化工作流程； 
 
4.2 车道2：换挡加速 
不可中断的系统流程是定向的，且预期是从开发流向运维。在一个理想的世界中，这就意味着快速的开发出高质量的软件，部署，并为客户提供价值。 
但是，DevOps并非乌托邦式的理想国。如果单向的交付方式是可行的话，我们的瀑布模式早就能胜任了。评估可交付产品和整个流程中的交流对确保质量是至关重要的。这里首个必须实现的""面向上游""的交流通道是从Ops到Dev。  我们独自意淫是件非常容易的事情，但是获取别人的反馈和提供反馈给别人才是探究事实真相的正确方法。下游的每一步（反馈）都必须紧跟着有一个上游的确定。 
你如何建立反馈循环机制并不重要。你可以邀请开发人员加入技术支持团队的会议，或者将网络管理员放到Sprint计划会议中去。一旦你的反馈机制就绪，反馈能够被接收并被处理，你就已经可以说是走到了DevOps高速车道上来了。 
4.3 车道3：飞速前进 
DevOps这条快速车道并不适合意志脆弱的人。为了进入这条车道，你的组织必须要足够的成熟。这里充满了冒险和对失败教训的学习，不断的尝试，并认同屡败屡战和不断的实践是走向成功这条康庄大道的前提条件。在这里你应该会经常听到”套路“这个词，这是有原因的，不断的训练和重复所以能培养出大师，是因为其让复杂的动作常规化。 
但是在你要将这些复杂的动作连接起来之前，你很有必要先去掌握好每一个单独步骤。 
“适合大师的动作并不适合新手，脱胎换骨之前你必须先要明白道的真谛。“  
DevOps的第三个方式/快速车道包括每天分配时间来持续的进行试验，时常的奖励敢于冒险的团队，并将缺陷特意引入到运作系统上来以增加系统的抗击打能力。 
为了确保你的组织能够消化好这些方法，你必须在每个团队之间建立好频繁的反馈循环，同时需要确保所有的瓶颈都能够及时的被清理掉，并确保整个系统的运作流程是不可中断的。 
实施好这些措施可以让你的组织时刻保持警惕，并能够快速且高效的应对挑战。 
五、概要：DevOps清单 
下面是一张你可以用来检验你的组织对DevOps应用情况的清单，当然你也可以在文章评论后面给出你的观点。 
 
  开发团队和运维团队之间没有障碍，两者皆是DevOps统一流程的一部分。  从一个团队流到另一个团队的工作都能够得到高质量的验证。  工作没有堆积，所有的瓶颈都已经被处理好。  开发团队没有占用运维团队的时间，因为部署和维护都是处于同一个时间盒里面的。  开发团队不会在周五下午5点后把代码交付进行部署，剩下运维团队周末加班加点来给他们擦屁股。  开发环境标准化，运维人员可以很容易將之扩展并进行部署。  开发团队可以找到合适的方式交付新版本，且运维团队可以轻易的进行部署。  每个团队之间的通信线路都很明确。  所有的团队成员都有时间去为改善系统进行试验和实践。  常规性的引入（或者模拟）缺陷到系统中来并得到处理，每次学习到的经验都应该文档化下来并分享给相关人员，事故处理成为日常工作的一部分，且处理方式是已知的。  
 
六、总结 
使用现代化的DevOps工具，如Chef、Docker、Ansible、Packer、Troposphere、Consul、Jenkins、SonarQube、AWS等，并不代表你就在正确的应用DevOps原则。DevOps是一种思维方式，我们所有人都是该系统流程的一部分，我们一起分享共同的时光和交付价值。每个参加到这个软件交付流程上来的成员都能够加速或减缓整个系统的运作速度。系统出现的一个缺陷，以及错误配置的团队之间的“防火墙”，都可能会使得整个系统瘫痪，所有人都是DevOps的一部分，一旦你的组织明白了这一点，能够帮你管理好这些的工具和技术栈就自然而然的会出现在你眼前了。 
七、拓展阅读 
《DevOps 系列》
                
                
                
        
        
"DevOps 
  
  
   
  
 DevOps是一种重视“软件开发人员(Dev)”和“IT运维技术人员(Ops)”之间沟通合作的文化，它促进开发和运营团队之间的协作，以自动化和可重复的方式更快地将代码部署到生产中。 
 DevOps有助于提高组织提供应用程序和服务的速度。它使组织能够更好地为客户服务，并在市场中更有竞争力。 
 简而言之，DevOps可以定义为开发和IT运营的一致性，以及更好的沟通和协作。 
 Azure DevOps 
  
  
   
  
 Azure DevOps其实是VSTS(Visual Studio Team Service)更名后的名字。而VSTS是TFS(Team Foundation Server)的在线版本。所以Azure DevOps可以理解为是放在Azure云上的TFS，当然我们既可以使用在Azure云平台托管的服务(Azure DevOps Service)，它可以是弹性可伸缩的，具有很大的优势。或者说我们也可以自托管(Azure DevOps Server)。 
 Azure DevOps提供了集成功能，我们可以通过Web浏览器或者IDE客户端进行访问。我们可以根据业务需要使用以下服务： 
 Azure Repos(代码仓库) 提供Git存储库和Team Foundation版本控制(TFVC)两种方式用于代码的源代码控制。Azure Pipelines(流水线) 提供了构建和发布服务，以支持应用程序的持续集成和持续交付Azure Boards(电子看板) 提供了一组敏捷开发工具，使用Kanban和Scrum的两种敏捷方法来支持工作规划和跟踪、代码缺陷以及问题报告的工作Azure Test Plans(测试计划) 提供一些工具来测试应用程序，包括手动/探索性测试和持续测试Azure Artifacts(包管理) 允许团队共享来自公告和私有源的Maven、npm和Nuget包，并将包集成到您的CI/CD管道中 
 当然还有以下工具： 
 可自定义团队仪表板，带有可配置的小部件，用于共享信息、进度和趋势内置的危急共享信息可配置的通知 
 Azure DevOps支持添加扩展并与其他流行的服务集成，比如：Campfire，Slack，Trello，UserVoice等等，并开发您自己的定制扩展。 
 Azure DevOps Services 
 快速设置并使用不需要维护的操作跨域轻松协作弹性范围内可靠的安全性允许您访问云构建和部署服务器，以及应用程序洞察 
 Azure DevOps Services是一个基于云托管的Azure DevOps，5人以下免费使用. 
 Azure DevOps Server 
 您的数据将保存在您的网络中使用本地XML流程模型比继承流程模型可以更好地满足您的工作跟踪自定义要求。本地模型支持XML定义文件的修改。 
 但是你需要以下内容去支持更多功能： 
 构建服务器：支持本地和云托管构建SQL Server和SQL Analysis Server：支持SQL Server报告，并能够基于多维数据集创建Excel数据透视图。 
 云版本 vs 本地版本 
 云版本和本地版本的不同处： 
 收费模式不同 
   云版本按照订阅收费，也就是每月的人员数，每个月6每月本地版本是按机器的许可证收费，免费90天试用 用户管理不同 
   云版本可以支持微软账号、Azure AD和OAuth2协议支持的登录模式本地版本仅支持操作系统的Windows认证登录，管理员需要添加Windows用户然后再到本地版配置账号的访问权限 管理用户和组 
   云版本可以将Azure AD组添加到Azure DevOps Services组。如果使用Microsoft账户而不是Azure AD，则必须一次添加一个用户通过将Active Directory(AD)组添加到各个Azure DevOps组(例如，单个项目的Contributors组)，可以为用户提供对部署的访问权限。AD组成员身份保持同步。随着在AD中添加和删除用户，他们还将获得和失去对Azure DevOps Server的访问权限。  
 相关链接 
 http://dev.azure.com/ 
 https://docs.microsoft.com/en-us/azure/devops/?view=azure-devops 

                
        
        文章知识点与官方知识档案匹配，可进一步学习相关知识Java技能树首页概览118035 人正在系统学习中"
"个人和组织发现了许多帮助它们实施DevOps的实践，但是其中并没有一个特别好的实践去做DevOps，这里提供10个在许多企业使用过的实践，给你参考和思考。 
  
实践10：事故指挥系统 
在IT领域，不好的事情发生在我们服务里，我们把这种事情叫做事故。许多学校的旧的事故管理流程似乎只能适用于大规模的事故。但是在现实生活中，会出现许多小事故，大事故还是比较少。 
我在会议上看到的最喜欢的演讲之一是Brent Chapman的IT事件指挥部。我们可以从消防部分学习到什么？它解释了事件命令如何在现实世界中为紧急服务工作，并解释了相同的过程如何适用于IT，适用于小型和大型事故。我已经在许多商店进行ICS事故响应，效果很好。 
Ps：任何情况下都需要有风险意识，在DevOps中，也可能发生事故，如果进行事故响应和处理是DevOps实践中需要考虑的一个因数。同样，经历过许多事故处理，你的DevOps经历就更加丰富。从整体思考角度来说，在DevOps实践中，有必要引入和使用事故指挥系统。 
  
实践9：开发人员随叫随到 
大都数IT组织都会安排人员值班，特别是运维团队，确保自己服务正常运行，运维人员需要随叫随到。毋庸置疑，解决一个问题有时候并没有那么容易。开发组也需要安排开发人员值班，这样就创建了一个快速的反馈循环。运维团队配合开发，通过日志和相关后续部署活动，快速解决线上问题。而不是挥霍时间，尝试去启动网络和服务器服务来解决问题。 
Ps: DevOps本身也是一个产品，本身就是开发出来的，用来解决实际问题的，一旦出现了问题或者事故，需要开发人员随叫随到，立马解决问题。 
  
实践8：状态页面 
状态页面（status pages），服务宕机，说明出现了问题，这个是生活中的事实。在这些停电或者宕机期间，唯一能够提高客户满意度并保持信任的因素是沟通。就像Lenny Rachitsky的博客中倡导那样，线上透明的正常运行时间，创建公共状态页面，并在出现问题的时候，与服务用户进行及时和清晰的沟通。假设你使用了状态页面，会发生这样的场景：当问题出现，你就运行把运行的每一个服务都有一个状态页面。当然更新这个状态页面，用户可以收到问题通知，了解你在做什么。 
Ps：这个状态页面，有点类似项目管理中的看板的作用。 
  
实践7：blameless postmortems 
几十年的工业安全研究已经证实了这一想法，即事故的根本原因，或者我们可以将人为错误作为失败的可接受原因。John Allspaw, Etsy公司的CTO，写了一篇这样的文章“Blameless Postmortems and A Just Culture”，介绍了如何检查这些失败并从中吸取教训，同时避免逻辑谬误。而不是，依靠替罪羊，让自己感觉良好，同上让情况变得更糟糕。 
PS：出现了问题，就需要有责任人，没有什么好指责他人。问题已经发生，互相指责已经解决不了问题，分析问题，吸取教训，才是合理的做法。 
  
实践6：嵌入式团队 
在软件开发人员和运维人员之间最尖锐的矛盾就是，开发人员需要发布新代码，而运维人员想要服务稳定。在其中，彼此之间存在利益冲突。一种解决问题的办法就是，采取他们两个团队的共同领导的意见。这就是典型的拍桌子做出决定。另外一种解决办法就是，把团队重新组织，在一个开发组中嵌入一个运维工程师，让团队负责自己的所有工作。而不是，开发团队将升级请求丢到运维团队。采用开发团队中嵌入运维工程师，自己的工作自己团队处理，使大家有了共同的目标，即更新稳定的服务到生产环境。 
  
实践5：云端 
如果想要在云端实现DevOps，那么就要实现高度自动化以及基础设施能写成代码。使用云技术的最有说服力的理由，不是成本优化，而是云解决方案为您提供完全以API驱动的方式来创建和控制基础架构。这使你可以处理程序组件一样去对待基础设施结构。只要你能够设计新的部署策略或灾难恢复计划等，您就可以在不等任何人的情况下试用它。 
PS：其实DevOps，就是说在云端进行的解决方案。举例一个简单例子，假如你在阿里云网页注册账号，然后选择了购买什么类型主机，你提交订单。阿里云后台就启动了关于这个订单的自动化部署活动，一旦部署好了，你就可以收到相关邮件。例如告诉你主机IP地址和root密码等。这个就是一个简单的处理用户订单的DevOps实例。 
  
实践4：Andon Cords 
经常在DevOps环境中进行快速版本发布。理想情况下，你写了可以捕获和验证大多数的功能的自动化脚本，但是测试还是不够完美。这个时候，就可以采用Andon Cords系统。这个是起源日本丰田公司，实现“立即暂停制度”，以即时解决质量问题（而不是下线返修），达到持续高品质地生产汽车的一种工业上的流程。 
这个模式成了今天质量控制系统的基本组成部分，您可以在软件交付管道（Pipeline）中拥有相同的功能，这样您就可以暂停升级或部署以阻止错误传播到下游。 
PS：这里提到了Pipeline，简单解释以下，在Jenkins中，最强大的功能就是Pipeline，不同的job都可以用Pipeline的形式串接起来。Pipeline是Groovy语言开发的。所有任何Job都可以通过Groovy语言来编写代码，去控制Job的行为。Pipeline的代码部分是DevOps中重点要实践和学习的部分。 
  
实践3：依赖注入 
在现代应用程序连接到它的外部服务（如数据库或重置服务等）时，它们是大多数运行时问题的根源。有一种称为依赖注入的软件设计模式，有时也称为控制反转，这主要关注松散耦合的依赖关系。在这种模式中，应用程序不应该知道它的外部依赖性。 相反，它们在运行时传递给应用程序。 这对于作为代码环境的基础结构中的良好应用程序非常重要。还一种服务发现设计模式也可以到达类似效果。 
  
实践2：蓝/绿部署 
软件部署。 它的工作方式只有一种，对吧。 我的意思是传统上，你取下服务器上的软件，升级它，重新启动，然后你甚至可以回滚方式执行此操作，因此，您可以保持系统的正常运行时间。但是，一种替代部署模式称为蓝/绿部署。 而不是在暂存环境中测试版本然后将其部署到生产环境并希望它工作，而是有两个相同的系统，蓝色和绿色。 
PS：这个很好理解，第一种是直接在线上环境升级，第二种是在准生产环境升级，然后进行测试，没有问题就切换到线上环境，原来的线上环境撤下来，继续升级，最终切换到线上生产环境。DevOps也需要至少两套环境，测试环境和线上环境。 
  
实践1：Chaos Monkey 
Chaos Monkey是Netflix团队推出的一个工具，相关介绍: http://www.infoq.com/cn/news/2012/08/chaos-monkey. 
旧式系统开发理论强调使系统的每个组件尽可能高度可用。这样做是为了实现最高的正常运行时间, 但这不起作用。从数学上来说，如果有5个组建，每一个组建的可用度是99%，那么这个软件的可用度是95%。 
相反，您需要专注于使整个系统高度可靠，即使面对不可靠的组件。Netflix是新型技术管理领域的领先公司之一，为了确保他们正确地提供服务可靠性，他们发明了一款名为Chaos Monkey的软件。Chaos Monkey观看在亚马逊云中运行的Netflix系统，随机杀掉架构中运行实例和服务。这迫使开发人员和运维创建系统，以便为其服务设计弹性。而不是错误地认为他们的基础设施始终在运行良好状态。 
作为一个DevOps小白的我们，先大概了解下这些实践内容就好，以后工作中遇到了，会自然而然加深印象和有更好的理解。
                
        
        
"一、DevOps的意图 
       究竟什么是DevOps? 要想回答这个问题，首先要明确DevOps这个过程参与的人员是谁？即开发团队和IT运维团队！那么，DevOps的意图是什么呢？即在两个团队之间，建立良好的沟通和协作，更快更可靠的创建高质量软件！ 
       事实上，并不是这两个团队之间的协作帮助交付了更好的软件，而是“开发”和“运维”团队之间的统一导致了软件的改进，并以更快的速度交付。我们不要忘记DevOps工具在实现自动化方面所扮演的角色。 
       开发和运维“一体”的感觉是由开发人员和操作工程师之间的技能组合和实践的桥接以及自动化（DevOps）工具的实现引起的。 世界各地的大型互联网公司已采用DevOps方法来彻底改进其性能，安全性和团队动态。 
       在本篇文章中，让我们看看什么是DevOps，为什么它如此重要！ 我们将首先跟踪导致DevOps的软件开发方法的演变，然后探索什么是DevOps及其生命周期，并通过评估世界顶级公司，来看看如何使用DevOps来获得益处。 
二、软件开发的演变 
       多年来，DevOps从现有的软件开发策略/方法发展而来，以响应业务需求。让我们简要地看一下这些模型是如何演变的，以及它们最适合的场景。 
 
       缓慢而繁琐的瀑布模型演变成敏捷，开发团队在短时间内完成软件开发，持续时间甚至不超过两周。如此短的发布周期帮助开发团队处理客户反馈，并将其与bug修复一起合并到下一个版本中。 
       虽然这种敏捷的SCRUM方法为开发带来了敏捷性，但它在运维方面却失去了敏捷实践的速度。开发人员和运维工程师之间缺乏协作仍然会减慢开发过程和发布。 
       DevOps方法就是基于对更好的协作和更快的交付的需求而产生的。DevOps允许用较少复杂问题的持续软件交付来修复和更快地解决问题。 
       现在我们已经了解了DevOps的发展，让我们来详细看看DevOps是什么。 
三、什么是DevOps 
       DevOps是一种软件开发方法，涉及软件在整个开发生命周期中的持续开发，持续测试，持续集成，持续部署和持续监控。 这些活动只能在DevOps中实现，而不是敏捷或瀑布，这就是为什么顶级互联网公司选择DevOps作为其业务目标的前进方向。 DevOps是在较短的开发周期内开发高质量软件的首选方法，可以提高客户满意度。 
       在不了解DevOps生命周期的情况下，对DevOps的理解也会片面化。现在让我们看看DevOps生命周期，并探讨它们如何与下图所示的软件开发阶段相关联。 
 
3.1、持续开发 
       这是DevOps生命周期中软件不断开发的阶段。与瀑布模型不同的是，软件可交付成果被分解为短开发周期的多个任务节点，在很短的时间内开发并交付。 
       这个阶段包括编码和构建阶段，并使用Git和SVN等工具来维护不同版本的代码，以及Ant、Maven、Gradle等工具来构建/打包代码到可执行文件中，这些文件可以转发给自动化测试系统进行测试。 
3.2、持续测试 
       在这个阶段，开发的软件将被持续地测试bug。对于持续测试，使用自动化测试工具，如Selenium、TestNG、JUnit等。这些工具允许质量管理系统完全并行地测试多个代码库，以确保功能中没有缺陷。在这个阶段，使用Docker容器实时模拟“测试环境”也是首选。一旦代码测试通过，它就会不断地与现有代码集成。 
3.3、持续集成 
       这是支持新功能的代码与现有代码集成的阶段。由于软件在不断地开发，更新后的代码需要不断地集成，并顺利地与系统集成，以反映对最终用户的需求更改。更改后的代码，还应该确保运行时环境中没有错误，允许我们测试更改并检查它如何与其他更改发生反应。 
       Jenkins是一个非常流行的用于持续集成的工具。使用Jenkins，可以从git存储库提取最新的代码修订，并生成一个构建，最终可以部署到测试或生产服务器。可以将其设置为在git存储库中发生更改时自动触发新构建，也可以在单击按钮时手动触发。 
3.4、持续部署 
       它是将代码部署到生产环境的阶段。 在这里，我们确保在所有服务器上正确部署代码。 如果添加了任何功能或引入了新功能，那么应该准备好迎接更多的网站流量。 因此，系统运维人员还有责任扩展服务器以容纳更多用户。 
       由于新代码是连续部署的，因此配置管理工具可以快速，频繁地执行任务。 Puppet，Chef，SaltStack和Ansible是这个阶段使用的一些流行工具。 
       容器化工具在部署阶段也发挥着重要作用。 Docker和Vagrant是流行的工具，有助于在开发，测试，登台和生产环境中实现一致性。 除此之外，它们还有助于轻松扩展和缩小实例。 
3.5、持续监控 
       这是DevOps生命周期中非常关键的阶段，旨在通过监控软件的性能来提高软件的质量。这种做法涉及运营团队的参与，他们将监视用户活动中的错误/系统的任何不正当行为。这也可以通过使用专用监控工具来实现，该工具将持续监控应用程序性能并突出问题。 
       使用的一些流行工具是Splunk，ELK Stack，Nagios，NewRelic和Sensu。这些工具可帮助密切监视应用程序和服务器，以主动检查系统的运行状况。它们还可以提高生产率并提高系统的可靠性，从而降低IT支持成本。发现的任何重大问题都可以向开发团队报告，以便可以在持续开发阶段进行修复。 
       这些DevOps阶段连续循环进行，直到达到所需的产品质量。下面的图表将显示可以在DevOps生命周期的哪个阶段使用哪些工具。 
 
       既然我们已经确定了DevOps的重要性，并且了解了它的不同阶段以及所涉及的DevOps工具，现在让我们看看Facebook的一个案例研究，并理解为什么他们从敏捷转向DevOps。我们将采用Facebook曾推出的新特性的用例，这些新特性导致Facebook重新评估其产品交付并采用DevOps方法。 
四、DevOps案例研究 
       曾经，Facebook向遍布全球的若干亿用户推出了一系列新功能 - 时间轴，推荐和音乐功能。 发布后Facebook上产生的巨大流量导致服务器崩溃。 推出的功能获得了用户的大规模超常规响应，这导致了新功能产生了不可控的结果，使他们没有预料到。 
 
       这导致了Facebook重新评估和战略调整，从而使Facebook推出了暗启动技术。 使用DevOps原则，Facebook为其新版本的发布创建了以下方法。 
 
Facebook暗启动技术 
       暗启动是在新功能完全发布给所有用户之前，逐步将新功能，推广到选定的一组用户的过程。 这允许开发团队尽早获得用户反馈，测试错误，并且还可以测试基础架构性能。 这种发布方法是持续交付的直接结果，有助于实现更快，更迭代的版本，确保应用程序性能不会受到影响，并且用户可以很好地更新该版本。 
 
       在暗启动技术中，新功能通过专用的部署管道发布给小型用户群。 在上面给出的Facebook暗启动图表中，您可以看到只打开了一个部署管道，将新功能部署到一组选定用户。 此时剩余的数百条管道全部关闭。 
       持续监视部署功能的特定用户群，以收集反馈并识别错误。 这些错误和反馈将被纳入开发，测试和部署在同一用户群中，直到功能变得稳定。 一旦实现稳定性，通过启用其他部署管道，将逐步在其他用户群上部署这些功能。 
       Facebook通过将代码包装在功能标记或功能切换中来实现此目的，该切换用于控制谁可以看到新功能以及何时查看。与此同时，模拟向用户启动代码的全部效果，在向用户开放全部功能之前，可以及早的暴露应用程序基础架构的痛点和区域，功能稳定后，将通过多个版本将其部署到其余用户。 
       通过这种方式，Facebook拥有一个受控或稳定的机制，可以为其庞大的用户群开发新功能。相反，如果功能没有得到很好的响应，他们可以选择完全回滚部署。这也帮助他们为部署准备服务器，因为他们可以预测网站上的用户活动，并相应地扩展服务器。上面给出的图表描述了Facebook的暗启动过程。 
五、总结 
       微信，淘宝，以及许多领先的科技巨头，在向所有人发布之前，都使用暗发布逐渐向一小部分用户发布和测试新功能。 
       DevOps的目的是更快速，更可靠地创建质量更好的软件，同时开发，运维团队之间进行更多的沟通和协作。 它是一个自动化过程，允许快速，安全和高质量的软件开发和发布，同时保持所有利益相关者在一个循环中。 这就是DevOps获得越来越多的大型互联网公司青睐的真正原因。 
 
                
        
        
"DevOps（英文Development和Operations的组合）代表一种文化、运动或实践。旨在促进软件交付和基础设施变更软件开发人员（Dev）和IT运维技术人员（Ops）之间的合作和沟通。它的目的是构建一种文化和环境使构建，测试，发布软件更加快捷，频繁和可靠。[1][2][3][4] 
 
  
   
   
  
 
 
  
  
    可以把DevOps看作开发（软件工程）、技术运营和质量保障（QA）三者的交集 
   
  
 
传统的软件组织将开发、IT运营和质量保障设为各自分离的部门。在这种环境下如何采用新的开发方法（例如敏捷软件开发），这是一个重要的课题：按照从前的工作方式，开发和部署不需要IT支持或者QA深入的、跨部门的支持，而现在却需要极其紧密的多部门协作。然而DevOps考虑的还不止是软件部署。它是一套针对这几个部门间沟通与协作问题的流程和方法。[5] 
需要频繁交付的企业可能更需要对DevOps有一个大致的了解。Flickr发展了自己的DevOps能力，使之能够支撑业务部门“每天部署10次”的要求[6]──如果一个组织要生产面向多种用户、具备多样功能的应用程序，其部署周期必然会很短。这种能力也被称为持续部署[7]，并且经常与精益创业方法联系起来。[8] 从2009年起，相关的工作组、专业组织和博客快速涌现。[9][10][11][12] 
DevOps的引入能对产品交付、测试、功能开发和维护（包括──曾经罕见但如今已屡见不鲜的──“热补丁”）起到意义深远的影响。在缺乏DevOps能力的组织中，开发与运营之间存在着信息“鸿沟”──例如运营人员要求更好的可靠性和安全性，开发人员则希望基础设施响应更快，而业务用户的需求则是更快地将更多的特性发布给最终用户使用。这种信息鸿沟就是最常出问题的地方。 
以下几方面因素可能促使一个组织引入DevOps： 
使用敏捷或其他软件开发过程与方法业务负责人要求加快产品交付的速率虚拟化[13]和云计算基础设施（可能来自内部或外部供应商）日益普遍数据中心自动化技术[14]和配置管理工具的普及有一种观点认为，目前占主导地位的“传统”美国式管理风格（“斯隆模型 vs  丰田模型”）[15]会导致“烟囱式自动化”，从而造成开发与运营之间的鸿沟，因此需要DevOps能力来克服由此引发的问题。 
DevOps经常被描述为“开发团队与运营团队之间更具协作性、更高效的关系”。由于团队间协作关系的改善，整个组织的效率因此得到提升，伴随频繁变化而来的生产环境的风险也能得到降低。 
 
  
  目录 
  
 
 
 1 对应用程序发布的影响2 现状3 诉求4 发布协调人5 对DevOps的批评6 参考资料7 外部链接及产品 
 
对应用程序发布的影响 
在很多企业中，应用程序发布是一项涉及多个团队、压力很大、风险很高的活动。然而在具备DevOps能力的组织中，应用程序发布的风险很低，原因如下： 
 
  
   
   
  
 
 
  
  
    与传统开发方法那种大规模的、不频繁的发布（通常以“季度”或“年”为单位）相比，敏捷方法大大提升了发布频率（通常以“天”或“周”为单位） 
   
  
 
 
 
   减少变更范围 
  
 
   与传统的 
  瀑布式开发模型相比，采用敏捷或 
  迭代式开发意味着更频繁的发布、每次发布包含的变化更少。由于部署经常进行，因此每次部署不会对生产系统造成巨大影响，应用程序会以平滑的速率逐渐生长。 
  
 
   加强发布协调 
  
 
   靠强有力的发布协调人来弥合开发与运营之间的技能鸿沟和沟通鸿沟；采用 
  电子数据表、 
  电话会议、 
  即时消息、企业门户（wiki、sharepoint）等协作工具来确保所有相关人员理解变更的内容并全力合作。 
  
 
   自动化 
  
 
   强大的部署自动化手段确保部署任务的可重复性、减少部署出错的可能性。 
  
 
现状 
很多组织将开发和和系统管理划分成不同的部门。开发部门的驱动力通常是“频繁交付新特性”，而运营部门则更关注IT服务的可靠性和IT成本投入的效率。两者目标的不匹配，就在开发与运营部门之间造成了鸿沟，从而减慢了IT交付业务价值的速度。 
开发人员经常不考虑自己写的代码会对运营造成什么影响。他们在交付代码之前，并不邀请运营人员参与架构决策或代码评审。开发人员对配置或环境进行修改之后，经常没有及时与运营人员沟通，导致新的代码不能运行。 
  开发人员在自己的机器上手工修改配置，而没有记录所有需要的步骤。想找到必要的配置参数，通常需要尝试很多不同的参数；在得到一个可工作的状态后，往往很难识别出通过哪些最小步骤就能到达该状态。开发人员倾向于使用有利于快速开发的工具：对代码修改更快的反馈，更低的内存消耗，等等。这样的工具集与运营人员面对的目标运行时环境非常不同：后者对稳定性和性能的要求远胜于灵活性。由于开发人员平时使用桌面电脑，他们倾向于使用为桌面用户优化的操作系统。生产环境的运行时系统通常都运行服务器操作系统上。在开发过程中，系统在开发者的本地机器上运行。在运营过程中，系统经常分布在多台服务器上，例如web服务器、应用服务器、数据库服务器等等。 开发是由功能性需求（通常与业务需求直接相关）驱动的。运营是由非功能性需求（例如可获得性、可靠性、性能等）驱动的。 
  运营人员希望尽量避免修改功能，从而降低满足非功能性需求的风险如果拒绝了小的修改，但给定时间段内需要修改的总量不变，那么每次变更的规模就会变大变更规模越大，风险也越大，因为其中涉及的区域越多 由于运营人员尝试避免变更，新功能流入生产环境的速度因此被延缓，从而延缓了开发人员将特性交付给用户使用的速度。运营人员可能对应用程序内部缺乏了解，从而难以正确地选择运行时环境和发布流程。开发人员可能对运行时环境缺乏了解，从而难以正确地对代码进行调整。 
诉求 
更小、更频繁的变更──意味着更少的风险让开发人员更多地控制生产环境更多地以应用程序为中心来理解基础设施定义简洁明了的流程尽可能地自动化促成开发与运营的协作 
一般而言，当企业希望将原本笨重的开发与运营之间的工作移交过程变得流畅无碍，他们通常会遇到以下三类问题： 
 
 
   发布管理问题 
  
 
   很多企业有 
  发布管理问题。他们需要更好的发布计划方法，而不止是一份共享的电子数据表。他们需要清晰了解发布的风险、依赖、各阶段的入口条件，并确保各个角色遵守既定流程行事。 
  
 
 
 
   发布/部署协调问题 
  
 
   有发布/部署协调问题的团队需要关注发布/部署过程中的执行。他们需要更好地跟踪发布状态、更快地将问题上升、严格执行流程控制和细粒度的报表。 
  
 
 
 
   发布/部署自动化问题 
  
 
   这些企业通常有一些自动化工具，但他们还需要以更灵活的方式来管理和驱动自动化工作──不必要将所有手工操作都在命令行中加以自动化。理想情况下，自动化工具应该能够在非生产环境下由非运营人员使用。 
  
 
要开始优化发布流程，可以从问题识别开始：看看上面提到的哪种问题在你的团队中具有最高的优先级。 
发布协调人 
这是企业级IT组织中一个新出现的角色，其主要任务就是协调安排将企业级软件部署到预生产环境。对发布协调人的需求来自于以下几方面原因： 
需要弥合开发与运营的鸿沟基础设施日益变得复杂：为了运营web应用，需要多层基础设施和多种平台发布频率上升（由于敏捷和迭代式开发的引入）分布式团队：位于全球多个地点的、包含外包人员的、混合开发/测试/基础设施的团队 
发布协调人的角色（也被称为部署协调人或集成协调人）源自发布管理或发布工程团队。这个角色与航空交通管制有些类似──实时协调不同团队的行动，有效使用共享的资源（空域、航道、跑道、航站门），达到组织的总体目标（安全起降）。 
传统意义上的发布管理往往只关注软件变更的计划与管理，发布协调则需要控制“将特定软件变更发布至生产环境”的整个过程。这项工作需要系统地管理所有与“将代码构建并部署到生产环境”相关的技术任务，也被称为“发布工程”。 
变更管理是跟踪企业IT环境中各种变化──不管是应用程序还是基础设施的变化──的基本原则。变更管理是ITIL v3的核心之一。 
对DevOps的批评 
有IT博客对“DevOps”这个标签进行了批评，认为它不过是系统管理员的精英至上论俱乐部在老调重弹一些现有的问题（参见“对此运动的批评”）。[16] 
参考资料 
 
 ^ Samovskiy, Dmitriy.  The Rise of DevOps. Fubaredness Is Contagious. 2010-03-02.^ Edwards, Damon.  What is DevOps?.^ Vambenepe, William.  Steve Ballmer gets Cloud.^ Lyman, Jay.  DevOps mixing dev, ops, agile, cloud, open source and business. 451 CAOS Theory.^ What DevOps means to me….^ 10+ Deploys Per Day: Dev and Ops Cooperation at Flickr.^ SAM SIG: Applied Lean Startup Ideas: Continuous Deployment at kaChing. SDForum.^ Applied Lean Startup Ideas: Continuous Deployment at kaChing.^ DevOps Group.  LinkedIn.^ DevOps Days 2009 Conference.^ Edwards, Damon.  DevOps Meetup Recap.^ Lyman, Jay.  DevOps mixing dev, ops, agile, cloud, open source and business. 451 CAOS Theory.^ Virtual Infrastructure products: features comparison. Welcome to IT 2.0: Next Generation IT infrastructures.^ Ellard, Jennifer.  Bringing Order to Chaos through Data Center Automation. Information Management. SourceMedia, Inc.^ Debois, Patrick.  The leaning of life - History of the Silos.^ Debois, Patrick.  What Is This Devops Thing, Anyway?. 
 
外部链接及产品 
 
 IBM DevOpsNolio ASAPStreamStep SmartReleaseThe ControlTier Framework 
 
 
  
  分类： 
  敏捷软件开发软件开发软件工程资讯科技管理 
  
 

                
        
        
"文章目录 
 一、前言二、DevOps 工程师在软件生命周期中能带来什么？三、为什么 DevOps 工程师的角色各不相同呢？四、DevOps 工程师日常工作中最重要的两个方面4.1 自动化4.2 持续集成 
   五、总结六、拓展阅读 
  
 
 
 
一、前言 
在软件开发生命周期中，通常会遇到以下两个瓶颈： 
 
 在需求分析和系统开发阶段之间，针对不断变化的需求，对软件开发者提出了高要求，所以出现了敏捷开发方法论，强调需求敏捷响应、快速迭代、持续交付。在系统开发和构建部署阶段之间，大量完成的开发任务可能阻塞在应用部署阶段，影响交付，于是有了DevOps。 
 
我们之前已经听到很多谈论DevOps和DevOps世界最新趋势的事情，但是就DevOps工程师本身，到底干些什么工作呢？ 
从最纯粹的存在形式上来说，DevOps工程师是为了加快开发和运营团队之间的交付效率而存在的桥梁。 
 
二、DevOps 工程师在软件生命周期中能带来什么？ 
在传统的软件系统交付周期中，软件开发人员会在经年累月的编写代码后，将软件交给QA团队进行测试，然后将最终版本交给运营团队部署。这三个阶段，即开发，测试和部署之间是缺乏协作的。 
开发编写的代码最终并交给运维团队，然后运维团队来解决代码部署过程中出现的问题，或者将代码交还给开发团队来解决遇到的问题。所有这些都导致了软件开发过程的放慢。  但是在DevOps模式下，这三个团队不再孤立。大多数时间内，从开发、测试、部署到运营，相关的工程师合并成一个团队并且贯穿整个软件生命周期，开发不再限制于某一个技能而是一整套技术解决方案。当然安全团队也因此有可能在这个软件生命周期中与开发和运营更紧密地工作，以便及早发现安全问题。 
三、为什么 DevOps 工程师的角色各不相同呢？ 
DevOps工程师并不是什么新鲜事物。比如系统工程师，自动化工程师，软件工程师，Linux工程师等等工程师都能成为DevOps工程师。 
但是，DevOps工程师的工作性质因组织而异。比如有些是在基础设施自动化和维护中发挥作用，而在另外一些组织中却是在整个交付链中发挥作用而已。 
DevOps工程师的角色各不相同，因为他必须通过克服传统协作障碍与开发和运维人员进行协作。而不同的组织有不同的障碍，因此其扮演的角色自然不同。 
四、DevOps 工程师日常工作中最重要的两个方面 
尽管DevOps工程师的角色各不相同，但几乎所有DevOps工程师每天都会触及两件事 - 自动化和持续集成。 
4.1 自动化 
与维护基础设施有关的大部分任务仍然是手动的。公司更喜欢使用传统的经过验证的方法，而不是自动化流程，因为他们不想冒任何风险。但事实是自动化任务将有助于更快速地开发和部署软件，这意味着能加快公司从客户处赚取利益的速度。 
为了阐明这一点，我们可以考虑下面这个情况： 
 
 系统工程师如果每天按要求手动备份所有服务两次，那么他可以通过在云端设施上编写脚本来完成这项工作而不是浪费时间来完成这项工作。通过自动执行备份过程，可以让系统工程师更专注于重要的事情，例如对由于某些虚拟机问题而需要关闭的服务进行故障排除。手动执行相同的操作会导致您的系统工程师负担过重，而这些工程师的效率将大大降低。这只是一个非常简单的例子，通过不实施自动化来阐述资源浪费的概念。 
 
DevOps因此可以作为敏捷的扩展，因为它可以降低由于开发人员、QA和运维团队之间的非协作而可能出现的风险。DevOps通过认识到高质量的软件开发要求包括质量保证和运营专家在内的所有利益相关方的持续参与和反馈，扩大了敏捷原则的范围。 
有很多事情可以通过自动的方式来完成，比如在发布新补丁的时候更新Apache Web服务器，更新部署在服务器上的开源软件版本。 
DevOps工程师可以通过创建脚本环境自动完成配置服务器的过程。可以在一个节点上运行脚本，但如果在数千上百个节点上手工运行相同的脚本将变得不切实际。脚本在这里就变得不再是一个可扩展的解决方案了。 
因此，需要以可扩展的方式跨大量节点自动化进行软件配置、配置管理和应用程序部署。这是配置管理工具（如Chef，Puppet和Ansible）在DevOps世界中派上用场的地方。 
4.2 持续集成 
关于DevOps的另一个重要方面是在软件开发实践中实施持续集成（CI）， CI允许开发人员不断更新自动化构建、测试使用到的资源库。 
持续集成系统通常包含一个可以持续监控版本控制系统的工具。只要检测到对版本控制系统的更改，系统就会自动构建并测试你的应用程序。如果构建失败或测试没有通过，系统会立即通知开发人员解决问题。 
持续集成可确保持续交付，因为所有代码更改都会不断部署到构建阶段之后的测试和生产环境中。 
通过持续集成，开发人员可以从人工任务中解脱出来，提高工作效率，因为现在以CI中以自动化方式完成自动构建任务，并且由于更加频繁的测试，错误和bug更容易找到和解决，从而最终用户的更新可以更快，更频繁地进行。 
有不同的产品和工具可以帮助您在组织中实现持续集成。有些工具可让你将CI 服务器托管在自己的网络基础架构中。最受欢迎的是从Sun的Hudson项目现更名为Jenkins的工具。 
还有一些其他托管的CI产品，如完全托管在云中的CircleCI和Travis CI。这些托管的CI产品越来越受到小组织的欢迎，因为它使工程团队能够尽快开始持续集成。  
五、总结 
 DevOps工程师扮演的最重要角色是弥合软件开发和运营团队之间的差距，提高软件交付速度。  尽管DevOps工程师在组织中的角色各不相同，但有两个重要共同点：自动化和持续集成。  
六、拓展阅读 
《DevOps 系列专栏》
                
                
                
        
        
"DevOps是什么 
如果从字面上来理解，DevOps 只是Dev（开发人员）+Ops（运维人员）突出重视软件开发人员和运维人员的沟通合作 
DevOps 强调的是高效组织团队之间如何通过自动化的工具协作和沟通来完成软件的生命周期管理，从而更快、更频繁地交付更稳定的软件。 
DevOps 其实包含了三个部分：开发、测试和运维。换句话 DevOps 希望做到的是软件产品交付过程中IT工具链的打通，使得各个团队减少时间损耗，更加高效地协同工作。 
从目标来看，DevOps就是让开发人员和运维人员更好地沟通合作，通过自动化流程来使得软件整体过程更加快捷和可靠。 
 
瀑布模型 
早期采用的软件交付模型，称之为“瀑布模型”  瀑布模型，简而言之，就是等一个阶段所有工作完成之后，再进入下一个阶段。 这种模型适合条件比较理想化（用户需求非常明确、开发时间非常充足）的项目。 大家按部就班，轮流执行自己的职责即可。 但是，项目不可能是单向运作的。 客户也是有需求的。 产品也是会有问题的，需要改进的。  随着时间推移，用户对系统的需求不断增加，与此同时，用户给的时间周期却越来越少。在这个情况下，大家发现，笨重迟缓的瀑布式开发已经不合时宜了。 
敏捷开发 
于是，软件开发团队引入了一个新的概念，那就是大名鼎鼎的——“敏捷开发（Agile Development）”。 
敏捷开发在2000年左右开始被世人所关注，是一种能应对快速变化需求的软件开发能力。其实简单来说，就是把大项目变成小项目，把大时间点变成小时间点。 有两个词经常会伴随着DevOps出现，那就是CI和CD。 CI是Continuous Integration（持续集成），而CD对应多个英文，Continuous Delivery（持续交付）或Continuous Deployment（持续部署）。 
 敏捷开发大幅提高了开发团队的工作效率，让版本的更新速度变得更快。 
很多人可能会觉得，“更新版本的速度快了，风险不是更大了吗？ ” 
其实，事实并非如此。 
敏捷开发可以帮助更快地发现问题，产品被更快地交付到用户手中，团队可以更快地得到用户的反馈，从而进行更快地响应。而且，DevOps小步快跑的形式带来的版本变化是比较小的，风险会更小（如下图所示）。即使出现问题，修复起来也会相对容易一些。 
 虽然敏捷开发大幅提升了软件开发的效率和版本更新的速度，但是它的效果仅限于开发环节。研发们发现，运维那边，依旧是铁板一块，成为了新的瓶颈。 运维工程师，和开发工程师有着完全不同的思维逻辑。运维团队的座右铭，很简单，就是“稳定压倒一切”。运维的核心诉求，就是不出问题。 
什么情况下最容易出问题？发生改变的时候最容易出问题。所以说，运维非常排斥“改变”。 于是乎，矛盾就在两者之间集中爆发了。 
DevOps 
这个时候，我们的DevOps，隆重登场了。 
DevOps是一组过程、方法与系统的统称，用于促进开发、技术运营和质量保障（QA）部门之间的沟通、协作与整合。 
 这个定位稍微有点抽象，但是并不难理解。反正它不是某一个特定软件、工具或平台的名字。 
从目标来看，DevOps就是让开发人员和运维人员更好地沟通合作，通过自动化流程来使得软件整体过程更加快捷和可靠。 
 破墙工具 
很多人可能觉得，所谓DevOps，不就是Dev+Ops嘛，把两个团队合并，或者将运维划归开发，不就完事了嘛，简单粗暴。 
注意，这个观点是不对的。这也是DevOps这些年一直难以落地的主要原因。 
想要将DevOps真正落地，首先第一点，是思维转变，也就是“洗脑”。 不仅是运维的要洗，开发的也要洗。 员工要洗，领导更要洗。 DevOps并不仅仅是组织架构变革，更是企业文化和思想观念的变革。 如果不能改变观念，即使将员工放在一起，也不会产生火花。 除了洗脑之外，就是根据DevOps思想重新梳理全流程的规范和标准。 在DevOps的流程下，运维人员会在项目开发期间就介入到开发过程中，了解开发人员使用的系统架构和技术路线，从而制定适当的运维方案。 而开发人员也会在运维的初期参与到系统部署中，并提供系统部署的优化建议。 DevOps的实施，促进开发和运维人员的沟通，增进彼此的理（gan）解（qing）。 在思维和流程改变的同时，想要充分落地DevOps，当然离不开软件和平台的支持。 目前支持DevOps的软件实在是太多了。 限于篇幅，就不一一介绍了。 话说回来，现在DevOps之所以被吹得天花乱坠，也有这些软件和平台的功劳，可以趁机卖钱啊。 
国内常用的DevOps的平台如：CODING、码云 上述这些关键要素里面，技术（工具和平台）是最容易实现的，流程次之，思维转变反而最困难。 
换言之，DevOps考验的不仅是一家企业的技术，更是管理水平和企业文化。 
对比前面所说的瀑布式开发和敏捷开发，我们可以明显看出，DevOps贯穿了软件全生命周期，而不仅限于开发阶段。  下面这张图，更明显地说明了DevOps所处的位置，还有它的价值：  
DevOps与虚拟化、容器、微服务 
这几年云计算技术突飞猛进，大家应该对虚拟化、容器、微服务这些概念并不陌生。当我们提到这些概念的时候，也会偶尔提及DevOps。 
它们之间有什么联系呢？ 
其实很简单。 
大家可以设想一下，如果要对一项工作进行精细化分工，我们是对一个大铁疙瘩进行加工方便？还是拆成一块一块进行加工更加方便？ 
显然是拆分之后会更加方便。 
所谓“微服务”，就是将原来黑盒化的一个整体产品进行拆分（解耦），从一个提供多种服务的整体，拆成各自提供不同服务的多个个体。 
单体式架构（Monolithic）→ 微服务架构（Microservices） 
微服务架构下，不同的工程师可以对各自负责的模块进行处理，例如开发、测试、部署、迭代。 
而虚拟化，其实就是一种敏捷的云计算服务。它从硬件上，将一个系统“划分”为多个系统，系统之间相互隔离，为微服务提供便利。 
容器就更彻底了，不是划分为不同的操作系统，而是在操作系统上划分为不同的“运行环境”（Container），占用资源更少，部署速度更快。  明白了吧？虚拟化和容器，其实为DevOps提供了很好的前提条件。开发环境和部署环境都可以更好地隔离了，减小了相互之间的影响。 
这也是DevOps为什么09年时不火，现在越来越火的一个主要原因之一。
                
                
                
        
        文章知识点与官方知识档案匹配，可进一步学习相关知识算法技能树首页概览47020 人正在系统学习中"
"在本文中我们将会讨论一些人们对DevOps的误解，同时会介绍一个能够带来DevOps文化转变的流程。 
在一篇题为“不，你并不是一个DevOps工程师”的博文中，Cloud Technology Partners公司的副总裁兼首席架构师Mike Kavis谈论了一些与DevOps相关的错误想法。例如，他提到一些团队是如何误用术语DevOps的： 
企业正在为DevOps苦恼。他们都想得到DevOps，即使很多企业并不知道它到底是什么。在很多情况下，我会看到那些自称DevOps的基础设施团队在领导一个基层倡议。当我问他们开发团队在哪里的时候，他们通常会说“我们并没有邀请他们”，甚至更糟“我们并没有同他们交流”。 
一些工程师将自己宣传为DevOps，但是他们并不是，因为根据Kavis所说“DevOps并不是一个人，一个角色或者一个头衔。即使你可以声称自己是一个DevOps工程师，但是这仅是你自己的看法，实际上你并不是。”如果DevOps不是一个角色，一个资格，一个头衔 ，那么它到底是什么呢？Kavis的定义是： 
DevOps是一种文化转变，或者说是一个鼓励更好地交流和协作（即团队合作）以便于更快地构建可靠性更高、质量更好的软件的运动。 
然后他详细描述说： 
DevOps是软件开发生命周期（SDLC）从瀑布式到敏捷再到精益的发展。DevOps超越了敏捷，它的关注点是从SDLC中移除浪费。通常情况下，发现浪费或者瓶颈的形式包括：不一致的环境，人工的构建和部署流程，差的质量和测试实践，IT部门之间缺少沟通和理解，频繁的中断和失败的协定以及那些需要珍贵的资源、花费重要的时间和金钱才能保持系统运行的全套问题。 
我看到的另一个重复模式是：一个“DevOps”团队的第一步通常是决定他们是否应该使用Chef或者Puppet（或者是Salt、Ansible等其他任何热门的东西）。他们甚至还没有定义自己打算解决的问题，即使他们手头的工具可以解决它们。这些团队通常会紧张地构建数千行脚本，但是这就产生了一个问题：“我们的职责是编写Chef脚本还是通过质量更好、更稳定的产品更快地进入市场？”。在大多数情况下，这些团队会将自己逼入绝境，大量的专有脚本实际上是增加了系统的浪费，而隐藏在DevOps运动之后的驱动力是从系统中移除浪费，这些团队并没有做到这一点。 
如果说DevOps是一种打算让开发某个产品的多个团队之间能够更好的交流和协作的文化变革，那么下一个问题就是我们该如何实现DevOps，我们如何将这种文化引入到自己的公司中？ 
DTO Solutions的共同创建者Damon Edwards在2013年的DevOps Days Mountain View上做了题为“如何发起一个DevOps变革”的主题演讲，他推荐通过一个三步走的过程将DevOps文化引入到某个组织中： 
1.弄清楚“为什么？” 
根据Edwards所说，首先非常清楚组织成员为什么会聚到一起，知道他们试图实现什么，清楚他们的目的是什么是非常重要的。为了找到这些问题的答案我们应该直接与组织中的这些人交流，询问他们为什么会出现在这里。组织的主要目标是我们实现DevOps文化的唯一原因，除此之外没有其他原因。 
Edwards认为DevOps仅仅是达到目标的一种手段，但是它自己本身并没有结束：“DevOps并不是你的为什么，不是你合作伙伴的为什么，当然也不是你业务的为什么”。他甚至建议忘记DevOps团队，而是使用服务交付作为替代，因为“我们的职责是创造服务”。 
2. 实现组织合作 
按照Edwards介绍的过程，接下来需要做的是使整个组织合作，让所有人基于一组共享的条件和规则向一个共同的目标努力。当你能够把同一个目标指定给多个人的时候，一个组织就实现了正确的合作，他们会选择同样的方式去实现各自的目标；他们对于同一个问题有同样的答案。这可能是“组织合作的终极梦想”。 
为了完成这种合作，组织内部必须要有人描绘一个DevOps愿景。这并不能通过教学过程实现，因为人们只会尝试着机械性地遵循这些步骤。我们需要的是教会大家一种思维方式。根据Edwards所说，这可以通过遵循下面的几个步骤实现： 
教导基本的概念，例如“单件流、批量工作、限制在制品的数量、拉式vs推式、持续交付”以及可以使用的工具等组织将会共享的一些通用词汇的概念。让所有人目标一致，通过：  a. 价值流程图——一个精益概念，它详细描述了一个组织内部发生的信息流和制品流，引导价值创造。  b. 时间线分析——试图发现时间花费在哪里，瓶颈在哪里。  c. 浪费分析——确定一个组织所产生的各种各样的浪费以便于尽可能地消除浪费。发展度量链，它的意思是对价值交付链中的各个活动进行度量，发现各个活动相互之间的影响。针对基线识别项目/ 实验。识别哪些项目或者活动偏离了基线，并且采取纠正措施。重复第2至4步。这一步构成了持续改进流程。 
为了实现这些想法，Edwards建议了一个3天的计划： 
第1天—— 教导原则，提出一个方案进行研究，模式和反模式第2天——分析组织当前的状态，提供问题识别技术和改进指标第3天——讨论解决方案和工具链自动化原则，构建一个路线图 
3.持续改进循环 
这些循环的目的是通过制定计划、实现计划、测量输出和决定如何持续地改进流程。 
在最近举行的QCon London 2014上Edwards做了题为“Dev ‘Programming’ Ops For DevOps Success”的分享，其中就讲到了这些原则，稍后这个分享将会发布到InfoQ上。 
查看英文原文：What Is (Not) DevOps, and How Do We Get There? 
转自  http://www.infoq.com/cn/news/2014/03/devops?utm_campaign=infoq_content&utm_source=infoq&utm_medium=feed&utm_term=global
                
        
        
"一.开发模式 
传统开发模式，也就是瀑布型开发，瀑布模型式是最典型的预见性的方法，严格遵循预先计划的需求、分析、设计、编码、测试的步骤顺序进行。例如需求规格，设计文档，测试计划和代码审阅等等。 
  
其中需求分析占比很重，对客户想要的产品进行详细分析，明确指定产品结果。 
但是由于需求人员的考虑的方面可能有疏漏。客户的需求的变化。行情的变化等等因素存在。需求文档会不断变更，开发人员产生抵触心理。开发人员按照需求文档严格开发，限制思维，参与不到需求的设计。需求与客户沟通存在障碍，可能导致最终产物不是客户想要的。重新开始项目，很费事费力。 
所谓的瀑布，很形象的表达了这一开发模式，就是留下去了，就回不去了。当然程序开发的时候可以重新开始，但是就相当于之前作废，重立项目。 
    2.市场在变，科技在变，一切的在不断改变，拥抱变化才能更快的适应环境的变化。因此提出了敏捷式开发。 
敏捷开发拥抱变化。敏捷开发就相当于敏捷天赋点满，起点并不是一个完全准确的需求，而是将主干尽快完成，客户认可后，不断的增加新功能，不断改造，不断调优的过程。 
  
敏捷开发的还有一个特点就是快，快速迭代。不断快速开发小需求，直到客户满意。 
游戏的制作就是一个很好的例子，游戏行业的竞争相当大。在游戏程序差不多的情况下，谁能先占领用户，谁就有优势。 
先将核心玩法设计出来，直接上市，让用户去试用体验版，得到用户的反馈，不断优化。这样可以先占据一定的用户，占据一定的市场。 
如果按照传统开发，一套文档设计出来，开发，调试几年过去了。市场早就被瓜分了。 
敏捷开发，并没有将运维也纳入进来，有可能需求，开发，测试很快做出了很多版本，但是没有部署，或者部署很慢。也拖延产品的进程。这就需要开发，测试，运维的相互沟通。 
为了加快这些环节的沟通问题，devops观念产生。 
运维的难题：服务器不同可能是物理机，虚拟机。 操作系统可能不同，linux，windows 
环境变量可能不同等等。 
二.devops 理念 
devops是development 与operations 的缩写。Devops就是要打破了开发运维之间的隔阂，提高了各个团队的协作。强调流程自动化。Pipeline（流水线）。包含以下几个核心的观念。 
1.CI/CD 
CI  ：持续集成（Continuous integration），强调开发人员提交代码后，立刻进行构建。单元测试。由于可能每天要开发部署很多次，因此需要将开发人员开发代码，不断的集成到现有的主干上去 
CD  ：包含两个一个是 
持续交付（continuous delivery）将集成后的代码部署到最贴近生产环境的中，让用户，质量监控部门审核。持续交付并不是马上部署到生产环境，指的是交付的代码可以随时部署到生产环境。 
持续部署（continuous·deployment）代码经过评审后，自动部署到生产环境中，可能一天很多次部署。 
  
 
  
Jira：JIRA是Atlassian公司出品的项目与事务跟踪工具，被广泛应用于缺陷跟踪、客户服务、需求收集、流程审批、任务跟踪、项目跟踪和敏捷管理等工作领域。 
收费，可破解替代品redmine 
Git/svn:代码管理，版本管理 
Maven：构建项目为相应的介质（jar或者war） 
Junit：单元测试 
Selenum：功能测试 
Jmeter：新能测试 
需要测试人员编写自动化测试脚本 
Nexus/docker仓库：制成品仓库,用于保存相应的介质，或者镜像 
Puppet：开源配置管理中心。用于各个服务器之间的环境管理。 
K8s：弹性部署，用于各个容器之间的编排，用于初始化容器。可以保证自动容器的启停，重启，给用户一个持续运行的容器环境 
Elk：日志监控工具。服务的链路追踪。 
Conflunce：知识管理，开发规范管理。 
Jenkins：devops的脚手架，可以集成以上各个软件。为devops打通各个流程。 
Harbor：是一个用于存储Docker镜像的企业级Registry服务。 
三.Devops流程 
相关概念：介质（war包，jar包），中间件（tomcat，jdk等），服务器环境 
  
手动生成镜像方式 
在pom文件中添加docker插件 
在src/main/docker 下编写docker file 
手动执行指令mvn package docker:build生成镜像 
手动push到镜像仓库 
Jenkins执行脚本控制远程服务器pull镜像，运行 
  
介质部署：中间件独立运行于相应的容器中 
需求人员分析主干需求到jira------>开发人员编写代码------>提交到版本控制git等------> 
Jenkins的构建触发器触发自动构建------>jenkins配置构建后步骤------>自动化测试------>maven生成相应介质------>介质存储到介质仓库------>k8s容器编排，初始化容器，从仓库中拉取介质，解析------>tomcat容器运行 
  
镜像部署：将介质与中间件打成镜像 
需求人员分析主干需求到jira------>开发人员编写代码------>提交到版本控制git等------>Jenkins的构建触发器触发自动构建------>jenkins配置构建后步骤------>自动化测试------>maven生成相应介质------>docker根据dockerfile脚本生成镜像------>存储到镜像仓库harbor/阿里云/docker registory------>Jenkins 执行远程脚本，远程服务器pull镜像，停止老容器，启动新容器------>docker运行镜像------>jenkins通知部署结果 
  
测试工作 
传统的测试工作位于 开发结束后，上线前。但是敏捷开发与devops要求快速，留给测试人员的时间并不多。因此有人提出测试左移，测试右移 
测试左移，将测试工作放到需求定义后，由测试人员编写自动化测试脚本测试右移，将测试工作放到生产部署后，将有测试人员与用户，质量团队共同把关，收集客户，质量，和测试人员自己发现的问题，及时提出改正。 
四.Docker容器化技术的优势 
Docker的容器化是催生devops出现的关键因素，总结有一下几个有点 
容器消除环境的差异，容器提供了环境的一致性，和标准化。容器跨平台，一次构建，处处运行。资源利用率高，直接与底层系统交互，效率高。容器具有隔离性，可以精准分配系统资源 
五.Docker学习 
可以参照博客，书籍，与官方文档 
Docker镜像：相当于一个只读模板 
容器：是从镜像创建的运行实例，运行原生 Linux，它运行一个独立的进程，不占用任何其他可执行文件的内存可以启停删除，容器之间相互隔离，但可以人为联通。同一镜像可以有不同容器， 
docker images 查看本地镜像 
docker search 查看镜像仓库中的镜像 
docker pull 下载镜像 
  
docker run 使用镜像启动容器 
可以在docker hub上查找启动参数配置 
https://hub.docker.com/search?q=tomcat&type=image 
  
-v：宿主机目录:容器目录 
-p：访问ip 
--name： 容器名字 
-e：容器的环境配置 
  
docker stop 停止容器 
docker start 启动容器 
  
docker ps 查看正在运行的实例 
docker ps -a 查看已经退出的容器 
docker rmi 容器id/name  删除镜像 
docker rm 删除容器 
docker rm -f 删除正在运行的容器 
六.Docker file 
Docker 构建镜像通过docker fileDockerfile 是一个txt文件，包含可以控制执行的所有命令docker build -f 构建镜像，-f指定构建后镜像的位置 
一个docker file 文件格式如下 
  
FROM：指定基础镜像位置 
MAINTAINER: 维护者信息 
ADD：将本地文件添加到容器中，tar类型文件会自动解压(网络压缩资源不会被解压) 
RUN：构建镜像时执行的命令 
CMD：构建容器后调用，也就是在容器启动时才进行调用。 
ENV：设置环境变量 
EXPOSE：指定于外界交互的端口 
7.devops 云研发平台 
云理念包括：saas，paas，iaas。 
开发者不用再费事费力的安装开发环境，一切都可以放到服务端，进行云开发，然后基于devops一条龙服务。 
Gitlab当中就有webide，不用下载开发工具之类。 
 
                
        
        
"DevOps 流水线 
  DevOps流水线软件工程团队中的流水线是一组自动化流程，使 DevOps 专业人员和开发人员能够可靠而有效地编译，构建并将其代码部署到生产计算平台。 DevOps 流水线中最常见的组件是构建自动化或持续集成、测试自动化和部署自动化。 流水线包含一组工具，这些工具分为以下几类： 
源代码控制构建工具容器化配置管理监控 
持续集成流水线（CI） 
  持续集成（CI）是一种实践，开发人员可以每天多次将其代码检入版本控制的存储库中。这些检查触发了自动构建流水线，从而可以快速，轻松地定位错误检测。   CI的一些重要优点是： 
较小的更改很容易集成到大型代码库中。让其他团队成员更轻松地看到您的工作。较少的集成问题，可快速交付代码。尽早发现错误，使它们更易于修复，从而减少了调试工作。 
持续交付流水线（CD） 
  持续交付具有代码交付流水线的优势，可以按需执行代码交付流水线。   CD的一些重要优点是： 
更快的错误修复和功能交付。CD 使团队可以小批量处理功能和错误修复，这意味着可以更快地收到用户反馈。它减少了项目的总时间和成本。 
DevOps 方法论 
  我们有一种经过证明的方法论，采用了采用云的方法。它考虑了成功实施所需的所有因素，例如人员、流程和技术，着重于以下关键考虑因素： 
团队：任务或项目以及云管理。连接性：公共、本地和混合云网络访问。自动化：将基础架构作为代码，编写业务流程的编排和资源脚本。入职流程：项目如何在云中开始。项目环境：TEST，DEV，PROD（完全相同的部署，测试和生产）。共享服务：企业提供的常见功能。命名约定：跟踪资源利用率和计费的重要方面。在团队中定义标准角色：按职务职能访问资源的权限。
                
                
                
        
        
"DevOps是什么从哪里来 
    DevOps的概念历史变革 DevOps的几个关键问题 
    好处是什么 为什么DevOps会兴起为什么会继续火下去 
    条件成熟技术配套发展来自市场的外部需求这世界变化太快来自团队的内在动力工程师也需要 实现DevOps需要什么 
    硬性要求工具上的准备软性需求文化和人 DevOps的采用现状 
    哪些公司在用他们怎么实施的总结  
  
 
 
目前在国外，互联网巨头如Google、Facebook、Amazon、LinkedIn、Netflix、Airbnb，传统软件公司如Adobe、IBM、Microsoft、SAP等，亦或是网络业务非核心企业如苹果、沃尔玛、索尼影视娱乐、星巴克等都在采用DevOps或提供相关支持产品。那么DevOps究竟是怎样一回事？在Puppet、RightScale分别DevOps出版的调查报告基础上，整理本文，以期为读者理清思路。另外，中国正在开展了一份自己的调查问卷，由南京大学发起，欢迎大家投票参与。 
DevOps是什么？从哪里来？ 
DevOps的概念 
DevOps一词的来自于Development和Operations的组合，突出重视软件开发人员和运维人员的沟通合作，通过自动化流程来使得软件构建、测试、发布更加快捷、频繁和可靠。 
DevOps概念早先升温于2009年的欧洲，因传统模式的运维之痛而生。 
 
  DevOps是为了填补开发端和运维端之间的信息鸿沟，改善团队之间的协作关系。不过需要澄清的一点是，从开发到运维，中间还有测试环节。DevOps其实包含了三个部分：开发、测试和运维。   
换句话说，DevOps希望做到的是软件产品交付过程中IT工具链的打通，使得各个团队减少时间损耗，更加高效地协同工作。专家们总结出了下面这个DevOps能力图，良好的闭环可以大大增加整体的产出。 
 
历史变革 
由上所述，相信大家对DevOps有了一定的了解。但是除了触及工具链之外，作为文化和技术的方法论，DevOps还需要公司在组织文化上的变革。回顾软件行业的研发模式，可以发现大致有三个阶段：瀑布式开发、敏捷开发、DevOps。 
DevOps早在九年前就有人提出来，但是，为什么这两年才开始受到越来越多的企业重视和实践呢？因为DevOps的发展是独木不成林的，现在有越来越多的技术支撑。微服务架构理念、容器技术使得DevOps的实施变得更加容易，计算能力提升和云环境的发展使得快速开发的产品可以立刻获得更广泛的使用。 
 
（注：上图摘自上月红帽副总裁Ashesh Badani的一次新闻分享会） 
DevOps的几个关键问题 
好处是什么？ 
DevOps的一个巨大好处就是可以高效交付，这也正好是它的初衷。Puppet和DevOps Research and Assessment (DORA) 主办了2016年DevOps调查报告，根据全球4600位各IT公司的技术工作者的提交数据统计，得出高效公司平均每年可以完成1460次部署。与低效组织相比，高效组织的部署频繁200倍，产品投入使用速度快2555倍，服务恢复速度快24倍。在工作内容的时间分配上，低效者要多花22%的时间用在为规划好或者重复工作上，而高效者却可以多花29%的时间用在新的工作上。所以这里的高效不仅仅指公司产出的效率提高，还指员工的工作质量得到提升。 
DevOps另外一个好处就是会改善公司组织文化、提高员工的参与感。员工们变得更高效，也更有满足和成就感；调查显示高效员工的雇员净推荐值（eNPS:employee Net Promoter Score）更高，即对公司更加认同。 
快速部署同时提高IT稳定性。这难道不矛盾吗？ 
快速的部署其实可以帮助更快地发现问题，产品被更快地交付到用户手中，团队可以更快地得到用户的反馈，从而进行更快地响应。而且，DevOps小步快跑的形式带来的变化是比较小的，出现问题的偏差每次都不会太大，修复起来也会相对容易一些。 
 
因此，认为速度就意味着危险是一种偏见。此外，滞后软件服务的发布也并不一定会完全地避免问题，在竞争日益激烈的IT行业，这反而可能错失了软件的发布时机。 
为什么DevOps会兴起？为什么会继续火下去？ 
条件成熟：技术配套发展 
技术的发展使得DevOps有了更多的配合。早期时，大家虽然意识到了这个问题的，但是苦于当时没有完善丰富的技术工具，是一种“理想很丰满，但是现实很骨感”的情况。DevOps的实现可以基于新兴的容器技术；也可以在自动化运维工具Puppet、SaltStack、Ansible之后的延伸；还可以构建在传统的Cloud Foundry、OpenShift等PaaS厂商之上。 
来自市场的外部需求：这世界变化太快 
IT行业已经越来越与市场的经济发展紧密挂钩，专家们认为IT将会有支持中心变成利润驱动中心。事实上，这个变化已经开始了，这不仅体现在Google、苹果这些大企业中，而且也发生在传统行业中，比如出租车业务中的Uber、酒店连锁行业中的Airbnb、图书经销商Amazon等等。能否让公司的IT配套方案及时跟上市场需求的步伐，在今天显得至关重要。 
DevOps 2016年度报告给出了一个运维成本的计算公式：  停机费用成本 = 部署频率 * 版本迭代失败概率 * 平均修复时间 * 断电的金钱损失 
来自团队的内在动力：工程师也需要 
对于工程师而言，他们也是DevOps的受益者。微软资深工程师Scott Hanselman说过“对于开发者而言，最有力的工具就是自动化工具”（The most powerful tool we have as developers is automation）。工具链的打通使得开发者们在交付软件时可以完成生产环境的构建、测试和运行；正如Amazon的VP兼CTO Werner Vogels那句让人印象深刻的话：“谁开发谁运行”。（You build it, you run it） 
实现DevOps需要什么？ 
硬性要求：工具上的准备 
上文提到了工具链的打通，那么工具自然就需要做好准备。现将工具类型及对应的不完全列举整理如下： 
代码管理（SCM）：GitHub、GitLab、BitBucket、SubVersion、TFS  构建工具：Ant、Gradle、maven  自动部署：Capistrano、CodeDeploy  持续集成（CI）：Bamboo、Hudson、Jenkins  配置管理：Ansible、Chef、Puppet、SaltStack、ScriptRock GuardRail  容器：Docker、LXC、Rkt、第三方厂商如AWS  编排：Kubernetes、Apache Mesos、DC/OS  服务注册与发现：Zookeeper、etcd、Consul  脚本语言：python、ruby、shell  日志管理：ELK、Logentries  系统监控：Datadog、Graphite、Icinga、Nagios  性能监控：AppDynamics、New Relic、Splunk  压力测试：JMeter、Blaze Meter、loader.io  预警：PagerDuty、pingdom、厂商自带如AWS SNS  HTTP加速器：Varnish  消息总线：ActiveMQ、SQS  应用服务器：Tomcat、JBoss  Web服务器：Apache、Nginx、IIS  数据库：MySQL、Oracle、PostgreSQL等关系型数据库；cassandra、mongoDB、redis等NoSQL数据库  项目管理（PM）：Jira、Asana、Taiga、Trello、Basecamp、Pivotal Tracker  在工具的选择上，需要结合公司业务需求和技术团队情况而定。（注：更多关于工具的详细介绍可以参见此文：51 Best DevOps Tools for #DevOps Engineers） 
软性需求：文化和人 
DevOps成功与否，公司组织是否利于协作是关键。开发人员和运维人员可以良好沟通互相学习，从而拥有高生产力。并且协作也存在于业务人员与开发人员之间。出席了2016年伦敦企业级DevOps峰会的ITV公司在2012年就开始落地DevOps，其通用平台主管Clark在接受了InfoQ的采访，在谈及成功时表示，业务人员非常清楚他们希望在最小化可行产品中实现什么，工程师们就按需交付，不做多余工作。这样，工程师们使用通用的平台（即打通的工具链）得到更好的一致性和更高的质量。此外，DevOps对工程师个人的要求也提高了，很多专家也认为招募到优秀的人才也是一个挑战。 
DevOps的采用现状 
哪些公司在用？ 
DevOps正在增长，尤其是在大企业中：调查发现，DevOps的接受度有了显著提高。74%的受访者已经接受了DevOps，而去年这一比例为66%。目前，在81%的大企业开始接受DevOps，中小企业的接受度仅为70%。 
那么具体而言都有些公司在采用DevOps呢？Adobe、Amazon、Apple、Airbnb、Ebay、Etsy、Facebook、LinkedIn、Netflix、NASA、Starbucks、Target（泛欧实时全额自动清算系统）、Walmart、Sony等等。 
他们怎么实施的？ 
首先，大企业正在自下而上接受DevOps，其中业务单位或部门（31%）以及项目和团队（29%）已经实施DevOps。不过，只有21%的大企业在整个公司范围内采用了DevOps。  其次，在工具层面上，DevOps工具的用量大幅激增。Chef和Puppet依然是最常用的DevOps工具，使用率均为32%。Docker是年增长率最快的工具，用量增长一倍以上。Ansible的用量也有显著增加，使用率从10%翻倍至20%。 
 
并且调查还发现不到半数（43%）的公司在使用诸如Chef、Puppet、Ansible或Salt等配置工具；然而使用配置工具的公司更有可能同时使用多个工具。25%的受访者使用两种或更多配置工具，只使用一种工具的比例为18%。其中Chef和Puppet是最常用的组合：使用Chef的组织中有67%同时也使用Puppet，类似的，使用Puppet的组织中也有67%同时使用了Chef。 
 
总结 
DevOps是在敏捷环境中产生的，主张个体和互动高于流程和工具，把更多的时间留给人与人之间的交流，使不同团队和角色紧密连接在一起。
                
                
                
        
        
"DevOps概念早先升温于2009年的欧洲，因传统模式的运维之痛而生。   
DevOps是为了填补开发端和运维端之间的信息鸿沟，改善团队之间的协作关系。不过DevOps其实包含了四个部分：产品、开发、测试和运维。 
  
DevOps希望做到的是软件产品交付过程中IT工具链的打通，使得各个团队减少时间损耗，更加高效地协同工作。专家们总结出了下面这个DevOps能力图，良好的闭环可以大大增加整体的产出。 
  
 
  
   
   那么究竟什么是DevOps 
   
  
 
高效稳定的、可持续的、可协调的、自动化的 
 
                
        
        
"DevOps概述 
DevOps（Development和Operations的组合词）是一组过程、方法与系统的统称，用于促进开发（应用程序/软件工程）、技术运营（运维）、质量保障（测试）（QA）部门之间的沟通、协作与整合。随着业务复杂化和人员的增加，开发人员和运维人员逐渐演化成两个独立的部门，他们工作地点分离，工具链不同，业务目标也有差异，这使得他们之间出现一条鸿沟。而发布软件就是将一个软件想从鸿沟的这边送去那边，这之中困难重重。开发要求变化，运维要求稳定，开发团队和运维团队的工作方式和思维方式有巨大的差异：开发团队和运维团队生活在两个不同的世界，而彼此又坚守着各自的利益，所以在这两者之间工作到处都是冲突。 
DevOps是一种重视“软件开发人员（Dev）”和“IT运维技术人员（Ops）”之间沟通合作的文化、运动或惯例。透过自动化“软件交付”和“架构变更”的流程，来使得构建、测试、发布软件能够更加地快捷、频繁和可靠。 它的出现是由于软件行业日益清晰地认识到：为了按时交付软件产品和服务，开发和运营工作必须紧密合作。DevOps 绝不是为了提升部署/发布频率而牺牲了软件质量和业务价值，甚至是安全措施。DevOps 是一个完整的面向IT运维的工作流，以 IT 自动化以及持续集成（CI）、持续部署（CD）为基础，来优化程式开发、测试、系统运维等所有环节。 
可以把DevOps看作开发（软件工程）、技术运营和质量保障（QA）三者的交集。 传统的软件组织将开发、IT运营和质量保障设为各自分离的部门。在这种环境下如何采用新的开发方法（例如敏捷软件开发），这是一个重要的课题：按照从前的工作方式，开发和部署不需要IT支持或者QA深入的、跨部门的支持，而却需要极其紧密的多部门协作。然而DevOps考虑的还不止是软件部署。它是一套针对这几个部门间沟通与协作问题的流程和方法。DevOps的好处更多在于持续部署与交付，这是对于业务与产品而言。而DevOps 文化与技术方法论，它是部门间沟通协作的一组流程和方法，有助于改善公司组织文化、提高员工的参与感。 
DevOps的引入能对产品交付、测试、功能开发和维护（包括──曾经罕见但如今已屡见不鲜的──“热补丁”）起到意义深远的影响。在缺乏DevOps能力的组织中，开发与运营之间存在着信息“鸿沟”──例如运营人员要求更好的可靠性和安全性，开发人员则希望基础设施响应更快，而业务用户的需求则是更快地将更多的特性发布给最终用户使用。这种信息鸿沟就是最常出问题的地方。 
DevOps对应用程序发布的影响 随着软件发布迭代的频率越来越高，传统的「瀑布型」（开发—测试—发布）模式已经不能满足快速交付的需求。在很多企业中，应用程序发布是一项涉及多个团队、压力很大、风险很高的活动。然而在具备DevOps能力的组织中，应用程序发布的风险很低，原因如下 ： （1）减少变更范围 与传统的瀑布式开发模型相比，采用敏捷或迭代式开发意味着更频繁的发布、每次发布包含的变化更少。由于部署经常进行，因此每次部署不会对生产系统造成巨大影响，应用程序会以平滑的速率逐渐生长。 （2）加强发布协调 靠强有力的发布协调人来弥合开发与运营之间的技能鸿沟和沟通鸿沟；采用电子数据表、电话会议、即时消息、企业门户（wiki、sharepoint）等协作工具来确保所有相关人员理解变更的内容并全力合作。 （3）自动化 强大的部署自动化手段确保部署任务的可重复性、减少部署出错的可能性。 与传统开发方法那种大规模的、不频繁的发布（通常以“季度”或“年”为单位）相比，敏捷方法大大提升了发布频率（通常以“天”或“周”为单位）。 
1、更小、更频繁的变更──意味着更少的风险 2、让开发人员更多地控制生产环境 3、更多地以应用程序为中心来理解基础设施 4、定义简洁明了的流程 5、尽可能地自动化 6、促成开发与运营的协作 一般而言，当企业希望将原本笨重的开发与运营之间的工作移交过程变得流畅无碍，他们通常会遇到以下三类问题： 发布管理问题： 很多企业有发布管理问题。他们需要更好的发布计划方法，而不止是一份共享的电子数据表。他们需要清晰了解发布的风险、依赖、各阶段的入口条件，并确保各个角色遵守既定流程执行。 
发布/部署协调问题： 有发布/部署协调问题的团队需要关注发布/部署过程中的执行。他们需要更好地跟踪发布状态、更快地将问题上升、严格执行流程控制和细粒度的报表。Ops 所在的部门绩效分为两块：一块为常规运维绩效（保证系统稳定性），另一块为 DevOps 项目绩效（保证开发顺利性），可以根据具体工作状况来设置这样的工作比率。 
发布/部署自动化问题： 这些企业通常有一些自动化工具，但他们还需要以更灵活的方式来管理和驱动自动化工作──不必要将所有手工操作都在命令行中加以自动化。理想情况下，自动化工具应该能够在非生产环境下由非运营人员使用。 要开始优化发布流程，可以从问题识别开始：看看上面提到的哪种问题在你的团队中具有最高的优先级。 
关键的 DevOps 合作方式： 1，共同进行架构设计 2，共同进行技术决策 3，持续交付流水线的建立 4，共同 Pair 和 Review 代码和环境的配置 5，共同参与回顾会议 6，通过定期的内部 Session 增加相互的理解 7，共同处理运维的问题 
 （整理自网络。）  
                
        
        
"1.价值流的三个度量：前置时间、完成准确率，流程时间。为了满足需求而按顺序排好的一些列活动，成为价值流。 
2.价值流映射：致力于可视化价值流的工作。 
3.映射的两个步骤：创建当前as-is流图；创建未来to-be图。 
4.价值流映射有助于有优化业务流程。 
5.研究未来to-be流图的重要性：有助于避免局部优化；理解目标状态，是的我们能够基于清晰的改进目标来启动实现的改进机制。 
6.价值流思维是Devops的核心：关键度量（LT,PT,%C/A）；可视化展现，创建价值而非动作；避免局部优化陷阱（约束理论）， 
Devops的关键想法从每一步到下一步而到顺畅且统一的流动，有节奏，没有不必要的延迟且有最优的资源利用率，实现持续交付。 
7.部署流水线的理念：节约资源，确保产品质量，加速度生成环境的变更交付，不断在审计日志中保留记录 
8.版本控制理念：不仅要存储源代码，还要存储于IT系统相关的所有内容：测试，用于创建和修改数据库的脚本，构建脚本，环境创建脚本，部署脚本，人工产出物，库文档，配置文件，开发工具。 
9.版本控制的重要： 
原则允许对允许中的系统的所有组成部分进行前所未有的控制，而其他工具无法实现。 
需要改变工作在信息和配置上的变化 
结果：能够确定更改内容，何时以及由谁更改，能够在过去的任何时候恢复系统，包括以最小的努力将故障系统恢复到保证的工作状态。允许团队中的任何成员自由的删除不必要的文件和文档，而不会有意外丢重要的信息或产品风险。 
10.配置管理的理念：整合了生产环境和其它环境的管理；对于环境的任何更改都只会由脚本维护并存在版本管理系统里。 
当部署流水线在执行时，环境会自动生成，该原则要求对IT支持和运营的工作进行全面重组，实际上，现在管理员无权以以往的方式更改生成环境中的任何内容。 
11.配置管理的重要： 
优势是版本控制，所有的变化都受控制，系统可以快速恢复到稳定状态，如果关键成员离开，知识也不会丢失。 
12.Devops完成的定义：是客户收到或者开始收到他们的期望价值。生产环境要完全资讯整个价值流。 
 
 DevOps的三大原则：1、基础设施即代码（Infrastructure as Code） DeveOps的基础是将重复的事情使用自动化脚本或软件来实现，例如Docker（容器化）、Jenkins（持续集成）、Puppet（基础架构构建）、Vagrant（虚拟化平台）等2、持续交付（Continuous Delivery） 持续交付是在生产环境发布可靠的软件并交付给用户使用。而持续部署则不一定交付给用户使用。涉及到2个时间，TTR（Time to Repair）修复时间，TTM（Time To Marketing）产品上线时间。要做到高效交付可靠的软件，需要尽可能的减少这2个时间。部署可以有多种方式，比如蓝绿部署、金丝雀部署等。3、协同工作（Culture of Collaboration） 开发者和运维人员必须定期进行密切的合作。开发应该把运维角色理解成软件的另一个用户群体。协作有几个的建议：1、自动化（减少不必要的协作）；2、小范围（每次修改的内容不宜过多，减少发布的风险）；3、统一信息集散地（如wiki，让双方能够共享信息）；4、标准化协作工具（比如jenkins） 附上DevOps的定义： 
DevOps（Development和Operations的组合词）是一种重视“软件开发人员（Dev）”和“IT运维技术人员（Ops）”之间沟通合作的文化、运动或惯例。透过自动化“软件交付”和“架构变更”的流程，来使得构建、测试、发布软件能够更加地快捷、频繁和可靠。 
 
价值流来自生产线，汽车制造工厂装配线，流经水管的液体或其他物质。 
部署流水线：持续集成，持续交付，持续部署。 

                
        
        文章知识点与官方知识档案匹配，可进一步学习相关知识云原生入门技能树首页概览12783 人正在系统学习中
        
          
            
            
          
            
              
                Smart嵌入式
                
                  
                  微信公众号
                  
                
              
              人工智能赋能嵌入式系统，让你的硬件变的更"
"DevOps 和 CI/CD 流水线的简要介绍 
 如果你问一些人，“ 什么是 DevOps？”，你或许会得到一些不同的回答。 DevOps，就像敏捷，已经发展到涵盖着诸多不同的学科，但大多数人至少会同意这些：DevOps 是一个软件开发实践或一个软件开发生命周期software development lifecycle（SDLC），并且它的核心原则是一种文化上的变革 —— 开发人员与非开发人员呼吸着同一片天空的气息，之前手工的事情变得自动化；每个人做着自己擅长的事；同一时间的部署变得更加频繁；吞吐量提升；灵活度增加。 
 虽然拥有正确的软件工具并非实现 DevOps 环境所需的唯一东西，但一些工具却是必要的。最关键的一个便是持续集成和持续部署（CI/CD）。在流水线环境中，拥有不同的构建阶段（例如：DEV、INT、TST、QA、UAT、STG、PROD），手动的工作能实现自动化，开发人员可以实现高质量的代码，灵活而且大量部署。 
 这篇文章描述了一个构建 DevOps 流水线的五步方法，就像下图所展示的那样，使用开源的工具实现。 
  
   
    
    
     
    
   
  
    Complete DevOps pipeline.png 
   
  
  
  https://linux.cn/article-11307-1.html 
  

                
        
        
"一 最简定义 
DevOps:将命令行（SH）从IT工作中赶走。 
这是在2013年O'Reilly Velocity会议的T恤衫上看到的。 
二 2013维基百科定义 
DevOps(开发Development与运维Operations的复合词)是一种软件开发方法，强调的是软件开发人员与信息技术（IT）专业人员之间的协作、沟通与整合。DevOps是软件开发与IT运维之间相互依赖的一种反应。它旨在帮助组织快速产出产品及服务。 
三 2016维基百科定义 
DevOps(开发Development与运维Operations的组合词)是一种文化、一场运动或实践，强调在自动化软件交付流程及基础设施变更过程中，软件开发人员与其他信息技术（IT）专业人员彼此之间的协作与沟通。它旨在建立一种文化与环境，使构建、测试、软件发布得以快速、频繁以及更加稳定地进行。 
四 2013与2016年定义的区别与进步 
将“软件开发方法”替换为“文化、运动或实践”增加了“自动化”一词将最终的目标由“快速产出产品及服务”替换为“建立一种文化与环境，使构建、测试、软件发布得以快速、频繁以及更加稳定地进行”。由此，Devlop变革的目标从仅仅是速度变为速度、稳定性以及质量。
                
        
        
"本文摘抄自《DevOps的概念与实践》 
1. 什么是DevOps 
通常是指新兴的专业化运动，这种运动提倡开发和IT运维之间的高度协同，从而在完成高频率部署的同时，提高生产环境的可靠性、稳定性、弹性和安全性。 
  
2. DevOps与敏捷有什么不同 
相对于瀑布开发模式，敏捷开发过程的一个基本原则就是以更快的频率交付最小化可用的软件。在敏捷的目标里，最明显的是在每个Sprint的迭代周期末尾，都具备可以交付的功能。（部署的高频率经常会导致部署堆积在IT运维的面前） 
DevOps和敏捷软件开发是相辅相成的，因为它拓展和完善了持续集成和发布流程，因此可以确保代码是生产上可用，并且能确实给客户带来价值。 
DevOps不仅仅创建了一个面向IT运维的工作流，当代码已经开发完成但却无法被部署到生产上时，这些部署都会被堆积到IT运维的面前，客户因此也无法享受到任何价值，而且，部署经常导致IT环境的中断和服务不可用。 
  
3. DevOps与ITIL及ITSM有什么不同 
ITIL：即IT基础架构库(Information Technology Infrastructure Library, ITIL，信息技术基础架构库)由英国政府部门CCTA(Central Computing and Telecommunications Agency)在20世纪80年代末制订，现由英国商务部OGC(Office of Government Commerce)负责管理，主要适用于IT服务管理（ITSM）。ITIL为企业的IT服务管理实践提供了一个客观、严谨、可量化的标准和规范。 
ITSM：即IT服务管理，是一套帮助企业对IT系统的规划、研发、实施和运营进行有效管理的方法，是一套方法论。ITSM起源于ITIL（IT Infrastructure Library，IT基础架构标准库），ITIL是CCTA（英国国家电脑局）于1980年开发的一套IT服务管理标准库。它把英国在IT管理方面的方法归纳起来，变成规范，为企业的IT部门提供一套从计划、研发、实施到运维的标准方法。 
在支撑IT运维的业务流程方面，ITIL和ITSM无疑还是最好的，实际上，它们描述了需要被IT运维支持的功能集合，这些功能集合足以支撑DevOps式的工作流。 
DevOps的目标不仅仅只是增加变更的频率，而且也支持在不中断和破坏当前服务的基础上确保功能部署成功，同时也可以快速检测和修复缺陷。 
  
4. DevOps与可视运维 
可视运维是一个说明性的指南，该指南使得高性能IT运维能顺利实现“从优秀到卓越”的转换，关键点之一是如何控制和减少计划外的工作。 
DevOps不仅聚焦在创建快速和稳定的计划工作流，而且DevOps也有一个更全面的方法来系统的消除计划外的工作，定义开发弹性准则，并负责管理和减少技术债务。 
  
5. DevOps的基本原则 
DevOps的支撑原则--DevOps的三个基本点 
由IT推动的业务价值流，它始于需求定义，进行开发构建，又交给IT运维，最后以一种服务的形式交付给客户。 
绝不传递一个已知缺陷至下游  
  
强调整个系统的性能，而非将性能局限到特定的工作领域里。关于创建从右至左的反馈回路，几乎所有的流程改进计划的目标都是缩短和放大反馈回路，以便可以持续进行必要的修正。打造一种文化用来促进两件事：持续不断的探索精神，勇担风险的精神以及从成功和失败中来学习的能力，同时记得：重复和实践是融汇贯通的前提。 
 探索精神和勇担风险的精神可以确保我们持续改进，持续学习。 
分配时间去改进每天的例行工作，培养一种奖励冒险精神的风气，同时主动引入故障到系统中，从而提高弹性。 
  
6. DevOps模式的应用领域 
 将开发延伸至生产中--包括拓展持续集成和发布功能至生产，集成QA和信息安全至整个工作流，确保代码和环境可在生产中直接部署向开发中加入生产反馈--包括建立开发和IT运营事件的完整时间表用于帮助事件的解决，使得开发融入无指责的生产反思，尽可能使开发可以自助服务，同时创建信息指示器来表明本地的决策如何影响全局的目标。开发嵌入到IT运维中--包括开发投入到整个生产问题处理链，分配开发资源用于生产问题管理，并协助退回技术债务，并且开发为IT运维提供交叉培训，增加IT运维处理问题的能力，从而降低升级问题的数量。将IT运维嵌入至开发--包括嵌入和联络IT运维资源至开发，帮助开发创建为运维使用的可重用的用户故事，定义一些可以被所有项目共用的非功能性需求。 
  
7. DevOps的价值 
3个业务优势： 
产品快速推向市场提高质量提高组织的有效性：比如将时间花在价值增加活动中，减少浪费，同时交付更多的价值至客户手中。 
  
8. 信息安全和QA如何融入DevOps的工作流 
DevOps的高部署频率通常会给QA和信息安全带来很大的压力！ 
相较于标准的功能单元测试，DevOps工作流依赖于检测和恢复更多一点。当开发以软件套件的方式交付的时候，部署变更和补丁就比较困难，同时QA也严重依赖代码检测来验证功能的正确性。另一方面，当软件以服务的形式交付，缺陷就可以被很快修复。而且，QA可以减少测试依赖，取而代之的更多依赖缺陷的生产监控，只要缺陷能被快速的修复。 
代码故障恢复可借助于“功能标签”等手段，通过以配置的形式来启用或禁用某些代码功能，从而达到避免推出一个全功能部署，而只部署通过测试的功能至生产。 
当功能不可用或性能下降等情况时，依赖于检测和恢复进行QA将会一种更好的选择，但当出现损失保密性或数据和系统不一致性的时候，就需要在部署之前进行充分的测试，而不是检测和恢复了！
                
        
        
"DevOps 工作流程 
  DevOps 工作流程提供了输入顺序的直观概述。 此外，它还告诉您执行了哪个操作，并为操作过程生成了输出。    DevOps 工作流程允许分离和安排用户最需要的工作。 此外，它还可以在配置工作中反映其理想过程。 
DevOps 原则 
  DevOps 的主要原理是持续交付、自动化以及对反馈的快速反应。 
端到端责任：DevOps 团队需要提供性能支持，直到它们寿终正寝。它提高了工程产品的责任感和质量。持续改进：DevOps 文化注重持续改进以最大程度地减少浪费。持续加快所提供的产品或服务的增长。自动化一切：自动化是 DevOps 流程的基本原则。这用于软件开发，也用于整个基础架构。以客户为中心的行动：DevOps 团队必须以客户为中心，因此要对产品和服务持续投资。监视和测试所有内容：DevOps团队需要制定可靠的监视和测试程序。作为一个团队工作：在 DevOps 文化中，已经定义了设计人员、开发人员和测试人员的角色。他们需要做的就是作为一个团队进行全面协作。   这些原则是通过多种 DevOps 实践来实现的，包括频繁部署、QA 自动化、持续交付、尽早验证想法以及团队内部协作。 
DevOps 实践 
  一些确定的 DevOps 做法是： 
自助服务配置持续构建持续集成持续交付增量测试自动配置自动发布管理
                
                
                
        
        
"为了交付应用程序，开发和运营都扮演着至关重要的角色。部署包括需求分析、设计、开发以及软件组件或框架的测试。   运营包括软件的管理流程，服务和支持。当开发和运营结合在一起进行协作时，DevOps 架构就是解决部署和运营术语之间差距的解决方案。因此，交付可以更快。   DevOps 架构用于托管在云平台上的应用和大型分布式应用。 DevOps 架构中使用了敏捷开发，因此集成和交付可以是持续的。当开发和运营团队彼此独立工作时，设计、测试和部署将非常耗时。并且，如果术语彼此不一致，则可能会导致交货延迟。因此，DevOps 使团队能够改变他们的缺点并提高生产率。   以下是 DevOps 架构中使用的各种组件：  
1) 构建 
  在没有DevOps的情况下，将根据预估的固定硬件分配各自的使用情况来评估资源消耗的成本。借助 DevOps、云的使用，资源共享就成为可能，可根据用户需要来构建，这是一种控制资源或容量使用的机制。 
2) 编码 
  使用 Git 这样的工具可以更好地使用代码，以确保代码为业务而编写，帮助跟踪变更、获取实际和预期输出间差异背后原因的通知、并在必要时反馈到原始代码。代码可以被安放于适当的文件、文件夹等中，并且可以重复使用。 
3) 测试 
  应用将在测试后准备好用于生产。在手动测试的情况下，它将花费更多的时间进行测试并将代码移至输出。测试可以自动化，从而减少测试时间。脚本的自动化运行将消除许多手动步骤，可减少将代码部署到生产环境的时间。 
4) 计划 
  DevOps 使用敏捷方法来计划开发。运营和开发团队保持同步，有助于组织的计划工作以提高生产率。5) 监控   连续监控用于识别任何故障风险。 而且，它有助于准确地跟踪系统，以便可以检查应用的健康状况。对于可以通过许多第三方工具（例如 Splunk）监视日志数据的服务，监视变得更加舒适。 
6) 部署 
  许多系统可以支持调度程序进行自动部署。云管理平台使用户能够捕获准确的洞察、查看优化方案，并通过部署仪表板来分析趋势。 
7) 运营 
  DevOps 改变了传统的各自进行的开发和测试方式。团队以协作的方式运作，两个团队在整个服务生命周期中都积极参与。运营团队与开发人员进行交互，然后根据 IT 和业务需求来制定监视计划。 
8) 发布 
  部署到环境可以通过自动化完成。但部署到生产环境时，要通过手动触发来完成。版本管理中涉及生产环境中的许多流程通常使用手动部署，以减轻对客户的影响。
                
                
                
        
        
"DevOps工具链技术图谱 
“不就是部署xxx软件嘛？简单！"" 其实也没那么简单，要想尽量提高研发的效率，质量， 还有不少部署之外的工作要做。 包括 集成、易用性优化、用户体验优化、多租户规范、文档模板、代码模板等。 下面说说这部分落地工作的一些心得。  简单列举了各工具链部署信息。 
需求项选型/可选产品下载地址与部署说明配置举例域名分配用户目录openldap/Microsoft ADhttps://docs.microsoft.com/zh-cn/windows-server/2C/8G/50G/200Gad.xxx.com企业知识库confluencehttps://www.atlassian.com/software/confluence2C/8G/50G/200Gwiki.xxx.com敏捷工具Jira softwarehttps://www.atlassian.com/software/Jira2C/8G/50G/100Gjira.xxx.com代码仓库gitlabhttps://gitlab.com/gitlab-org/gitlab-ce/2C/8G/50G/100Ggit.xxx.comCICD 工具gitlab-runner/jenkinshttps://docs.gitlab.com/runner/2C/8G/50G/200Gcicd.xxx.com静态扫描sonarqubehttps://www.sonarqube.org2C/8G/50G/200Gsonar.xxx.comartifact构件仓库nexus/jfroghttps://www.sonatype.com/download-oss-sonatype2C/8G/50G/200Gnexus.xxx.comdocker 镜像库harborhttps://goharbor.io/2C/8G/50G/500Gharbor.xxx.com企业网盘nextcloudhttps://nextcloud.com/2C/4G/50G/200Gdoc.xxx.com工单系统Jira servicedeskhttps://www.atlassian.com/software/jira/service-desk2C/8G/50G/200Gdesk.xxx.comxxxxxxxxxxxxxx 
企业知识库 confluence与draw.io 
回顾，比较有意义的要点： 
使用域名，使用https，与AD集成。引入画图插件。各类文档都画图需求，不能画图大家不喜欢用。页面树结构模板，对应敏捷开发全过程。创建好页面树结构及模板，囊括敏捷开发过程各活动。多租户、多部门租户空间规范。空间、项目、部门的归属、权限关系，支撑多个业务部门。持续优化体验。尤其是响应速度。刚创建时，建设好公司空间、技术团队空间、项目空间模板。 
下图为支持draw.io 画图的某项目空间截图。左侧页面树结构、页面的画图支持是提高效率关键。  下图为页面树结构模板，注意左侧的目录树结构，跟业务高度相关，我们这里跟敏捷开发的各个活动相关。  
企业网盘 nextcloud 
类似于百度网盘、QQ文档之类的东西。私有化部署。 主要用于 office三件套 word、excel、powerpoint 的协作共享。 文档组织，涉及机密就不截图了。  
需求库 jira 
回顾，比较有意义的要点： 
使用域名，使用https，与AD集成。速度优化。开始使用很慢，QA们意见很大，优化后再以没听到抱怨。和confluence 、gitlab等集成。使用报表。项目经理、各个开发、QA视角的报表。装点插件，不要多，要用好用精。  某业务部门视角项目报表截图：  某个项目，项目经理视角（关心Sprint整体完成情况）：  
代码库 gitlab 
使用域名，使用https，与AD集成。代码管理和企业组织架构对应。做好部门归属、责任人归属、权限管控等。重视CICD 二次开发，重视简单性、可复用性、通用性。Projects 1600+ 什么反应，如果是Jenkins，1000+ jenkinsfile，几个运维能搞定？  支持dev、test多环境的流水线CICD截图：  
企业业务部门对应一级GROUP的例子：  模板化，代码目录结构（举例docker/）：  
制品库 nexus 
使用域名，使用https，与AD集成。多部门使用，要考虑release不要被覆盖。  
镜像库 harbor 
使用域名，使用https，与AD集成。项目和NS有简单对应关系。如一个项目一个NS。  
扫描库 sonarqube 
使用域名，使用https，与AD集成。与CICD 集成，自动化，零人工介入。sonarqube 的KEY使用Git Project name名称。  
服务台 servicedesk 
使用域名，使用https，与AD集成。工作中，识别关键流程，沉淀成流程。持续优化、改进流程。包含多层次的服务。包括IaaS云平台、公有云、私有云、XX网络服务、PaaS服务，等。  
总结 
解决有无问题，持续优化改进。换位思考，多角色角度思考，并进行平衡改进。我是 部门Leader、项目经理、技术经理、QA、前后端开发、运维等，他们的需求、痛点。
                
                
                
        
        
"Azure DevOps 
  Azure DevOps 也称为 Microsoft Visual Studio 团队服务（VSTS）。它是为云构建的一组协作开发工具。 VSTS 通常被用作独立术语，Azure DevOps 是一个由几种不同产品组成的平台，例如： 
Azure 测试计划Azure 看板Azure 存储库Azure 流水线Azure 制品   Azure DevOps 是将创意转化为工作软件所需的一切。您可以使用 Azure 工具计划项目。   Azure 流水线是 Azure DevOps 的 CI 组件。Azure 流水线是微软的云原生连续集成服务器，它使团队可以从云中连续构建、测试和部署所有组件。Azure 流水线可以连接到任意数量的源代码存储库，例如 Azure Repos、GitHub、Tests，以获取代码和制品以进行应用交付。 
Azure DevOps 服务器 
  Azure DevOps Server 是微软的一个产品，提供版本控制、需求管理、报告、软件库管理、项目管理、测试、自动生成和发布管理功能。它涵盖了应用的整个生命周期，并启用了 DevOps 功能。   Azure DevOps 可以用作众多集成开发环境的后端，但针对 Microsoft Visual Studio 和 Eclipse 的所有平台上进行了定制。 
Azure DevOps 服务 
  微软宣布在 Microsoft Azure 平台上发布该软件即 Visual Studio 的服务产品，当时微软将其称为在线Visual Studio。   微软为 Azure DevOps 服务提供了 Visual Studio，基本和利益干系人访问级别。基本计划是免费的，最多可容纳五个用户。订阅了 Visual Studio 的用户可以免费添加到项目中。
                
                
                
        
        
"DevOps 是两个单词的复合，一个是 Development，另一个是 Operations。它是一种共同提升开发和运维过程的文化。   DevOps 教程将帮助你学习 DevOps 基础知识并带你深入了解各种 DevOps 工具，譬如：Git、Ansible、Docker、Puppet、Jenkins、Chef、Nagios 和 Kubernetes。 
什么是 DevOps? 
  DevOps 是两个单词的复合，其一是软件开发，其二是运维。这就允许一个团队掌握整个应用生命周期，从开发到测试、部署以及运维。DevOps 有助于减少软件开发工程师、质量保障（QA）工程师和系统管理者之间的断层。    DevOps 提升开发和运维团队间的协作，通过自动化和可重复的方式将将代码更快地部署到生产。   DevOps 有助于加快组织交付应用和服务的速度。它也使得组织更好地服务客户，以增强市场竞争力。   DevOps 也可以被定义成开发和 IT 运维更好地沟通和协作的序列。   DevOps 已经成为企业或组织最具价值的业务准则之一。在 DevOps 的帮助下，应用交付的质量和速度已经得到了极大的改善。   DevOps 只是使“开发人员”和“运营人员”一起工作的一种实践或方法。DevOps 代表着 IT 文化的一种变化，它完全专注于在面向系统方法的上下文中通过采用敏捷实践来快速交付IT服务。   DevOps 就是关于运营和开发流程的集成。 已采用DevOps的组织注意到，软件质量提高了22％，应用程序部署频率提高了17％，客户满意度提高了22％。 成功实施 DevOps 后，收入增长了19％。 
为什么需要 DevOps? 
  接下来，我们需要了解为什么我们需要 DevOps 而不是其他方法。 
运营和开发团队完全孤立地工作。在设计-构建之后，分别进行测试和部署。 这就使得他们比实际构建周期花费更多时间。在不使用 DevOps 的情况下，团队成员花费大量时间在设计，测试和部署上，而不是构建项目。手动代码部署会导致生产中的人为错误。编码团队和操作团队有各自的时间表、并且不同步，从而导致进一步的延迟。 
DevOps 历史 
2009年，第一届名为 DevOpsdays 的会议在比利时根特举行。 比利时顾问和 Patrick Debois 共同创立了此次会议。2012年，Puppet 的 Alanna Brown 提出并构思了 DevOps 状态报告。2014年，Nicole Forsgren、Jez Humble、Gene Kim 等人发布了年度 DevOps 状态报告。他们发现，DevOps 的采用也在 2014 年加速发展。2015年，妮可·福斯格伦（Nicole Forsgren）、吉恩·金（Gene Kim）和杰兹·汉布尔（Jez Humble）创立了 DORA（DevOps研究与任务）。2017年，妮可·福斯格伦（Nicole Forsgren），吉恩·金（Gene Kim）和杰兹·汉布尔（Jez Humble）发表了“加速：建立和扩展高性能技术组织”。 
DevOps 架构特性 
  以下是 DevOps 架构的一些关键功能，例如：  
 
1)自动化 
  自动化可以减少时间消耗，尤其是在测试和部署阶段。 生产率提高了，并且自动化使发布更快。 这将导致迅速捕获错误，因此可以轻松修复它。 对于持续交付，每个代码都是通过自动化测试，基于云的服务和构建来定义的。 可以使用自动部署来促进生产。 
2) 协作 
  开发和运营团队作为 DevOps 团队进行协作，随着团队生产力的提高，生产力不断提高，从而改善了文化模型、增强了责任感和所有权。 这些团队分担责任并紧密同步工作，进而加快了生产部署速度。 
3)集成 
  应用程序需要与环境中的其他组件集成。 集成阶段是将现有代码与新功能结合起来，然后进行测试。 持续的集成和测试可以实现持续的开发。 发布和微服务的频率导致重大的运营挑战。 为了克服这些问题，就要实施持续集成和持续交付，以便以更快，更安全和可靠的方式交付。 
4)配置管理 
  配置管理确保应用程序仅与那些与其运行环境有关的资源进行交互。 在将应用程序的外部配置与源代码分开的情况下，不会创建配置文件。 配置文件可以在部署过程中编写，也可以在运行时加载，具体取决于运行环境。 
DevOps 的优点和缺点 
  以下是DevOps对业务可能具有的一些优点和缺点，例如：优点 
DevOps 是快速开发和部署应用程序的绝佳方法。对市场变化做出更快的响应，以改善业务增长。DevOps通过减少软件交付时间和运输成本来提升业务利润。DevOps 清除了描述过程，从而使产品开发和交付更加清晰。改善了客户体验和满意度DevOps 简化了协作，并将所有工具都放置在云中供客户访问。DevOps 意味着集体责任，可以提高团队参与度和生产力。 
缺点 
DevOps 专业人士或专家的开发人员较少。使用 DevOps 进行开发非常昂贵。行业在短时间内很难采用新的DevOps技术。在自动化项目的持续集成中，缺乏DevOps知识可能是一个问题。 
前提条件 
  要学习 DevOps，您应该具有 Linux 的基本知识和至少一种脚本语言。 
受众 
  我们的 DevOps 教程旨在帮助初学者和专业人士。
                
                
                
        
        
"什么是Azure DevOps 
1、师出名门：是微软推出的一个集项目管理、开发管理、测试管理的一个服务套件。 
2、历史：前身是微软在2005年推出的Team foundation Server一个专门用来做持续集成、持续交付的产品。 
Azure DevOps的五大核心部分 
Azure Boards(面板) 
Azure Devops Board作为管理项目的工具平台。它提供了工作项记录以及跟踪，可视化看板，可定制化的Dashboard，以及集成有丰富的报表功能。 用看板的形式来可视化你的工作。它包含了工作项（Work Item）、板块（Board）、积压工作（Backlog）、冲刺或迭代（Sprint）以及查询（Query）这个部分。 
Azure Repos(代码仓库) 
Azure Repos 提供给开发团队的代码仓库对代码进行统一、有效的管理。 
Azure Pipelines(流水线) 
Azure Pipelines 是Azure DevOps核心部分，是Azure DevOps负责持续集成、持续交付的模块。 
Azure Test Plans(测试计划) 
Azure Test Plans是提供给测试团队管理测试计划、测试套件、测试用例的工具 
Azure Artifacts(包管理) 
包管理服务，相对于maven、pip工具。 
优势 
1、对比起市面上的JIRA、jenkins等其他敏捷开发工具，Azure DevOps在页面逻辑更加清淅 
2、背后公司给予更强大的支持 
3、扩展市场的插件更全面、更规范，更好的提高工作效率 
版本选择 
Azure DevOps分为云版本和本地版本 
1、云版本只有英文版本，本地版本支持多种语言版本 
2、小部分插件只有云版本进行使用 
3、云版本5人以下是免费使用的 
总结 
Azure Devops给我们带来的是： 
1、更好的团队协作效率。 
2、更安全的持续集成、持续交付 
3、更简单的测试管理 
4、更快响应运营管理
                
                
                
        
        
"DevOps的应用 
 
 
   
 
 
  
  DevOps的核心理念是通过各种方法在各个团队之间牵线搭桥，让他们相互走到对方的世界中去，了解彼此，并提供自己的想法，帮助对方，推动团队之间的协同与合作。为此，需要在三个方面努力。 
  1．人员 
  一方面，对现有人员进行培训，鼓励他们了解别的团队面临的工作挑战等，让他们用自己的特长去审视和帮助别的团队；另一方面，想办法招一些全面的技术人才，在不同团队之间搭出一些适用的桥来。再进一步结合DevOps，解决团队之间实际的配合问题。 
  管理人员关注团队之间的沟通机制及氛围： 
  以新版本能在生产环境中可靠、稳定运行为目标，形成协作的氛围。 
  1）在项目的早期阶段，运维、开发与测试人员就进行沟通，可能的话坐在一起，面对面沟通。  
 2）在项目上线前，除了测试功能，还要关注部署、备份、监控、安全以及配置管理等，在早期发现的问题越多，越能减少后期的问题并避免影响用户体验。 3）建立各个团队的核心成员定期沟通机制。 2）了解运维如何定位并解决故障、如何监控系统的运行情况等。 3）从运维的视角修改代码，方便运维人员进行日常的变更与调整、监控与报警。 2）开发人员与测试人员一起发布版本到测试环境中；让代码在最终上线前多一层风险缓冲。 3）测试人员参与到持续测试中，实现自动化集成测试等。 2）Automation，自动化平台，主要包括自动化打包、部署和测试等部分。 3）Cloud，IaaS云或容器云基础设施平台，主要包括自动化管理和弹性可伸缩的云服务等部分。 
  让开发人员了解运维工作的关注点及挑战，并从开发视角帮助运维： 
  1）开发人员参与运维团队的内部培训，了解线上的系统。  
  让QA测试人员了解开发工作的关注点及挑战，并从测试角度帮助开发： 
  1）QA测试人员为开发人员搭建测试环境，从安装、配置管理等方面采用和生产环境一样的方式。  
  2．流程 
  在研发初期，让开发、测试和运维人员等参与进来，一起搭建测试环境，验证想法，一起为产品的上线努力。出现问题时，一起想办法找到问题的根源，避免相互推托，将解决方案落实在以后的研发过程中。另外，从绩效考核上也需要考虑协作因素。 
  3．工具 
  说实在的，大家针对DevOps的讨论更多的可能是工具方面。无疑，快速的系统部署和自动化从源码开发到测试等方面的工具显得尤为重要。下面我们通过一张图来梳理DevOps涉及的宏观工具系统，即技术方面的应用，如下图所示。 
    
  不难理解，实现DevOps的3个核心基础平台有： 
  （1）SCM（供应链管理） 
  SCM，供应链管理平台，主要包括应用源码、配置数据、运行环境等部分。SCM部分是DevOps最底层和最重要的基础设施，所放置的内容可以分成两个层次，分别为AppCode开发的应用程序代码和EnvCode环境相关的代码，后者可以进一步细化成环境配置（Config）和配置数据（ConfigData）。环境配置是针对当前应用基本上固定的环境配置；而配置数据是需要在部署的同时根据情况进行调整的数据，如配置文件、部署IP地址、用户名和密码等。 
  （2）Automation（自动化系统） 
  自动化在DevOps中的作用是巨大的，这部分的工作一般由Jenkins、Maven等持续集成系统串联实现。为了完成应用从源代码到可发布的产品版本，还必须处理从代码编译、打包，到部署、测试等诸多环节。比如使用Ansible、JUnit/Pytest、Selenium等自动化工具，实现满足业务场景的部署需求和测试需求等。 
  （3）Cloud（云服务） 
  虚拟化和云计算的出现是推动DevOps发展的重要因素之一，用户可以将前面提及的供应链管理系统和自动化系统运行在虚拟化、云平台上，或者将作业系统运行在这些平台上。比如将持续集成系统运行的各种编译、打包、构建和测试等Job任务放在容器云或IaaS云的VM上与主机环境隔离，并当这些任务执行完毕后，即可立即销毁释放资源，需要时又自动构建环境——即基础设施平台的云化和业务流程操作的云化。 
  

                
        
        
"最近给某银行做运维规划，由于此银行在推进持续发布和部署，客户明确提出要考虑微服务的管理。恰巧2020年也考取了DOM，借此机会，聊聊DevOps这个话题。由于这个话题过大，一篇博文肯定写不完，那么分成几次来写吧。这篇，先写DevOps的方法论。 
 
DevOps产生的背景和解决的问题 
程序员写出的代码，生产的软件功能要被真正的客户使用，必须部署到生产环境，才能产生价值。大部分公司每月，甚至每季度，半年才进行一次生产的发布，大大延缓了代码产生价值的效率。尤其是很多公司实行了敏捷之后，提升了代码开发的效率，却发现代码部署到生产环境，是最大的瓶颈。另外，大部分公司都实行的是烟囱式的组织架构管理，写代码的人在开发部门，基础设施维护在运维部门，开发部门的目的是让代码快速上线，而运维部门的职责是一定程度上维护系统的稳定性，很多公司的开发人员是没有生产环境权限的，都需要运维人员来帮忙部署。由于出发点不同，工作性质不同，开发和运维长期处于各种冲突中。 
为了解决这个问题，技术人员开发出一系列工具，可以使代码快速地、自动地部署到环境中，这需要从软件架构到基础设施环境，一系列的变化。开发和运维人员，需要加强合作，才能实现。这就是Development+Operation=DevOps。 
在2008年加拿大多伦多的敏捷大会上，Patrick Debois和Andrew Clay Schafer主持了一场研讨，提倡将敏捷原则应用到基础设施而不是应用程序的代码上。在2009年的Velocity大会上，John Allspaw和Paul Hammond分享了题为“每日10次部署，Dev和Ops在Flickr的协作”的演讲。在2009年比利时的根特市（Patrick Debois)的居住地，Patrick发起了第一次DevOpsDays的活动，“DevOps”术语也应运而生。 
由此可见，DevOps从诞生之时，就是为了解决如何可以使得代码快速部署的问题，从而用技术手段来解决开发和运维的部门冲突，推倒开发和运维之间的部门之墙。 
 
DevOps的知识体系 
DevOps发展至今，不仅仅是持续发布和部署（CI/CD)，它的知识体系包含了更广阔的内容。DevOps思想包括了一个基础，三个支柱：以精益为基础，涵盖了敏捷，持续交付和轻量级的ITSM，如下图所示： 
1. 精益Lean: 精益思想（Lean Thinking）源于20世纪80年代日本丰田发明的精益生产（Lean Production）方式，精益生产方式造成日本汽车的质量与成本优势。精益思想更进一步从理论的高度归纳了精益生产中所包含的新的管理思维，并将精益方式扩大到制造业以外的所有领域，尤其是第三产业，把精益生产方法外延到企业活动的各个方面，不再局限于生产领域，从而促使管理人员重新思考企业流程，消灭浪费，创造价值，其目标是以最小的浪费来实现消费者的最大价值。精益是一种思考和运营的持续方式，而不是一次性的战术或成本降低的努力。 
精益五原则：识别价值，映射价值流，流畅化作业，建立拉动，持续改进。精益提倡消除浪费，并提出了八种浪费：库存，才能，等待，动作，缺陷，运输，过度加工，过度生产。 
可以说软件工程领域目前提倡的聚焦价值，从价值流出发，消除浪费等思潮都是源于精益思想，精益思想又生于制造业。 
2. 敏捷： 介绍敏捷的书太多了，这里不再做过多的介绍。对比瀑布开发模式的大步迈进，敏捷就是小步快跑。 
3. 持续交付CI/CD：让软件产品的产出过程在一个短周期内完成，以保证软件可以稳定、持续的保持在随时可以发布的状况。它的目标在于让软件的构建、测试与发布变得更快以及更频繁。我更愿意把持续交付理解为工具和技术，也认为这是使得DevOps方法论可以落地的基石，也可以说先有了技术工具实现了持续交付，才提出了DevOps思想。 
4. 轻量级ITISM：提及ITSM，一定会想到ITIL。ITIL作为ITSM的最佳实践，从服务的视角，以流程为方法，将软件的运维重复性、繁琐的工作从技术管理转为流程管理，优化分工，促进协作。ITIL发展至今，一定规模的运维团队一定程度上都实施了ITIL流程管理，其流程理念已经深入人心。但是目前在DevOps的推动下，运维部门面临一系列的转型，ITIL如何适应DevOps发展，还在进一步实践和探讨中。 
 
 
 

                
        
        
"DevOps是一种研发文化，它促进开发团队和运维团队之间更好地协作，以自动化和可重复的方式，更快地将代码部署到生产环境中。DevOps是development和operations两个单词的组合。 
DevOps有助于提高团队交付产品和服务的效率，它使团队能够更好地为客户服务，提高市场竞争力。 
简单地说，DevOps可以定义为开发团队和运维团队之间通力协作、持续集成的一种工作模式。 
 
 
 章节 
 DevOps – 为什么DevOps – 与传统方式区别DevOps – 优势DevOps – 不适用DevOps – 生命周期DevOps – 与敏捷方法区别DevOps – 实施原则DevOps – 工程师职责DevOps – 自动化工具DevOps – 总结 

                
                
                
        
        
"文章目录 
 一、DevOps介绍二、Code阶段工具2.1 Git安装2.2 GitLab安装 
  三、Build阶段工具四、Operate阶段工具4.1 Docker安装4.2 Docker-Compose安装 
  
 
 
一、DevOps介绍 
软件开发最开始是由两个团队组成： 
开发计划由开发团队从头开始设计和整体系统的构建。需要系统不停的迭代更新。运维团队将开发团队的Code进行测试后部署上线。希望系统稳定安全运行。 
这看似两个目标不同的团队需要协同完成一个软件的开发。在开发团队指定好计划并完成coding后，需要提供到运维团队。运维团队向开发团队反馈需要修复的BUG以及一些需要返工的任务。 
这时开发团队需要经常等待运维团队的反馈。这无疑延长了事件并推迟了整个软件开发的周期。 
会有一种方式，在开发团队等待的时候，让开发团队转移到下一个项目中。等待运维团队为之前的代码提供反馈。可是这样就意味着一个完整的项目需要一个更长的周期才可以开发出最终代码。 
基于现在的互联网现状，更推崇敏捷式开发，这样就导致项目的迭代速度更快，但是由于开发团队与运维团队的沟通问题，会导致新版本上线的时间成本很高。这又违背的敏捷式开发的最初的目的。 
那么 如果让开发团队和运维团队整合到成一个团队，协同应对一套软件呢？这就被称为DevOps。 
DevOps，字面意思是Development &Operations的缩写，也就是开发&运维。虽然字面意思只涉及到了开发团队和运维团队，其实QA测试团队也是参与其中的。 
DevOps 
这表明DevOps是一个不断提高效率并且持续不断工作的过程。 
DevOps的方式可以让公司能够更快地应对更新和市场发展变化，开发可以快速交付，部署也更加稳定。核心就在于简化Dev和Ops团队之间的流程，使整体软件开发过程更快速。 
 
 整体的软件开发流程包括： 
 PLAN：开发团队根据客户的目标制定开发计划CODE：根据PLAN开始编码过程，需要将不同版本的代码存储在一个库中。BUILD：编码完成后，需要将代码构建并且运行。TEST：成功构建项目后，需要测试代码是否存在BUG或错误。DEPLOY：代码经过手动测试和自动化测试后，认定代码已经准备好部署并且交给运维团队。OPERATE：运维团队将代码部署到生产环境中。MONITOR：项目部署上线后，需要持续的监控产品。INTEGRATE：然后将监控阶段收到的反馈发送回PLAN阶段，整体反复的流程就是DevOps的核心，即持续集成、持续部署。 
 
为了保证整体流程可以高效的完成，各个阶段都有比较常见的工具，如下图： 
软件开发过程&涉及工具 
最终可以给DevOps下一个定义：DevOps 强调的是高效组织团队之间如何通过自动化的工具协作和沟通来完成软件的生命周期管理，从而更快、更频繁地交付更稳定的软件。 
自动化的工具协作和沟通来完成软件的生命周期管理。 
二、Code阶段工具 
在code阶段，我们需要将不同版本的代码存储到一个仓库中，常见的版本控制工具就是SVN或者Git，这里我们采用Git作为版本控制工具，GitLab作为远程仓库。 
2.1 Git安装 
https://git-scm.com/ 
2.2 GitLab安装 
单独准备服务器，采用Docker安装 
查看GitLab镜像： 
docker search gitlab
1 
拉取GitLab镜像： 
docker pull gitlab/gitlab-ce
1 
准备docker-compose.yml文件： 
version: '3.1'
services:
  gitlab:
    image: 'gitlab/gitlab-ce:latest'
    container_name: gitlab
    restart: always
    environment:
      GITLAB_OMNIBUS_CONFIG: |
        external_url 'http://192.168.11.11:8929'
        gitlab_rails['gitlab_shell_ssh_port'] = 2224
    ports:
      - '8929:8929'
      - '2224:2224'
    volumes:
      - './config:/etc/gitlab'
      - './logs:/var/log/gitlab'
      - './data:/var/opt/gitlab'
1234567891011121314151617 
启动容器： 
docker-compose up -d
1 
访问GitLab首页： 
首页 
查看root用户初始密码： 
docker exec -it gitlab cat /etc/gitlab/initial_root_password
1 
初始密码 
登录root用户： 
登录成功后跳转页面 
第一次登录后需要修改密码： 
修改密码 
搞定后，即可像Gitee、GitHub一样使用。 
三、Build阶段工具 
构建Java项目的工具一般有两种选择，一个是Maven，一个是Gradle。这里我们选择Maven作为项目的编译工具。 
Maven的安装与配置流程： 
安装Maven配置环境变量配置本地仓库配置镜像配置JDK 
具体的安装配置流程后面会做一个详细的讲解，这里必须确保配置好Maven仓库私服以及JDK编译版本。 
四、Operate阶段工具 
部署过程，会采用Docker进行部署，暂时只安装Docker即可，后续还需安装Kubenetes。 
4.1 Docker安装 
准备测试环境&生产环境 
下载Docker依赖组件： 
yum -y install yum-utils device-mapper-persistent-data lvm2
1 
设置下载Docker的镜像源为阿里云： 
yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo
1 
安装Docker服务： 
yum -y install docker-ce
1 
安装成功后，启动Docker并设置开机自启： 
# 启动Docker服务
systemctl start docker
# 设置开机自动启动
systemctl enable docker
1234 
测试安装成功： 
docker version
1 
效果 
4.2 Docker-Compose安装 
下载Docker/Compose：https://github.com/docker/compose 
将下载好的docker-compose-Linux-x86_64文件移动到Linux操作系统：…… 
设置docker-compose-Linux-x86_64文件权限，并移动到$PATH目录中： 
# 设置文件权限
chmod a+x docker-compose-Linux-x86_64
# 移动到/usr/bin目录下，并重命名为docker-compose
mv docker-compose-Linux-x86_64 /usr/bin/docker-compose
1234 
测试安装成功： 
docker-compose version
1 
效果
                
                
                
        
        文章知识点与官方知识档案匹配，可进一步学习相关知识云原生入门技能树云原生环境小结云原生的分层12783 人正在系统学习中"
"DevOps（英文Development和Operations的组合）是一组过程、方法与系统的统称，用于促进开发（应用程序/软件工程）、技术运营和质量保障（QA）部门之间的沟通、协作与整合。它的出现是由于软件行业日益清晰地认识到：为了按时交付软件产品和服务，开发和运营工作必须紧密合作。 
可以把DevOps看作开发（软件工程）、技术运营和质量保障（QA）三者的交集。  传统的软件组织将开发、IT运营和质量保障设为各自分离的部门。在这种环境下如何采用新的开发方法（例如敏捷软件开发），这是一个重要的课题：按照从前的工作方式，开发和部署不需要IT支持或者QA深入的、跨部门的支持，而却需要极其紧密的多部门协作。然而DevOps考虑的还不止是软件部署。它是一套针对这几个部门间沟通与协作问题的流程和方法。 
需要频繁交付的企业可能更需要对DevOps有一个大致的了解。Flickr发展了自己的DevOps能力，使之能够支撑业务部门“每天部署10次”的要求──如果一个组织要生产面向多种用户、具备多样功能的应用程序，其部署周期必然会很短。这种能力也被称为持续部署，并且经常与精益创业方法联系起来。 从2009年起，相关的工作组、专业组织和博客快速涌现。  DevOps的引入能对产品交付、测试、功能开发和维护（包括──曾经罕见但如今已屡见不鲜的──“热补丁”）起到意义深远的影响。在缺乏DevOps能力的组织中，开发与运营之间存在着信息“鸿沟”──例如运营人员要求更好的可靠性和安全性，开发人员则希望基础设施响应更快，而业务用户的需求则是更快地将更多的特性发布给最终用户使用。这种信息鸿沟就是最常出问题的地方。 
以下几方面因素可能促使一个组织引入DevOps：  使用敏捷或其他软件开发过程与方法  业务负责人要求加快产品交付的速率  虚拟化和云计算基础设施（可能来自内部或外部供应商）日益普遍  数据中心自动化技术和配置管理工具的普及  有一种观点认为，占主导地位的“传统”美国式管理风格（“斯隆模型 vs 丰田模型”）会导致“烟囱式自动化”，从而造成开发与运营之间的鸿沟，因此需要DevOps能力来克服由此引发的问题。  DevOps经常被描述为“开发团队与运营团队之间更具协作性、更高效的关系”。由于团队间协作关系的改善，整个组织的效率因此得到提升，伴随频繁变化而来的生产环境的风险也能得到降低。 
DevOps对应用程序发布的影响  在很多企业中，应用程序发布是一项涉及多个团队、压力很大、风险很高的活动。然而在具备DevOps能力的组织中，应用程序发布的风险很低，原因如下：  与传统开发方法那种大规模的、不频繁的发布（通常以“季度”或“年”为单位）相比，敏捷方法大大提升了发布频率（通常以“天”或“周”为单位）  减少变更范围与传统的瀑布式开发模型相比，采用敏捷或迭代式开发意味着更频繁的发布、每次发布包含的变化更少。由于部署经常进行，因此每次部署不会对生产系统造成巨大影响，应用程序会以平滑的速率逐渐生长。加强发布协调靠强有力的发布协调人来弥合开发与运营之间的技能鸿沟和沟通鸿沟；采用电子数据表、电话会议、即时消息、企业门户（wiki、sharepoint）等协作工具来确保所有相关人员理解变更的内容并全力合作。强大的自动化部署手段能够确保部署任务的可重复性、减少部署出错的可能性。
                
        
        
"文章目录 
 参考资料一、落实敏捷流程1、找到合适的试点项目2、应对多变的业务3、真正意义上的“干掉变化” 
  二、使用精益看板三、做好配置管理1、版本变更标准化2、将一切纳入版本控制3、全流程可追溯4、单一可信数据源 
  四、分支管理策略五、持续集成 
 
 《DevOps如何落地实施》一共两篇笔记： 
 
【DevOps】DevOps如何落地实施（一） 【DevOps】DevOps如何落地实施（二） 
参考资料 
 
 《DevOps实战笔记》 极客时间，石雪峰 
 
一、落实敏捷流程 
1、找到合适的试点项目 
贴近核心业务倾向敏捷业务改进意愿优先 
2、应对多变的业务 
开发更少的功能，聚焦用户价值，持续快速验证。 
3、真正意义上的“干掉变化” 
不是使用了一些敏捷工具，团队就成了敏捷开发模式 
双周迭代。每日站会。站会意义是做到风险点上报和预测，商量具体的对策。不是“工作汇报”需求拆分。 
二、使用精益看板 
很多人使用Jira看板，原因就是可以更加直观的观测到每一个需求的当前进度。这就是一个典型的可视化板。 
看板系统不是可视化系统，看板系统应满足 
第一步：可视化流程。泳道可以极大提高效率。 第二步：定义清晰的规则 
 
 卡片的颜色表示什么状态？卡片内容需要哪些关键信息？ 谁来负责整理和移动卡片？ 什么时间点进行卡片操作？ 卡片的操作步骤是怎样的？（比如，卡片每停留一天需要做一次标记。） 什么时候需要线下沟通？（比如缺陷和阻塞） 哪些标识代表当前最高优先级的任务？ 看板卡片的填充规则是怎样的？ 谁来保障线下和线上看板的状态一致性？ 
 
第三步：限制在制品（需求）数量。 
 
 也就是每一个泳道中的卡片数量需要有一定的把控和维持 
 
第四步：管理工作流程 
 
 每日站会：待交付的任务。紧急、阻塞&长期没有移动的任务问题排查队列填充会议：目标有两点，一个是对任务的优先级进行排序，一个是展示需求开发的状态。 
 
第五步：建立反馈和持续改进 
 
 没有天然完美的解决方案，只有持续优化的解决方案。 
 
三、做好配置管理 
1、版本变更标准化 
 
 【引用】一个完整的提交记录应该至少包括以下几个方面的内容： 
 提交概要信息：简明扼要地用一句话说明这个改动实现了哪些功能，修复了哪些问题；提交详细信息：详细说明改动的细节和改动方式，是否有潜在的风险和遗留问题等；提交关联需求：是哪次变更导致的这次提交修改，还需要添加上游系统编号以关联提交和原始变更。 
 
可以说，标准化是自动化的前提，自动化又是 DevOps 最核心的实践。 
2、将一切纳入版本控制 
“一切都需要！”比如软件源代码、配置文件、测试编译脚本、流水线配置、环境配置、数据库变更等等，你能想到的一切，皆有版本，皆要被纳入管控。 
3、全流程可追溯 
 
 【引用】对传统行业来说，全流程可追溯的能力从来不是可选项，而是必选项。像航空航天、企业制造、金融行业等，对变更的管控都是非常严谨的，一旦出现问题，就要追溯当时的全部数据，像软件源代码、测试报告、运行环境等等。如果由于缺乏管理，难以提供证据证明基于当时的客观情况已经做了充分的验证，就会面临巨额的罚款和赔偿，这可不是闹着玩的事情。像最近流行的区块链技术，除了发币以外，最典型的场景也是全流程可追溯。所以说，技术可以日新月异，但很多理念都是长久不变的。 
 
针对任意一个需求，你们是否能够快速识别出它所关联的代码、版本、测试案例、上线记录、缺陷信息、用户反馈信息和上线监控数据呢？ 
对于任意一个应用，是否可以识别出它所依赖的环境，中间件，上下游存在调用关系的系统、服务和数据呢？ 
4、单一可信数据源 
 
 【引用】有一个网络热词叫作“官宣”，也就是官方宣布的意思。一般情况下，官宣的信息都是板上钉钉的，可信度非常高。可问题是，如果有多个官宣的渠道，信息还都不一样，你怎么知道要相信哪一个呢？这就是单一可信数据源的意义。 
 
对于代码来说，要有统一的版本控制系统，不能代码满天飞；对于版本来说，要有统一的渠道，不能让人随便本地打个包就传到线上去了；对于开发依赖的组件来说，要有统一的源头，不能让来路不明的组件直接集成到系统中。 
这不仅对于安全管控来说至关重要，对于企业内部的信息一致性也是不可或缺的。 
四、分支管理策略 
没什么可说的，尽可能单独模块分支单独管理。 主线分支由专人管理。 
五、持续集成 
 
 传送门：【DevOps】Jenkins+Git+Gitlab+Sonar+Nexus实现持续集成 成功的 持续集成 应解决下述的三个问题： 
 
每一次代码提交，是否都会触发一次完整的流水线？每次流水线是否会触发自动化的测试环节？如果流水线出现了问题，是否能够在 10 分钟之内修复？ 
 
 持续集成并非单独包括将分支的代码拉取，打包进行部署，也需要同时触发一系列自动化的测试工程的执行。 
 
执行的结果第一时间里也需要进行反馈和维护。
                
                
                
        
        
"DevOps（Development和Operations的组合词）。 出现的原因：为了按时交付软件产品和服务，开发和运营工作必须紧密合作。 出现的目的：使软件的构建、测试、发布能够更加地快捷、频繁和可靠。 涉及的部门：开发+测试+运维。 DevOps定义： 一句两句，多少句我也说不清楚，我也还没有参透。而且目前也没有权威性的定义。 但是我特别不同意的一个观点：“软件开发模式发展三阶段是瀑布、敏捷和DevOps""。我认为DevOps包括了敏捷开发。 既然如此我学习的方法是看看DevOps到底都有什么。就像盲人摸象，多摸几次总会摸遍全身，那时候你心里自然对这个事物有了整体的轮廓，至于管它叫象也好叫驴也罢，已经不再重要。哈哈 
其实我认为DevOps是一种项目管理的方法论+方法论的落地工具。 方法论： 链状 code->build->test->release->operate，在build、test、release和operate之间有堵墙，每个房间内有不同的环境和 思维方式。 演变到环状：统一环境和认知。 
 
至于方法论涉及到的工具如下： 
网上有人整理了DevOps涉及到的模块，我记录下来，留在后期慢慢琢磨。等我把这些模块了解清楚后，我就知道了啥是DevOps。 
代码管理（SCM）：GitHub、GitLab、BitBucket、SubVersion

构建工具：Ant、Gradle、maven

自动部署：Capistrano、CodeDeploy

持续集成（CI）：Bamboo、Hudson、Jenkins（gitlab+gerrit+jenkins）

配置管理：Ansible、Chef、Puppet、SaltStack、ScriptRock GuardRail

容器：Docker、LXC、第三方厂商如AWS

编排：Kubernetes、Core、Apache Mesos、DC/OS

服务注册与发现：Zookeeper、etcd、Consul

脚本语言：python、ruby、shell

日志管理：ELK、Logentries

系统监控：Datadog、Graphite、Icinga、Nagios

性能监控：AppDynamics、New Relic、Splunk

压力测试：JMeter、Blaze Meter、loader.io

预警：PagerDuty、pingdom、厂商自带如AWS SNS

HTTP加速器：Varnish

消息总线：ActiveMQ、SQS

应用服务器：Tomcat、JBoss

Web服务器：Apache、Nginx、IIS

数据库：MySQL、Oracle、PostgreSQL等关系型数据库；cassandra、mongoDB、redis等NoSQL数据库

项目管理（PM）：Jira、Asana、Taiga、Trello、Basecamp、Pivotal Tracker
123456789101112131415161718192021222324252627282930313233343536373839
                
                
                
        
        文章知识点与官方知识档案匹配，可进一步学习相关知识云原生入门技能树容器编排(学习环境 k8s)安装kubectl12783 人正在系统学习中"
"1. 什么是 Azure DevOps 
Azure DevOps 是由微软开发的服务平台，它提供了多种工具，可用于更好地进行团队协作。它还具有用于自动构建过程，测试，版本控制和程序包管理的工具。 
Azure DevOps 提供了 5 个主要模块： 
 Azure Boards：这些是敏捷的工具，可以帮助我们规划、跟踪和讨论我们的工作，甚至与其他团队一起工作。  Azure Repos：提供无限的、云托管的私人和公共 Git 存储库。  Azure Pipelines：使用适用于任何语言、平台和云的 CI/CD 进行构建、测试和部署。  Azure Test Plans：使用适用于应用的手动测试和探索测试工具来提高代码整体质量。。  Azure Artifacts： 与整个团队共享来自公共源和专用源的 Maven、npm、NuGet 和 Python 包。以简单且可缩放的方式将包共享集成到 CI/CD 管道中。  
除此之外，扩展市场 上还有超过 1,000 个应用和工具可供选择。 
接下来的文章我会以 WPF 应用为例子简单介绍 Azure Boards、Repos、Pipelines 的使用。 
2. 开始使用 
[外链图片转存失败,源站可能有防盗链机制,建议将图片保存下来直接上传(img-OQUbnTcu-1624426162736)(https://img2020.cnblogs.com/blog/38937/202103/38937-20210314140612050-1387490694.png)] 
如果只是个人使用的话可以使用在线的 Azure DevOps Services，使用 Microsoft 或 Github 帐户可直接登录使用，5 人以内免费。也可以选择 Azure DevOps Server，功能上基本一样，只是部署和收费模式不一样。 
在 Services 里我调不出中文界面，好像听说过只有 Server 版本提供了中文界面，所以接下来的介绍都以英文界面为标准。 
要使用 Azure DevOps Services，首先需要创建组织： 
访问 dev.azure.com。点击“免费开始使用”按钮。使用 Microsoft 帐户或 Github 帐户登录。阅读并同意许可协议。 
 
然后，输入组织的名称及位置： 
 
稍等一会，组织创建好以后就可以使用这个独一无二的组织名称访问组织的页面，例如：https://dev.azure.com/xxxx-company/ 
3. 创建项目 
现在在首页的右边，可以看到创建项目的表单，依次输入“Project name”、“Description”、“Visibility”、“Version Control”和“Work item process”。 
Version control 可以选择 Git 和 TFVC，现在一般都选择 Git。 Work item process 有 Basic、Agile、Scrum 和 CMMI 四种选择，这里我选择了 Scrum，更多信息可以参考 Choose a process like Basic, Agile, Scrum, or CMMI。 
最后点击“Create project”创建项目。 
 
完成后，首页上显示了“WPF”这个项目，可以点击进入项目的页面。 
4. 管理团队 
创建组织和项目后，如果需要拉人入伙，还需要管理他在团队中的位置。例如项目中有 Programer 和 Tester 两个团队，分别有不同的权限、接收不同的通知。管理用户首先需要创建它所在的团队，不过现在只是 Demo 项目就一切从简。在这个项目中，暂时只有一个团队“wpf Team”，现在将刚刚添加的用户放进这个团队： 
进入 wpf 项目，点击左下角的“Project settings”进入 Project Settings 页面，在左侧菜单选中Teams。进入 Teams 页面，在列出的 团队中选中“wpf Team”。在 Members 列表的右上角，点击“Add”按钮。在“Invite members to wpf Team”表单中输入刚刚添加的用户，选择“Save”。 
现在，团队有两个成员了。 
5. 最后 
现在我们已经创建了组织和项目，还添加了团队成员，下一篇文章将会介绍如何使用 Azure Boards 管理工作项。 
更多内容请参考官方文档： 
Azure DevOps documentation _ Microsoft Docs
                
                
                
        
        
"过去一年以来，一批来自欧美的、不墨守陈规的系统管理员和开发人员一直在谈论一个新概念：DevOps。DevOps 就是开发（Development）和运维（Operations）这两个领域的合并。（如果没错的话，DevOps还包括产品管理、QA、*winces* 甚至销售等领域） 
   
 怎么感觉像成为架构师的前几步啊啊。 
 有木有？？？？ 
   
 脱节(The Broken) 
 那么……为什么要合并这两个领域？原因很多，但首要原因是：我们目前的工作流程是脱节的。绝对的脱节。很多公司的开发部门和运维部门之间存在的深刻矛盾，其实就是这个“脱节”造成的。（意译，求斧正） 
 下面是一个大家都基本熟悉的例子：部署软件产品。 
 
 
 开发部门要开发一款新产品。这款产品要使用最新最炫的技术，来保证客户的所有花俏的需求，从而给公司带来百万美元的利润。这款产品被要求使用最新的技术和运行平台，还得马上交付。于是开发部门没日没夜的加班、赶代码（cuts code like crazy），终于如期完成了任务。然后他们把自己的“杰作”一股脑的甩给了运维部门，后者还没能完全接手，前者已经迫不及待的开始了庆功会。 
 接到产品后，运维部门每个人的心中都充满了恐惧。 
  
 
 
 下面就是运维部门的恐惧之源：（{A.B.C}表示A或B或C之一） 
 这款优秀的产品在目前的底层平台上无法运行，因为这个平台{太古老了，空间不足，不支持某某版本} 这款产品的体系结构跟我们的{存储，网络，部署，安全}模型不匹配。 这款产品的{ 报告，安全，监视，备份，服务提供} 我们搞不懂 ，所以没法把它做成实际可用的产品。 
 尽管伴随着不绝于耳的抱怨和咒骂，运维部门最终还是把这款产品安装好了。不幸的是，由于做了很多蹩脚的修改和不合理的强迫式运行，这款产品的性能最后被归结为：终极失败（Epic Fail）。 
  
 于是非常沮丧的运维部门开始记录各种问题，源源不断的给开发部门提Issue。而开发部门的回应基本上都是： 
 这不是我们的错 —— 我们的代码非常完美——而是（运维部门的）部署做的太差劲了。 运维部门比较笨，他们不懂新技术—— 为什么他们没法实现最新的技术呢？为什么他们这么落伍呢？ 在我的机器上运行的没问题啊…… 
 两个部门之间的交流很快变成了一场暴风骤雨。客户（以及股东、投资方和管理层）则成了蒙受损失的失败方。最终公司损失了无数的金钱，大家也都失业了。终极的失败。 
 DevOps 又有啥不同？它有什么好处？ 
 DevOps 就是想方设法的避免这种“终极失败”，同时让大家用更聪明更有效的方式去工作。它是一种框架，包含了很多优秀想法和原则，它鼓励开发部门和运维部门通力合作。在DevOps环境中，开发人员和系统管理员会构建一些关系、流程和工具，从而更好的与客户互动，最终提供更好的服务。 
 DevOps 也不仅仅是一种软件的部署方法。它通过一种全新的方式，来思考如何让软件的作者（开发部门）和运营者（运营部门）进行合作与协同。使用了DevOps模型之后，会使两个部门更好的交互，使两者的关系得到改善，从而让很多领域从中受益，例如：自动化、监视、能力规划和性能、备份与恢复、安全、网络以及服务提供（provisioning）等等。 
 “对于DevOps是什么？” 这个问题，DevOps社区中的每个人的回答都不尽相同。因为我们的工作经验不同，关注的问题也不同。就我个人而言，DevOps分成四大部分： 
 简单 
 KISS（Keep it Simple and Stupid，简单就是美）原则是最重要的。所以本段文字也很简单。我们要尽量提供简单、可重用的解决方案。“简单”节约了书写文档、培训和提供支持的时间。“简单”增加了沟通的速度、避免混淆、减少了开发和运维出错时的风险。“简单”让人更快的发布产品。 
 部门之间关系 
 早参与，多参与。对于开发人员，要让运维人员常驻到开发部门，全程参与开发流程。邀请运维人员参与你的Scrum或者开发会议，与他们分享项目计划、分享新技术的点子和心得。搜集功能性需求（指开发人员用到的需求）的同时也要搜集运维方面的需求。把对于“发布、备份、监控、安全、配置管理和系统功能”的测试作为一项独立的项目流程。软件产品在开发时解决的问题越多，那么在使用时暴露给用户的问题就越少。给运维人员做培训，让他们弄清楚项目的体系结构和核心代码。如果运维人员在反馈bug时提供的信息越多，那么你花在排查问题（trouble-shooting) 的时间就越少，这个bug也就会更快的被解决掉。 
 对于运维人员，在遇到问题时需要把开发人员加进来，大家一起解决问题。邀请开发人员参与你们的会议，分享项目进度（roadmaps），并且共同修订工作计划。运维人员一定要了解开发部门下一步的工作方向，从而确保产品运行的底层平台能够良好的支持最新技术。开发人员也会带来相关的技术、知识和工作，帮助你们改善产品的运行环境，使其更加易于维护、简洁有效。 
 有一些开发领域的概念，例如：“要根据API而非封闭的interface来构建工具”，分布式版本控制，驱动测试开发，以及诸如敏捷开发、看板管理（Kanban）和Scrum等方法论。如果把这些概念应用在运维领域，同样会产生革命性的变革。 
 不要惧怕新点子和新技术。我们可以随时随地的向他人学习，哪怕是一句“我们再也不要那样做了！”也会让我们从中获益。尽管处于不同的部门，但是我们要共同学习、共同成长，这样才能协同工作的更好！ 
 按照从高到低的顺序，有效的沟通方式应该是：面对面交流 、视频会议、电话、即时通讯软件、Email。 
 工作中的流程 
 有自己的流程管理(process engineering)—— 从原始的笔录到 ISO9001。但它们都存在一个关键的缺陷：过于理想化，它要求每个步骤都必须成功执行。例如：为了搭建一台新主机，会有下列一套简单的流程： 
 步骤一：装机（把各个硬件组装到一起）。 步骤二：接线、通电。 步骤三：安装操作系统。 接下来还有步骤四、五、六。 
 如果一切顺利的话，第N步结束之后就会有一个功能完整、运行正常的新主机。但万一有个流程没跑通怎么办？比如说在某个步骤断了，走不下去了，或者在这一步得到了异常的输出，有没有另外的步骤来处理这个异常？ 
 所以，流程绝对不会从头到尾一帆风顺，所以我们要把每一步流程都认真对待，找出所有潜在的问题和障碍。跟软件产品一样，在流程的管理中也要有异常处理。我们不必做到精确预见每一个问题，但一定要保证：即使流程出错，它还能往下走。 
 把不同领域的所有流程串到一起。这些领域包括：部署、监控、能力计划(capacity planning) 等等。从逻辑上讲，“部署”是软件开发周期的最后一环，所以它应该属于“开发流程”，而非“运维流程”。另一个例子是度量和监控。在开发领域，如果不理解底线标准和估算，就什么评估都做不了。把开发部门和运维部门的流程衔接在一起，也会让两个部门更好的配合、相互理解、承担共同的责任。最后还有个优点：文档只需要一份而不是两份（开发一份、运维一份），从而节省了资金。 
 自动化，自动化，还是自动化。构建或使用简单、可扩展的工具（确保提供API, 机器可读的输入、输出 -- 参考 James White的文章：Infrastructure Manifesto）。使用Puppet一类的工具做配置管理。要扩展这些自动化工具，使其能够支持多个领域（开发领域和运维领域），并且在产品的不同环境（开发环境、测试环境、发布环境和生产环境）中使用相同的工具（也叫end-to-end）。这样不但会在产品支持和管理方面带来经济效益，而且也可以在编写新代码的同时，进行产品的发布和管理。 
 最后，在构建流程和自动化时，要把KISS原则牢记于心。越复杂就越易错。只有简单的流程和工具才易于实现、易于管理和易于维护。 
 持续改进 
 不要停止创新和学习。当今技术发展的很快，客户的需求也往往如此。把“持续改进和持续集成” 加入到你的工具和流程中去，这也是运维人员向（优秀的）开发人员学习的好途径，可以学到诸如测试驱动开发等最佳实践。例如：可以向你的部署流程中加入单元测试。做监控时也应该增加些行为测试，提高交付质量。尝试用开发领域中的工具（例如Hudson）在运维领域中做些工作（例如浏览数据(explore）、测量性能（measure)等等）。 
 要不断的总结教训。要积极主动的、在不同领域寻找错误的根源。 一旦收到错误报告，就果断把开发小组和运维小组找来，一起解决这个问题。有时候开发人员很简单的几次代码重构，就可以很好的避免底层运行环境的改变，减少运维人员的负担。总之，遇到问题时，开发部门和运维部门要密切配合、共同解决，而不是互相推诿、踢皮球。 
 对我来说... 
 最后，对我来说，DevOps 的主要内容是：跟谁共同工作、如何共同工作。它最吸引我的地方就是致力于把不同部门不同分工的人召集到一起，共同努力解决问题。这样的工作环境，是我所憧憬的乐园。  
 src： http://article.yeeyan.org/view/139924/170387 
                
        
        
"什么是DevOps？ 
DevOps(development & operations)是一组过程、方法与系统的统称，用于促进开发、技术运营和质量保障部门之间的沟通、协作与整合。 
主要目的：为了按时交付软件产品和服务，开发和运营工作必须紧密合作。 
DevOps的发展 
 
它其实可以看做是开发、技术运营和质量保障三者的交集： 
 
 
它更加的适合于那些频繁交付的企业，例如敏捷软件开发、持续集成。devops的引入能对产品的交付、测试、功能开发和维护起到意义深远的影响。以下几个方面因素可能促使一个组织引入devops： 
 
使用敏捷或其他软件开发过程与方法；业务负责人要求加快产品交付的速率；虚拟化和云计算基础设施日益普遍；数据中心自动化技术和配置管理工具的普及； 
devops的三种便利： 
将人置于技术之前 
投资在那些关注技术的使用，以及如何采用持续开发、测试、集成、部署和操作的培训计划上。 
安全和管理 
对云应用开发的管理必须是系统性的，构建在devops流程中的每一步，包括对使用的服务或API，以及服务发现和服务的依赖上所做的限制的政策。 
作出改变 
devops需要改变和发展以跟上新兴的理念和技术，在设计你的devops流程时始终要将变化考虑在内。 
devops的作用 
devops是企业开发、技术运营和质量保障这三个方面工作的融合，用于促进开发、技术运营和质保部门之间的沟通、协作与整合。有研究显示，在那些引入了改概念的企业中，开发与运营人员在设计、构建、测试工作中共同在内部应用上进行协作之后，可以将产品开发的效率提升20%。 
第三方工具 
可依赖的第三方工具： 
 
FlowDock、HipChat能帮助开发团队的成员互相以及与devops的人员保持联系；Asana、Basecamp这类能帮助跟踪开发任务以及在应用发布中的注意事项；一些以客户为中心的门户网站，可以让用户与管理层或开发层直接进行沟通；
                
        
        
"此章节占考试的百分之20. 
1.可用性（百分之5） 
（1）哪些企业不需要考虑Devops？企业只有价值流的一部分参与进来；企业不认可IT是关键的业务； 
希望快速降低累计技术债务或者消除IT基础设施脆弱性的企业 
（2）以下这些条件可以考虑Devops: 
核心业务高度依赖ITIT高速变化的企业主体业务要求快速变化以测试新的业务想法的假设无法接受IT相关的核心业务风险已经尝试过其他的提升效率或者测试的方法，没有显著效果 
2. Devops不适用以下这些企业： 
不自行研发软件的企业把自己使用的软件外包出去，给别人来做。自己的员工不是开发者有自己企业的工作模式，没有意愿重组自己的企业 
3.严格绑定单体IT架构的企业3.单体IT基础设施和架构对引入Devops有限制： 
需要有给团队分配单独的责任领域的能力 
为每个独立团队分配单独的部分，并异步进行工作。 
4.COTS软件的风险，没有灵活性 
如果没有其他方案，只能选择COTS时：研究程序，创建脚本，取代原有安装程序的工作。 
解决方案： 
标准化配置工具导出应用配置导入能力 
COTS的最佳场景，是基于配置管理系统的数据，在生产环境定期快速地从零开始自动化完全重建应用，而无需系统停机且用户没有察觉（类似静默升级） 
 
 
 

                
        
        文章知识点与官方知识档案匹配，可进一步学习相关知识云原生入门技能树首页概览12783 人正在系统学习中
        
          
            
            
          
            
              
                Smart嵌入式
                
                  
                  微信公众号
                  
                
              
              人工智能赋能嵌入式系统，让你的硬件变的更"
"DevOps 面试题 
转载原文 
 
信码由缰 
“码”界老炮儿，分享程序人生。 
3 人赞同了该文章 
【注】本文译自：https://www.javatpoint.com/devops-interview-questions 下面列出了常见的DevOps面试问题和答案。1) 解释DevOps？ DevOp 是两个词的组合，一个是软件 Development（开发）、另一个是 Operations （运营）。它允许一个团队处理从开发到测试、部署和运营的整个应用程序生命周期。DevOps 可帮助您减少软件开发人员、质量保证（QA）工程师和系统管理员之间的联系。 
2) DevOps 的原则是什么？ DevOps 背后的原则是： 
持续部署基础设施即代码自动化监控安全 
3) DevOps 对开发人员有何帮助？ DevOps 对开发人员修复错误并快速实现新功能非常有帮助。它还有助于团队成员之间更透明的沟通。 
4) 解释一些流行的 DevOps 工具？ 下面是一些流行的 DevOps 工具，例如： 
Jenkins: Jenkins 是一个 DevOps 工具，用于监视重复任务的执行。Jenkins 允许持续集成的软件，安装在进行集中构建的服务器上。Ansible: Ansible 是领先的DevOps工具。 Ansible 是一个开源 IT 引擎，可自动执行应用程序部署、云供应、内部服务编排和其他 IT 工具。Nagios: Nagios 是 DevOps 较为有用的工具之一。它可以确定错误，并在网络、基础架构、服务器和日志监视系统的帮助下进行纠正。Docker: Docker 是一种高端 DevOps 工具，它允许在多个系统上构建，发布和运行分布式应用程序。Git: Git 是一个开源的分布式版本控制系统，每个人都可以免费使用。它旨在快速高效地处理各种规模的项目。 
5) 实施 DevOps 的前提条件是什么？ 以下是实现 DevOps 的一些有用的先决条件： 
团队成员之间的适当沟通。至少一个版本控制软件。自动化测试。自动化部署。 
6) DevOps 在应用开发和基础架构方面的核心操作是什么？ DevOps 应用开发和基础架构的核心操作是：应用开发 
代码建设代码覆盖率单元测试打包部署 
基础架构 
供应配置编排部署 
7) DevOps 的关键组件是什么？ DevOps的最重要的关键组件是： 
持续集成持续测试y持续交付持续贩卖 
8) 什么是 Vagrant？ Vagrant 是 DevOps 的工具，可以创建和管理用于测试和开发软件的虚拟化环境。 
9) DevOps 工作文化在技术和业务上有什么好处？ 以下是 DevOps 工作文化的技术和业务优势：技术优势 
不要解决太复杂的问题。持续交付软件。更快的错误解决。 
业务优势 
最稳定的操作环境。有更多时间可用来增加产品价值。更快地交付功能以使客户满意。 
10) 什么是 Scrum？ Scrum 用于通过迭代和增加实践将复杂的软件和产品开发任务划分为较小的块。Scrum 由三个角色组成，例如： 
产品拥有者Scrum 大师团队 
11) 什么是版本控制？ 它是一个随时间记录对一个文件或一组文件的更改的系统，因此您可以调用特定版本。 版本控制系统由一个中央共享存储库组成，团队成员可以在其中将更改提交到一个文件或一组文件中。它允许： 
将文件还原到以前的状态。比较一段时间内的变化。将整个项目还原到以前的状态。查看谁修改了文件中的内容。 
12) DevOps 中使用了哪些脚本工具？ DevOps 中使用了Python和Ruby脚本工具。 
13) AWS 在 DevOps 中的作用是什么？ AWS 是 Amazon 提供的基于云的服务，可通过无限的计算能力和存储来确保可扩展性。它使 IT 企业能够开发和交付经验丰富的产品，并在云上部署应用程序。 
14) 为什么开源工具可以提升 DevOps？ 由于 DevOps 在组织构建、发布、变更管理和基础架构管理领域的各个方面都具有自动化的特点，开源工具被大部分组织用于流水线中。 
15) 组织剧本作为角色的需求是什么？ 在考虑删除Oracle DB后MySQL安装的任务时，作为角色的组织剧本为任何角色提供了更多的可靠性和可重用性。在安装java之后，安装MySQL还需要另一个需求。在这两种情况下，都需要安装MySQL，但是如果没有角色，就需要分别为这两种用例编写剧本。不过，一旦使用了角色，通过调用site.yaml中的逻辑，就可以创建任意次数的MySQL安装角色。 
16) 有多少云平台可用于 DevOps 实施？ 以下是用于 DevOps 实施的一些云计算平台，例如： 
谷歌云亚马逊网络服务微软Azure 
17) 解释两因素身份验证？ 两因素身份验证是一种安全性方法，用户可以通过它提供来自不同类别的两种身份验证方法。18）PTR在DNS中的用途是什么？ PTR是用于反向DNS查找的指针记录。 
18) PTR 在 DNS 中的用途是什么？ PTR 是用于反向 DNS 查找的指针记录。 
19) 说出一些网络监视工具？ 一些最重要的网络监视工具是： 
NagiosOpenNMSSplunkIcinga 2Wireshark 
20) 列出三个重要的DevOps KPI？ 三个最重要的DevOps KPI是： 
部署频率失败部署的百分比平均故障恢复时间 
21) 解释关于 DevOps 的结对编程？ 结对编程是极限编程规则的一种工程实践。在这种情况下，两个程序员使用相同的设计或算法在同一系统上工作。 一个程序员充当驱动者，另一个充当观察员，他不断监视项目进度以发现问题。这些角色可以在任何时间点互换，而无需事先通知。 
22) 什么是CBD？ 基于组件的开发（CBD）是进行产品开发的独特方法。在这种方法中，开发人员始终在寻找现有的定义良好、经过测试和验证的组件，以将它们组合并组装成产品，而不是从头开始开发。 
23) 给出 DevOps 自动化的定义？ 自动化是 DevOps 实践的关键需求，使一切自动化是 DevOps 的基本原则。自动化从开发人员计算机上的代码生成开始，直到将代码推送到代码，以监视生产中的应用和系统。 DevOps 中的自动化可提高速度、一致性、更高的准确性、可靠性、并增加交付数量。 
24) 什么是 DevOps 流水线？ 软件工程团队中的流水线是一组自动化流程，使 DevOps 专业人员和开发人员能够可靠、高效地将其代码编译、生成并部署到生产平台。 
25) 什么是Azure DevOps？ Azure DevOps 也称为 Microsoft Visual Studio 团队服务（VSTS）。它是为云构建的一组协作开发工具。 VSTS通常被用作独立术语，Azure DevOps 是一个由几种不同产品组成的平台，例如： 
Azure Test PlansAzure BoardsAzure ReposAzure PipelineAzure Artifacts 
26) 哪些因素使 AWS DevOps 具有高度可访问性？ 以下是使AWS DevOps广受欢迎的一些原因，例如： 
AWS CloudFormationAWS EC2AWS CloudWatchAWS CodePipeline 
27) DevOps 中的构建是什么？ 构建是一种方法，其中将源代码放在一起以检查其是否作为单个单元工作。在构建创建过程中，将对源代码进行编译、测试、检查和部署。 
28) 说明哪个场景中使用了 SSH？ 您可以使用SSH登录到远程计算机并在命令行上工作。此外，您还可以使用它来隧穿系统，以促进不安全网络上的两个主机之间的安全加密通信。 
29) AWS中如何执行基础架构代码？ 在 AWS 中: 
基础结构的代码将采用简单的 JSON 格式。此 JSON 代码将组织到称为模板的文件中。这些模板可以部署在 AWS DevOps 上，然后作为堆栈进行管理。稍后，CloudFormation服务将在堆栈中执行创建、删除、更新等操作。 
30) 请解释 Git Bisect？ Git Bisect 使用二进制搜索帮助查找哪些提交引入了错误。
                
        
        
"目录 
 DevOps 
 DevOps的好处与价值 
 可能的几个关注点 
 DevOps能力环 
 DevOps与持续集成、持续交付 
 一个完整的过程 
 典型的CICD流水线过程 
 DevOps黄金思维圈 
 Why（目的、理念） 
 How（方法、措施） 
 What（现象、成果） 
 初见 
 一些图示 
 关系与演进 
 涉及的工具 
  
 DevOps 
 DevOps（Development+Operations）强调共同对业务目标负责，以实现用户价值作为唯一的评判标准：保证产品功能及时实现、成功部署和稳定使用； 
 是一种重视软件开发人员（Dev）和IT运维技术人员（Ops）之间沟通合作的文化、运动或惯例，改善团队之间的协作关系；是一组过程、方法与系统的统称，包含开发、测试和运维；用于促进开发（应用程序/软件工程）、技术运营和质量保障（QA）部门之间的沟通、协作与整合；透过自动化“软件交付”和“架构变更”的流程，使得构建、测试、发布软件能够更加地快捷、频繁和可靠，按时交付软件产品和服务； 
  
 总的说来： 
 DevOps 是把人员、流程、产品进行结合，给用户提供持续价值的一个过程，既涉及到人员、流程、工具，也涉及到产品。DevOps 最终目的是给客户提供持续交付的价值，流程包括：产品的规划跟踪、软件开发、构建测试、产品部署、运维、监控和优化。通常把 DevOps 这些流程通过一个流水线的方式串联起来称为一个 DevOps 的流水线，其核心目标就是持续给用户交付有价值的产品。 
 简而言之，DevOps不仅涉及技术背景，还包括非技术的文化方面。 在软件开发和应用周期中，提供了一个机制或模式来培育“协作”意识，帮助不同角色的成员紧密协作，充分利用现有资源，遵循交付的商业价值，共同对“输出”负责，对质量负责。 
  
 DevOps的好处与价值 
 对于业务与产品而言，DevOps的好处更多基于持续部署与交付。 从组织结构而言，DevOps是部门间沟通协作的一组流程和方法，有助于改善公司组织文化、提高员工的参与感。 
 代码的提交直接触发：消除等待时间，快速反馈每个变化对应一个交付管道：使问题定位和调试变得简单全开发流程高效自动化：稳定，快速，交付结果可预测持续进行自动化回归测试：提升交付质量设施共享并按需提供：资源利用最大化 
  
 可能的几个关注点 
 DevOps绝不是推荐一定要在某一方面达到极致，而是从“整体”入手，充分激发“体系”的最佳效率。 
 虽然真正实现DevOps的成本高昂，但任何时候都是实现DevOps的最佳时机，因为随着业务发展，成本一定是越来越高的；组织文化上的变革，鼓励不同的个体与部门共同协作，减少“内耗”；合适的DevOps人员（最起码保证在“向DevOps转换阶段”中，研发人员知晓运维，运维人员了解业务）；统一的标准、环境、工具、流程，例如：开发/测试环境尽可能地和生产环境保持一致；自动化和持续交付，简化重复性工作和减少不必要的等待涉及多个技术支撑：敏捷开发、持续集成&部署、微服务、容器、云环境等；个体和团队的成效都放在整个产品开发&运维生命周期内来进行评价； 
  
 DevOps能力环 
  
  
 DevOps与持续集成、持续交付 
 DevOps的应用场景往往是一个庞大复杂的背景和流程的场景，大都包含一个持续交付流水线。 
 开发人员：IDE、Git等开发和编译工具版本控制系统：分支策略、语义化版本构建服务器：持续集成、代码质量检查工件库：存放二进制包系统的包管理器：编译或测试环境系统上管理二进制包环境一致性预发布或生产：预发布环境与生产环境互换（蓝绿发布）发布管理：在高程度自动化测试的基础上实践自动化或半自动化（人工介入）部署问题管理系统。。。。。。 因此，DevOps 是一个完整的面向IT运维的工作流，以 IT 自动化以及持续集成（CI）、持续部署（CD）为基础，来优化程式开发、测试、系统运维等所有环节。 DevOps的技术要点由“持续集成/部署“”一线贯穿，主干开发是进行持续集成的前提，自动化以及代码周边集中管理是实施持续集成的必要条件。 换而言之，DevOps 是持续集成思想的延伸，持续集成/部署是 DevOps 的技术核心，在没有自动化测试、持续集成/部署之下，DevOps就是空中楼阁。 
  
 一个完整的过程 
 开发团队接到任务，需要完成一个变更为了更加顺利地开发，将这个变更分拆为几个小变更开发人员在本地开发并且测试，如果使用了测试驱动开发，在编写功能代码之前会先编写测试，然后编写能够让测试通过的实际代码开发人员将代码提交到企业内部的Git版本控制系统上构建服务器获取这个变更并初始化构建流程，单元测试之后，变更可以被发布到二进制库里配置管理系统根据“策略”，在测试环境中安装应用了新的变更新安装触发自动化回归测试，测试成功后，质量保证团队开始做人工测试人工测试通过后，质量保证团队将“已通过”标识给予这个变革变更在预发布环境中进行验收测试验收测试完成后，预发布环境被切换成生产环境，而生产环境变为新的预发布环境 
  
 典型的CICD流水线过程 
 项目开发编写代码，然后把代码推送到 GitLab 里存储，通过 GitLab 的 hook 使 Jenkins 执行一些 CI 的过程，比如做一些单元测试，构建 Docker image再把这个 Docker image 调用 helm 部署到开发环境或测试环境在测试环境里通过 Jenkins 触发一个集成测试的功能完成后就可以把它部署到生产环境通过 Kubernetes addon 的方式，把 Prometheus、Grafana 等监控组件部署到集群里，实现一整套从 CI 到 CD 的监控过程 
  
 DevOps黄金思维圈 
 时刻关注正在做什么，尝试识别问题范围，找出解决方案和改善途径。 Why---》How---》What 
 Why（目的、理念） 
 持续且快速、可靠的自动交付软件给用户： 
 实现价值的持续交付，赢得市场竞争提升研发（增值活动）的时间，极大化增值活动产出 
 How（方法、措施） 
 建设自动化、可重复、可靠的持续交付流水线（IT服务供应链）主要包括代码管理、持续集成、自动化测试、自动化部署、基础设施自动化管理等方面的工程能力 
 What（现象、成果） 
 每次代码提交都需要经过流水线验证每次部署的版本都经过多环境验证部署频率可以得到提升周期时间（从代码提交到部署上线）的时间可以到分钟级部署失败率低部署失败的修复时间短，影响小 
  
   
  
 初见 
 给产品经理讲讲，什么是持续交付和DevOps一篇文了解DevOps：从概念、关键问题、兴起到实现需求 不以敏捷开发为基础的DevOps都是耍流氓 
  
  回到顶部 
   
  
 一些图示 
  
 关系与演进 
  
  
 涉及的工具 
 DevOps的目标不是单靠一款工具就能实现的。 在各个阶段，每个都有其单独对应的目标。 依赖于组织的选择，有着各种各样的工具可以在相应的背景和趋势下，实现当前业务目标，满足中远期的需求。 
  
 
 
  
 Action is the antidote to despair! 

                
        
        
"目录 
 本文参考资料一、DevOps怎么来的？要解决什么问题？1、DevOps怎么来的2、现场编故事，来感受DevOps 
  二、引入DevOps前后的效能指标三、DevOps是思想？还是工具？DevOps 的 3 个支柱 
  四、类比CMMI、ITIL五、自己编的故事太难听了，听这个1、开发和运维的战争2、张大胖的回忆3、开发和运维的鸿沟4、Dev + Operations = DevOps 
  
 
 
本文参考资料 
 
 参考资料： 
 DevOps实战笔记 - 石雪峰，极客时间文末引用的故事转载自公众号 码农翻身什么是DevOps？ - 程序员小灰 
 
一、DevOps怎么来的？要解决什么问题？ 
DevOps的英文全称（开发 Development 与运维 Operations 的组合词），因此我们需要弄清楚开发和运维两个角色之间究竟有过什么样的问题。 
 
1、DevOps怎么来的 
很久很久以前，大家都在用瀑布式开发模式，开发、测试、运维之间较为独立，开发之前就需要完全确立好项目目标、范围和实现方式。这样的坏处很明显，现在的市场环境变化快，如果是甲方需求，甲方想法也可能有变化，几乎不可能一开始就确定好所有的东西。 
一旦有变化，就需要从头开始，上线计划就会延期，最后的结果就是投入了大量资源，但是达不到预期效果。 
 
 从业界巨头 IBM 的统计数字来看，有 34% 的新 IT 项目延期交付，将近一半的应用系统因为缺陷导致线上回滚 
 
 
 
后来啊，敏捷开发模式应运而生。一句话概括，就是将大的项目进行拆解，既然无法一开始设定好所有的功能模块，那就拆分！就算是有变动，影响的也不会是全体。通过一次次迭代，一次次将新功能加进去，一点点将完整的项目做出来。 
 
 比如我们要做个微信朋友圈这样的，可以先做一个发朋友圈，再做朋友圈点赞，然后做朋友圈评论… 
 
这也让测试同学能在最短时间内加入到开发活动中。测试同学保证了每一个独立的小模块的功能可用，交付的质量也有保障。因此，敏捷开发是更加灵活的研发模式。 
 
 问：敏捷开发会直接提升团队的开发速度吗？ 答：当然不！用啥都不能加速研发编码速度。买个好电脑吧，也许有点用 
 
敏捷之所以快，是因为节省了大量不必要的浪费和返工。 
 
终于终于，DevOps要上场了。从最早的开发、测试、运维互相独立，到拉拢了测试，提高效率之后，接下来自然要拉拢运维团队。  
也就是说，DevOps模式最早是想要打破开发和运维之间的隔阂。 
 
 为什么说存在隔阂？ 答：因为在敏捷开发模式下，开发和运维的使命有些许冲突。 
 
开发为了满足业务需求，不断堆砌新功能，很少有时间考虑可运维性、可测试性，只需要需求状态在开发，干就完事。另一边运维的使命是系统的稳定性、可用性和安全性。 
现在版本部署上线，大家都会如临大敌。 
 
 我在欧洲拜访 DevOps 之父 Patrick 的时候，曾经去过他的公司。那天风雪交加，比利时根特显得非常冷清。 我们停好车后，刚要推门进入他们公司，恰好碰到 Patrick 和他的一个同事下楼抽烟。简单寒暄之后，我们才知道，原来 Patrick 公司负责的一个系统要在 15 分钟后上线，他们趁这个间歇出来换换脑子，然后再回去大干一场。 
 
听石雪峰文中所言，就连 DevOps 之父Patrick在面临上线的时候都十分正式对待。 
 
 “在无数次被开发不靠谱的功能缺陷蹂躏得体无完肤之后，运维团队意识到，变更才是影响他们绩效目标的最大敌人。于是，预先设立的上线窗口就成了运维团队的自留地，不断抬高的上线门槛也使得开发团队的交付变成了不可能完成的任务，最后，“互相伤害”就成了这个故事注定的结局。” 
 
再后来大家意识到，开发也很无辜，有些不靠谱的需求其实在业务（运营或产品）提出阶段就已经存在了。 
然后业务方也加入DevOps，有人叫做“BizDevOps”。不重要，目标也是为了多变的业务需求，及时作出业务层面的调整。 
安全部门也积极的加入，不再是等待系统发布之后。在每个研发阶段注入安全反馈机制，保证团队可以在第一时间内应对安全风险。有人叫“DevSecOps” 
后来就更多了，职能部门，战略部门等等等等，DevOps已经从最开始的一个点，拓展为了一个面。 
 
总结：DevOps是什么，是要求产生一个产品的各个部门，根据敏捷开发的模型，全程参与产品的研发和变化讨论。 
2、现场编故事，来感受DevOps 
Q公司想开发一个聊天app。主要有单聊、群聊、动态相关和个人信息展示。很自然划分了前后端团队，前端有客户端，后台管理网站研发；后端是服务端。 
DevOps模式，划分小模块和周期，人员拆分成小组（组内包含业务方、开发、测试和运维），聊天模块分一组，个人信息相关拆分为一组。 
拆分为多小呢？一般一个需求两周一个迭代，有一周的开发时间，一周的测试时间，两周一交付。 
每个组的大方向都有了，就是进行组内业务的一期二期拆分，比如用户管理模块，不能上来就做一些用户之间的关注吧，得先把个人资料页做好；聊天模块，不能上来先做群聊吧，得先做单聊，单聊又需要一些用户那边的业务进行支持。因为根据业务之间的关联关系，决定一期都要做“基础能力”，用户需要把登录注册等基础能力做出来，不耽误聊天模块或动态相关的进度。 
当一个小功能做开发出来之后，就直接提测，交给组内测试人员，测试人员完成后，提交需求单流转，运维方可利用一些自动化工具，如Jenkins和Gitlab做Hook，自动化部署。 
如果！中间业务方有一些需求改动，比如，不想要动态相关了，或者想多做一个功能，这个时候对整体项目的影响会降到最低。 
当其中一个小组的小模块在短期内搞定，一个软件的雏形也就有了，接下来进行二期、三期功能完善。一个聊天软件就做出来了。 
二、引入DevOps前后的效能指标 
部署频率：指应用和服务向生产环境部署代码的频率。变更前置时间：指代码从提交到成功运行在生产环境的时长。服务恢复时间：指线上应用和服务出现故障到恢复运行的时长。变更失败率：指应用和服务在生产环境部署失败或者部署后导致服务降级的比例。 
 
 每年，这个报告都会基于这 4 个核心指标统计行业内高效能团队和低效能团队之间的差距。从去年的数据来看，与低效能团队相比，高效能团队的部署频率高了 46 倍，变更前置时间快了 2500 多倍，服务恢复时间也快了 2600 多倍，失败率低了 7 倍。 
 
三、DevOps是思想？还是工具？ 
常见的DevOps工具包含：Chef、Docker、Ansible、Packer、Troposphere、Consul、Jenkins、SonarQube、AWS… 
DevOps 的 3 个支柱 
 
 对工具和文化的体系化认知，可以归纳到 DevOps 的 3 个支柱之中，即人（People）、流程（Process）和平台（Platform）。3 个支柱之间两两组合，构成了我们实施 DevOps 的“正确姿势”，只强调其中一个维度的重要性，明显是很片面的。 
 
 
人 + 流程 = 文化流程 + 平台 = 工具平台 + 人 = 培训赋能 
 
 业界的很多开源工具已经相当成熟，以 Netflix、Amazon、Etsy 等为代表的优秀公司也在不断将内部的工具平台进行对外开放，各方面的参考资料和使用案例比比皆是。无论是单纯使用，还是基于这些工具进行二次开发，成本都已经没那么高了，一个稍微成熟点的小团队可以在很短的时间内完成一款工具的开发。 
 
 
 机制就是人们愿意做，而且做了有好处的事情。 
 
DevOps是一种思想，也可以是一种平台化工具，让研发过程中的所有相关人员加入进行协同办公， 
四、类比CMMI、ITIL 
两者都是基于瀑布模型进行的细化和完善，还需要一部分管理层面的参与。 
ITIL是一套标准和规范，ITIL即IT基础架构库(Information Technology Infrastructure Library, ITIL，信息技术基础架构库)由英国政府部门CCTA(Central Computing and Telecommunications Agency)在20世纪80年代末制订，现由英国商务部OGC(Office of Government Commerce)负责管理，主要适用于IT服务管理（ITSM）。 
 
与DevOps相比没有好与坏，需要看公司的运作模式，以及当前项目的类型，更适合选用什么样的模式。 
五、自己编的故事太难听了，听这个 
1、开发和运维的战争 
五天前，张大胖负责的开发团队向运维部门交付了一批新代码，这是一次用户期待已久的重要升级，部署进行得非常顺利，大家都很高兴。 
可是今天生产环境的CPU持续接近100%，有好几台服务器都down机了， 运维老大勃然大怒：“已经是第三次了！ 张大胖，你们开发团队怎么搞的？ 新代码一上线CPU就100%！” 
张大胖自然也不甘示弱：“我们在测试环境测试得非常充分，用户压力比生产环境大多了，代码坚如磐石，肯定是你们配置错了什么东西！” 
“不可能，我们是严格按照你们要求的步骤来部署的，肯定是你们代码的问题！” 
“那测试环境怎么就没有问题？” 
… 
两位主管吵了好久，也没有什么好的解决方案，大家又熬了一个通宵，把代码回滚到上个版本，烧香拜佛，希望不要再出问题。 
经过这一番折腾，今年年底的奖金估计是悬了！ 
张大胖觉得极为郁闷， 心绪难平，黑着脸来到茶水间倒了一杯咖啡，坐在那里一边喝一遍感慨这运维部门简直是太难合作了！ 
看看他们新招的这些人，完全不懂业务，他们为了要“逃避责任”，经常说：“我不懂业务，这次上线的内容，你要把每一步都写得清清楚楚，我只管执行，不问为什么，出了问题可不是我的责任。”你说气人不气人！ 难道他就想当个机器人吗？ 
还有，他们运维团队每个人侧重不同，有人负责数据库脚本执行，有人负责Web服务器，有人负责SSO ， 我的天，每次上线前都得把一堆人拉过来开好几次会，让他们熟悉操作步骤。 这个人部署了一次，好不容易熟悉了，下一次又换了一个人，还美其名曰这是人力资源池，能提高效率，但是新人又需要从头儿学习，这怎么可能不出错？！ 唉… 
2、张大胖的回忆 
喝了两杯咖啡以后，张大胖稍微平静了一下，仔细想想，本质原因还是软件本身太复杂了，不但开发复杂，部署也超级复杂，每次部署就把人扒掉一层皮。 
张大胖不由地想起来这些年来自己经历过的软件开发和部署流程。 
大学时候，跟着老师做一些小项目，开发、测试都是一个人搞定，部署到用户那里也是自己做，几乎没出过岔子。 
毕业后进入一个小公司，做的是C/S架构的系统，有了开发团队、测试团队之分，开发团队把代码写完，交给测试团队测试，通过以后就可以到客户那里部署了。 
通常来说实施人员也都是开发或者测试的兄弟们兼任，自己也兼职干过，拿着部署文档和光盘，到客户那里严格按照步骤把系统安装到客户的机器上，基本上没啥大问题，即使有了问题，现场调试一下也都能解决，大不了把开发的兄弟们叫过来一起熬夜。 
再后来互联网浪潮来临，自己也跳槽到这家互联网公司，专门做一个网上约车的系统，给用户提供约车服务，根本不用到客户那里去安装软件，公司独立地运行、维护好这个系统就万事大吉。 
但是这个网上约车的系统可比原来的单机软件、C/S软件要复杂得多，尤其是要面对海量用户的高并发访问，需要解决各种各样的技术难题，挑战巨大。 系统不但复杂，还需要以24*7的方式运行， 靠开发或测试的兼职人员已经无法维护了。 
公司专门设立了运维（Operations）部门，负责系统的部署、日常维护、监控。运维人员的地位空前提高，当然，对他们的技能的要求也空前提高。 
张大胖看过一个招聘的运维的邮件: 
熟练使用Linux, unix, windows操作系统； 
精通各种常用服务器软件（tomcat, apache, nginx,redis,mysql…)的配置及优化 
了解负载均衡和高可用的原理，如LVS,Keepalived等 
熟悉网络原理，TCP/IP协议，掌握至少一种脚本语言。 
会使用各种配置管理和部署管理的工具。 
… 
总之，运维的重要性已经和开发差不多了。 
3、开发和运维的鸿沟 
为了加快交付速度，前两年，自己带领着开发团队实施了敏捷转型，成功地把原来的瀑布开发方式转换成了小步快跑，经常交付的敏捷模式。  通过敏捷软件开发，把需求人员，开发人员，测试人员拉到了一起，形成所谓“特性团队”，把需求拆分成一个个独立的，对用户有价值的故事，按优先级排序以后再开发、测试，甚至可以达到每两周就能交付几个独立需求的程度。（码农翻身注，参见《白话敏捷软件开发》） 
成功的敏捷转型获得了公司的极大认可，还对外输出了不少培训。 
虽然能频繁地交付，但是却不能频繁地上线，原因很简单：搞运维的家伙们总是希望系统稳定、稳定、再稳定， 稳定压倒一切。所以他们从骨子里不想频繁地上线，那不是给自己找麻烦吗？ 
这恰恰和自己的敏捷软件开发相反，敏捷就是要拥抱变化啊 ！  想通了这个本质矛盾，张大胖就明白自己是搞不定这个问题了，必须上层出面解决。 
张大胖立刻去找CTO Bill，希望他能出点好主意。 
4、Dev + Operations = DevOps 
让张大胖没想到的是， 运维主管老李已经在Bill办公室里了，张大胖心说不好，这小子也许恶人先告状了。 
Bill 一看到愁眉哭脸的张大胖，让他先坐下，听老李把开发和运维之间的“矛盾”和“战争”讲完。 
老李唠唠叨叨，说的问题和自己思考的也差不多。 
Bill笑着说：“大胖，软件的开发流程基本上就是需求->开发->测试->部署， 现在你的团队已经把需求、开发、测试给‘团结’到一起了， 看来你又要‘团结’一个新的小伙伴了！” 
“难道是老李的运维部门？” 
“没错。” 
“那是不可能的， 我们的目标都完全不同，一个要变化，一个要稳定，怎么可能在一起玩？” 大胖非常诧异。 
“不，以后我们要强调业务目标，以用户的价值为唯一的评判标准，团队的考核评价机制也要改变，个体和团队的成功都要放在整个开发-运维生命周期内来进行评价，开发完成了很多用户需求不一定是成功，运维保障系统不down机也不一定是成功！只有用户想要的功能被及时实现了，被成功部署了，被稳定使用了才算成功。 ” CTO总是很擅长用MBA的词汇来讲话。 
“就是说要求我们运维和开发紧密合作喽？” 老李接着问道。 
“是啊，现在有个热词叫做DevOps，就是把敏捷开发部门和运维部门之间的围墙打通，形成闭环。”  “难道我们要再增加一个部门，叫DevOps部门？ 招聘DevOps工程师？” 
“不不，如果再增加一个这样的部门，岂不是又增加了一堵墙？ 我们本来是要打破开发和运维团队之间的隔阂啊。其实运维部门的工作目标不仅仅是让我们的网上约车系统更加稳定和高效，更需要支持业务的快速演化——这一点是和你们敏捷软件开发的目标是一致的啊。” 
""但我们也不能频繁部署啊？快速和稳定的矛盾还是解决不了。""老李叹了口气。 
“我知道张大胖的团队正在实施微服务的改造，将来再部署的话就不是以一个巨无霸应用为单位了，而是以一个个微服务为单位，那样就简单得多，频繁部署是有可能的，并且出了错回滚也便捷得多，肯地不用你们熬夜了！” 
张大胖和老李都点头认同。 
“那具体该怎么做？” 
“首先是观念的改变，以后你们不能互相推卸责任，互相指责，而要共同担责了！一个项目的开发、部署、维护，是你们双方的事情，双方都要对业务负责，出了什么问题，你们要通力合作，共同解决。这一点你们回去后要给组员多洗洗脑。” 
张大胖心想，我们刚刚通力合作回滚了代码。 
“还有，”，Bill看了一眼老李， “运维人员也要了解业务，Code变化带来的影响要告知运维人员。你们开发人员工作的开发/测试环境要尽可能地和生产环境一致。” 
“运维部门所要求的详细安装步骤实在是太烦人了！” 张大胖抱怨。 
Bill说道：“我们先设定一个短期目标，把部署工作完全自动化起来。部署的脚本由老李的运维部门主导，有问题大胖来辅助， 将来这个部署脚本要在所有的环境都用起来！” 
张大胖和老李再次点头。 
Bill又说道：“最后一点就是度量，例如失败部署的百分比，用户开的ticket数目，故障恢复的平均时间等等，这些老李应该比我清楚。我们会用这些度量指标去衡量DevOps做得到底怎么样， 最重要的是我们无论用了什么工具、方法，如果最后没有减少需求从提出到上线，交付给用户使用的时间，那都是失败。我要求你们两个想尽一切办法，去减少这个时间，不是一次、两次，而是持续、稳定地交付给用户。” 
张大胖说：“这DevOps听起来不错，但实施起来估计难度不小啊！” 
Bill说道：“我们先选定一个产品作为试点，然后再扩大推广吧！”
                
                
                
        
        文章知识点与官方知识档案匹配，可进一步学习相关知识Java技能树首页概览118041 人正在系统学习中"
"要了解Devops，CI/CD，容器，容器编排工具，PAAS相关概念  Devops:  可以把DevOps看作开发（软件工程）、技术运营和质量保障（QA）三者的交集。传统的软件组织将开发、IT运营和质量保障设为各自分离的部门。在这种环境下如何采用新的开发方法（例如敏捷软件开发），这是一个重要的课题：按照从前的工作方式，开发和部署不需要IT支持或者QA深入的、跨部门的支持，而却需要极其紧密的多部门协作。然而DevOps考虑的还不止是软件部署。它是一套针对这几个部门间沟通与协作问题的流程和方法。  如果一个组织要生产面向多种用户、具备多样功能的应用程序，其部署周期必然会很短,这就需要开发出来的程序测试通过，立马上线并保证生产环境正常运行，所以在这就涉及到了容器技术，容器技术将服务及运行环境封装到一块保证了测试和生产环境中完全一致，避免了开发环境运行正常生产环境不一样的情况，Docker的特点保证了Build, Ship, and Run Any App, Anywhere
                
                
                
        
        文章知识点与官方知识档案匹配，可进一步学习相关知识云原生入门技能树容器编排(学习环境 k8s)安装kubectl12783 人正在系统学习中"
"DevOps定义 
DevOps是一套实践方法，在保证高质量的前提下缩短系统变更从提交到部署至生产环境的时间。 
解说DevOps定义隐含内容如下： 
在部署对系统的变更时，质量很重要交付机制要求高质量开发人员提交新开发的代码的时间和把代码部署到现场生成环境的时间很重要目标导向目标是确保部署的系统在整个生命周期中都是高质量 
DevOps实践 
从需求的角度把运维人员视为首要干系人（运维需求）让开发人员更多地负责相关事件处理（部署由开发人员先负责）强制推行所有人使用的部署过程（易于追踪且易于理解）使用持续部署（高质量且缩短提交到部署时间）有一套适用于基础设施代码开发的实践（部署高质量） 
DevOps生命周期过程：需求（运维干系人）——开发（小团队、单元测试）——构建（持续集成）——测试（自动化）——部署（持续部署）——执行（监控、响应） 
DevOps运动 
把以前由运维人员完成的很多任务都自动化了，并让开发人员承担部分剩余的工作，通过这种方法，可以减少对专业运维人员的需求。 
DevOps视角 
 自动化 工具可以执行过程中每一步所需的操作；工具和脚本也可以强制推行组织层面的策略；基础设施即代码（脚本和文件的版本控制，错误检测等质量控制）  开发团队的职责 所有所需的知识都保留在开发团队，不需要转移知识过程中的大量协作步骤  
DevOps与敏捷开发 
规范敏捷交付包含三个步骤：开始阶段（构想、建模、计划）——构造阶段（开发解决方案）——转换阶段（部署解决方案） 
DevOps针对三阶段的影响： 
 开始阶段 增加运维人员需求；发布计划包含了与运维人员之间的配合；发布计划中与协作相关的很多主题不再需要，变得高度自动化  构造阶段  转换阶段 等同敏捷实践，新的部分是在构建与转换活动之间，集成和自动连接  
DevOps团队结构 
1、团队规模：相对较小 
可以快速做出决定人少容易组成密切群体容易表达意见缺点是大任务需要合理拆分，各团队高效配合小团队围绕一组微服务架构，减少显式配合 
2、团队角色 
团对领导：负责协调团队、获取资源、保护团队不受问题的干扰等团队成员：负责系统的创建和交付服务所有者：负责外部协作（既能与其他干系人交流，又能与团队的其他成员交流）可靠性工程师：负责部署后的监控以及服务执行期间出现问题后的联系人看门人：从本地开发到部署阶段的每一步都需要看门人根据测试结果，使用一个检测表做出决策（是否允许到下一步）DevOps工程师：负责DevOps工具链中使用的各种工具的护理和保养（可以是个人、团队或组织层面） 
以上角色可以一人承担多角，一角也可以由多人承担，取决于个人能力、个人工作负荷以及这个角色所需的能力和工作量 
DevOps协作 
DevOps的一个目标是最大程度减少协作，以缩短推向市场的时间 1、协作的形式 
直接的间接的持久的短暂的同步的异步的 
2、团队协作 
人工过程：取自敏捷过程自动化过程 
3、跨团队协议 
与干系人和客户的上游协作与运维人员的下游协作与其他开发团队的交叉协作 
DevOps过程试图尽量减少这种协作 
 软件架构 职责分配；协作模型；数据模型；资源管理；架构元素之间的映射；绑定时决策  避免重复工作 避免重复工作并鼓励复用：每个团队任务都很小，重复工作量也很小；每个团队都负责自己的服务，有问题时排除障碍较快  
DevOps障碍 
1、采用DevOps实践时，组织需要考虑在缩短面市时间所带来的收益与一些事情出现差错之间的权衡，一个特定组织所担忧的风险取决于他们的活动领域，对于一些组织来说，出现问题所带来的风险比尽快推向市场更重要。 
2、确定一个组织的文化的方法之一是看它的激励产生什么样的结果，不同的激励机制培育出不同的态度，可能成为文化冲突的原因 
3、筒仓思维方式 
4、工具支持 
每个工具的安装、配置和使用都必须具备专业技能不同开发团队使用同一过程，需要定义共同使用过程，确保都遵守 
5、人员问题 
开发人员薪资的成本/收益问题在开发人员中增加更多的任务会加剧开发人员短缺 
DevOps权衡 
1、在对DevOps工具进行支持与缩短新功能投向市场的时间之间进行权衡 
2、把职责从IT人员转向开发人员的权衡（两个团队完成任务的成本、时间、投入情况以及协议问题等） 
3、开发团队自治与整体协议之间的权衡
                
                
                
        
        
"摘要：什么是DevOps?为大家都在用DevOps，随着市场竞争的加剧，对企业的软件交付速度提出了更高的要求。像大家熟悉的大厂也不例外，落地DevOps、实现高效交付成为了企业共同的追求。 
现阶段企业的快速发展，人员规模的不断壮大，开发流程规模和工具发展不匹配，各种问题频频爆发。每个人都感觉推动一件事情太难了，发布流程不规范，好的实践又难于推广。 
大家都知道有问题，可一旦要改进却总是有这样的那样的原因，发布时间长，需要人工介入多，无论从时间成本还是由于人工介入带来的风险都很大。缺少建设工程效能的有效抓手，想要提升但缺少方法和抓手更缺少好用的工具，软件交付要求越来越高和企业面临的现实问题双重叠加，这就像开着拖拉机参加拉力赛怎么办呢？答案是 DevOps 
 
那什么是 DevOps，它能帮助我们解决什么问题呢？ 
DevOps是一套集组织文化团队协作工程实践和工具为一身的工作方法，以帮助企业高效快速高质量的交付应用程序和服务为目的从而更好的实现客户价值。 
云效企业级一站式 DevOps平台，源自阿里巴巴集团先进的研发理念和工程实践，云效目前已服务数十万家企业组织、百万开发者。想要开启你的企业的高效交付之旅吗？立即体验云效。 
 
相比于开源工具自建 DevOps，为什么大家更愿意使用云效DevOps平台，选择云效 DevOps 的 6 大优势： 
 DevOps工具链一步配齐，开箱即用；  一套账号、数据体系，打通所有系统；  简单易用，优秀实践经验模板化沉淀；  深度集成阿里云产品，云上DevOps工具首选；  多重企业级安全防控能力，安全可信；  云效公共云产品，基础版，不限人数，免费使用；  
云效一站式DevOps工具链，开箱即用 
云效 DevOps 提供项目协作、代码管理、持续交付流水线、云原生应用交付、在线IDE、制品仓库、测试管理、知识库 、效能洞察9大产品，前往 http://devops.aliyun.com/,仅需 1 个阿里云账号，这些 DevOps 工具你就可以一站式配齐。无需搭建和维护成本，开箱即用。 
 
一套账号、数据体系，打通所有系统‍ 
使用开源工具自建 DevOps，往往项目管理是一个系统、代码管理是一个系统、持续集成又是另一个系统。每个系统都需要搭建不说，账号、数据都是独立的，维护起来很复杂。 
选择云效 DevOps，同一个阿里云账号，即可访问所有产品。 
不仅如此，使用云效的 DevOps 项目，从任务 -> 代码分支 -> 代码提交记录 -> CI/CD 发布进度，一个项目里面就可以了解全部，无需切换多套系统。 
 
简单易用，优秀实践经验模板化沉淀‍ 
云效提供简单、可视化的操作界面，相比于 jenkins 更容易上手。此外，云效持续交付流水线 Flow 还内置了丰富的模板。 
可视化的流水线配置让之前繁琐的脚本编写工作一去不复返。更重要的是，企业优秀的实践经验，也可以保存为模板，沉淀复用，减少重复工作。 
深度集成阿里云产品，云上 DevOps 工具首选‍ 
云效与阿里云产品采用同一套账号体系，与阿里云云服务器 ECS、容器服务 ACK、函数计算 FC、企业级应用架构 EDAS 、阿里云钉钉等无缝衔接，既减少了账号维护成本，也降低了账号泄露带来的安全风险。 
不仅如此，云效流水线还内置了分批、灰度、蓝绿等常见部署策略，同时支持主机和 K8S，减少额外的开发配置成本。 
 
多重企业级安全防控能力，安全可信 
开源版本的 DevOps 工具往往缺少企业级的安全防控能力，企业想要保障生产安全可控，要么选择付更多的钱升级为付费版，要么研究如何集成其他安全工具，更甚者需要基于它进行二次开发以达到企业规范的安全标准。 
云效 DevOps 通过了公安部网络安全等级保护 2.0 三级认证、ISO 27001 信息安全管理体系标准认证、ISO 9001 质量管理体系认证，标志着云效安全实践达到国内外相关权威机构的安全标准要求，用户使用云效的数据保密性、完整性、可用性和隐私性已经与国内外最佳实践对标，且得到独立第三方安全认证。 
云效从多方面为企业提供安全功能特性，为企业研发资产保驾护航。 
第一，云效提供多种备份机制，叠加阿里云高防产品的防护能力，可以充分保障企业的代码资产安全及稳定性。 
第二，云效敏感行为检测针对成员异常行为触发告警。云效还内置代码敏感信息检测、依赖包漏洞检测服务，降低企业敏感信息泄露风险，增强代码安全性。 
第三，云效提供了精细化的权限管理能力。如 IP 白名单事前防控、离职员工权限自动回收，多级权限设置，保障企业安全研发。 
云效公共云产品，基础版，不限人数，免费使用 
 
云效开放所有基础功能不限人数免费使用。高级版功能更丰富，容量更充足。云效 2020 资费 
点击下方链接即可体验云效DevOps全家桶 
https://www.aliyun.com/product/yunxiao 
关于我们 
了解更多关于云效DevOps的最新动态，可微信搜索关注【云效】公众号； 
福利：公众号后台回复【指南】，可获得《阿里巴巴DevOps实践指南》&《10倍研发效能提升案例集》； 
看完觉得对您有所帮助别忘记点赞、收藏和关注呦；
                
                
                
        
        文章知识点与官方知识档案匹配，可进一步学习相关知识云原生入门技能树云原生环境小结云原生的分层12783 人正在系统学习中"
"1.Devops Team的要求：非临时构造，对小区域负责，全职，跨职能，小的，多样化的专家，自组织，搭配，对正在使用的工具负责。 
2.可视化工作的优点： 
发现已经接收的工作发现潜在存在容量缺乏的领域哪里的资源已经或即将耗尽被阻塞的任务未完成的任务如果没有时间完成本迭代接收的所有工作，其中哪些值得尝试去完成，以便达到最大化有用的结果 
3. Kanban创建可以拉动系统：提升工作流，降低故障停滞时间，降低协调的需求 
4.关于LWIP(限制在制品)：在制品数量和批量规模应该被限制 
帮助构建，拉动系统；促进前置时间估算，促进可视化限制，促进持续识别，明确并消除限制；降低专业人士的工作被打断，提升由于切换丢失的生成率。降低工作时间重新规划，资源利用率的恶化。 
批量规模： 
提升总体总量；恶化流动节奏，提升前置时间，提升缺些数量，减缓假设评估，恶化，产品质量，提升资源利用率 
5.Devops的运维需求： 
Devops扩展了产品负责人PO的角色，在整个IT运维系统中，包括功能性的以及非功能性的需求。建议摒弃非功能性需求这个传统名字最主要的关注点从可靠性转移到可恢复性 
6. 识别处理瓶颈的方法： 
采用支持LWIP限制的可视化工具，可用来识别价值流中的瓶颈 
在所有瓶颈中，关注造成最大延迟的那个。 
理解如何改变短期工作规则，已便于最大化用识别出来的瓶颈点 
找到消除瓶颈点的办法，干掉它 
撤销前面建立的短期规则，并寻找下一个显著瓶颈点。 
7.与传统实践的差异占考试分数的12.5% 
（1）Devops更频繁的发布（官方Devops书本上的翻译是发布是日常活动） 
传统实践：大尺寸，几天，几周发布，很多资源，高付出，备份，文档，手工，时间表 
Devops实践：小尺寸，每周每日发布，有效自用资源，常规付出，自动化，连续 
（2）Devops更多地关注增加业务价值（官方Devops书本上的翻译是发布是由业务决定的。） 
传统IT:版本发布，发布是一组共同部署到生产环境的更改，发布时间，IT决策 
Devops实践：部署，使用用户完全或部分可用新功能，通过测试后立即部署，商业决策。 
（3）Devops更需要自动化（官方Devops书本上的翻译是一切都是自动化的） 
部署流水线的环境由脚本在流水线控制系统的控制下自动创建这些环境会在使用后自动销毁，从而释放资源流水线的快速操作需要最大可能的测试自动化流水线的最后部署和分发，也是自动完成，并对系统和应用程序健康进行必要的调整。 
（4）Devops处理解决事件和缺陷的方式（官方Devops书本上的翻译是缺陷立即被修复的） 
如果要追溯的最近的部署，Devops流水线控制系统将自动回滚到之前已知稳定状态。Devops仍然需要人工干预来分析变化并对变化进行纠正Devops流水线所有链接都是已知的，包括要解决的问题，客户，开发人员和测试人员。 
（5）Devops需要持续改进和保持Devops（官方Devops书本上的翻译是流程是持续更新的） 
Devops建议应立即消除所有确定的过程缺陷。与可以推迟问题的传统做法相反，Devops建议尽可能多的重复有问题的步骤更好的了解如何改进他们，并相应的挑战工作 
8.Devops团队的理解： 
（1）不是一个临时的项目团队，是一个长期存在而组建的。 
（2）团队成员是全职工作在团队中 
（3）是跨职能的，意味着团队应该有能力完成所负责的领域价值流上的工作。DOD完成的定义，理解的唯一方式 
（4）团队不能太大 
 
 

                
        
        文章知识点与官方知识档案匹配，可进一步学习相关知识云原生入门技能树首页概览12783 人正在系统学习中
        
          
            
            
          
            
              
                Smart嵌入式
                
                  
                  微信公众号
                  
                
              
              人工智能赋能嵌入式系统，让你的硬件变的更"
"背景 
本文是 DevOps 的初学者指南。了解有关 DevOps 实践、DevOps 在工程团队中的作用及其优势，以及其它更多信息 
 
 DevOps is a mix of Development and Operations that combines people from a distributed stack and tools used to create efficient applications with the development process to enable faster delivery of quality products. 
 By bringing together the people, tools, and processes, DevOps enables rapid development and delivery with a scope of incremental features added to the product. 
 
DevOps 是开发和运营的混合体，它将来自分布式堆栈的人员和用于创建高效应用程序的工具与开发过程相结合，以实现更快地交付优质产品。 
通过将人员、工具和流程结合在一起，DevOps 可以通过添加到产品中的一系列增量功能来实现快速开发和交付。 
  
 DevOps 是如何工作的？ 
DevOps 模型结合了开发团队和运营团队，以弥合“孤立”流程之间的差距。有时，跨这些流程的人员在一个联合团队中工作，以更快地开发和交付以实现业务目标。简而言之，一个由具有编码、部署（使用各种工具和应用程序）和维护应用程序技能的开发人员组成的团队在整个开发生命周期中协同工作以更快地部署产品。应用程序中添加了增量功能，以使其与客户满意度的最新趋势保持同步。 
DevOps的作用是什么？ 
DevOps 使用各种 DevOps 工具将应用程序创建的主要部分（即开发、质量、部署、安全性）组合到一个流程中，以实现更快的应用程序交付。 
DevOps 在您的工程团队中的好处 
速度 
由于同一流程中的多种技能协同工作，产品交付速度更快。更容易添加更新和功能以跟上市场标准并保持质量和客户满意度。 
快速交货 
由于交付速度的提高，可以更快地发布新功能。因此，现在可以根据市场需求和客户反馈修复错误、添加/更新功能以及添加产品，从而使应用程序能够在竞争激烈的市场中有效交付。 
可靠性 
由于交付速度更快，持续集成和持续交付等 DevOps 实践允许软件可靠性，即确保质量的新功能快速添加到应用程序中，同时用户继续获得流畅和优质的体验。 
规模 
由于快速交付和可靠性，添加到您的应用程序以使其根据业务需求可扩展，而不会影响用户体验。 
改善协作 
随着开发人员和运营团队分担责任以实现更快的交付，协作得到改善。团队可以根据共同的职责添加和即兴创作，从而减少移交和依赖关系之间的等待时间。 
安全 
DevOps 提供了一系列安全性和合规性测试/管理工具，因此您可以在不牺牲安全性的情况下即兴创作您的应用程序。 
DevOps 在您的工程团队中的好处 
软件条款已经从支持企业的在线形象转变为成为企业的一个关键方面。在这样的市场中，应用程序必须紧跟最新需求并动态适应趋势以促进业务发展并实现客户满意度。 
DevOps 模型允许灵活地更快地部署业务就绪应用程序，并根据客户需求添加或更新应用程序。通过缩小应用程序开发过程的各个部分之间的差距，DevOps 可以快速部署高性能、快速增强和安全的应用程序。 
使用正确的工具和正确的思维方式调整 DevOps对于成功实施和利用 DevOps 模型非常重要。 
 
DevOps 实践 
DevOps 是一种不断发展的模型，可根据不同的策略适应组织需求。敏捷思维支持 DevOps 和迭代开发模型。一些 DevOps 模型是敏捷、Scrum、看板等。 
持续集成 
不断对代码库进行更改，并根据新要求、客户反馈等添加新代码。自动运行构建和测试以确保更改符合要求的标准并遵守以前的功能。持续集成使所有开发人员都可以访问代码库，并定期推出新的更改，从而可以在需要的地方轻松进行重构。 
详细了解持续集成对您的团队的好处。 
持续交付 
随着代码库的更新，将执行构建和检查以检查其是否正常工作。然后将代码移至预生产环境并进行测试，直到准备好投入生产。因此，团队始终存在可用于生产的代码，并经常添加新的更新。 
阅读如何为您的项目从头开始设置CI/CD 管道。 
微服务 
微服务架构将单个应用程序分解为通过安全网络相互交互的小服务。每个服务独立运行其进程，同时与其他微服务通信以完成更大的任务。由于每个微服务都可以独立部署，因此可以更快地推出更新，并且可以快速查明和修复错误。 
DZone 最受欢迎的文章之一，什么是微服务？详细介绍了微服务。 
基础设施即代码 (IaC) 
基础设施即代码允许用户以脚本或代码的形式管理和实施基础设施，可以像任何其他代码更改一样进行管理。版本控制、频繁更新和还原是 IaC 实践的一些功能。Terraform 是 IaC 工具的一个示例，用于管理应用程序的整个基础架构生命周期。 
作为一个易于扩展的基础设施，可以根据需要进行管理。了解您可以在IaC 实施中遵循的最佳实践。 
监控和记录 
随着应用程序在全球 24/7 全天候使用，主动监控应用程序的用户活动、功能差异和意外错误等变得更加重要。通过记录和监控，团队可以针对特定错误设置警报、管理基础架构和软件工作，并更快地查明错误和错误。 
详细了解用于监控应用程序的不同DevOps 工具。 
沟通与协作 
DevOps 文化通过将来自不同开发和运营工作流程的人员聚集在一起来鼓励沟通和协作。在团队之间交流需求和挑战并有效地协作解决和部署它们是 DevOps 团队模型的一部分。实现这一目标需要适当的团队间沟通工具。 
本文重点介绍DevOps 团队中的团队沟通以及用于团队间协作的工具。 
 
DevOps 工具链 
工具链是编程世界中用于实现业务目标的一组工具。DevOps 还使用此类编程工具在开发人员和运维工程师之间进行协作和协调。使用它们，团队可以更快地编程、测试和部署应用程序。这些工具有多种用途，从通信和版本控制到用于质量检查和部署的自动化管道。 
计划 
计划是任何项目的第一步。确定业务计划和需求，然后将其分解以供开发团队使用，这是规划过程的一部分。 
一些用于规划的工具包括 - Git、Jira 等。 
代码 
在规划之后，这是执行阶段的一部分，在此阶段根据设计实施软件的实际开发。 
用于编码的工具包括 - GitHub、GitLab、Atlassian、Bitbucket 等。 
建造 
与以前开发人员必须手动运行构建和检查代码不同，自动构建在此阶段进行配置和运行。检查，如代码质量，也可以与同时部署一起添加到构建中。 
此阶段使用的工具包括 - Docker、Jenkins、Gradle、Maven 等。 
测试 
测试是开发过程中不可或缺的一部分。在此阶段，手动或通过自动化测试代码。 
此阶段涉及的工具包括 - JUnit、Selenium、TestNG、Soap 等。 
部署 
此阶段包括通过自动发布到生产环境来部署软件。部署构建被安排、协调，然后运行以完成此过程。 
此阶段使用的工具包括 - Jenkins、Kubernetes、Docker 等。 
操作 
生产期间的软件管理属于此阶段。 
支持此阶段的工具有 - Ansible、Powershell、Puppet 等。 
监视器 
由于应用程序仍处于部署状态，因此监视应用程序以捕获此阶段可能发生的任何错误或错误非常重要。使用各种监控工具可以快速隔离任何错误或问题。 
此阶段使用的工具包括 - Grafana、Splunk、Datalog、Wireshark 等。 
DevOps 工具列表 
各种工具用于实现将开发和运营结合在一起的 DevOps 目标。虽然这些工具没有定义 DevOps，但它们极大地帮助了流程自动化，这是 DevOps 的另一个目标。  
借助正确的工具，团队可以轻松协调和协作，以减少需求生成和部署之间的差距。 
50+ 有用的 DevOps 工具一文包括详细的工具列表，您可以在项目中使用这些工具来实现您的 DevOps 目标。 
 DevOps 的左移原则是什么？ 
在任何正常的开发周期中，都会对不同的模块进行更改，然后将它们组合在一起并进行测试以实现复杂的业务目标。在此过程中，集成测试在稍后阶段执行，在该阶段可能会在软件组合在一起时检测到问题。错误、错误和其他跨平台依赖问题会在更晚的阶段被检测到，然后解决这些问题的过程会被匆忙地完成，以达到设定的最后期限。 
DevOps 中的“左移”原则是指将测试（主要是集成测试）转移到开发的早期阶段，并随着需求的实现而添加到测试中。 
这需要对以代码为主要优先事项的业务思维进行文化变革。许多组织现在都在使用这种方法在早期阶段检测问题，从而节省大量时间和后期维护。 
敏捷中的测试驱动开发侧重于根据需求测试和编写测试用例，然后添加代码来支持。同样，左移原则侧重于开发生命周期早期阶段的集成测试，以实现综合目标。 
“左移原则和 DevOps”更详细地介绍了左移原则的推理、历史和正确实施。 
 
什么是 DevSecOps？ 
DevOps 模型使团队能够一起工作并以更快的速度交付，同时克服敏捷的缺点。 
安全性是任何应用程序都不应该妥协的东西。开发人员通过牢记应用程序的安全性来实施更改。安全的基础设施、服务之间的通信以及代码安全中可能存在的数据泄漏都是开发、测试和部署过程的重要组成部分。 
DevSecOps 是一个为开发和运营增加安全性的术语。由于从一开始就将安全作为开发过程的一部分，因此可以更快地开发安全可靠的应用程序。可以根据业务需求和客户反馈添加新的更改。 
DevSecOps 旨在将安全性集成到开发生命周期的每个阶段。因此，安全性不仅仅是一个需要注意的参数，应用程序的构建方式是从规划阶段就考虑到安全性。这导致从一开始就安全的应用程序，而不是稍后添加安全性并根据要求修改已完成的代码并发现漏洞。 
要了解有关 DevSecOps 的更多信息，请参阅数据：什么是 DevSecOps？是快速阅读，我们的参考卡 DevSecOps介绍更详细地介绍了 DevSecOps。 
DevOps 和 SRE 之间有什么区别？ 
SRE 或站点可靠性工程侧重于自动化或完成通常由运营团队通过开发人员或运营工程师完成的任务，他们使用一组工具或软件来自动化任务。这将执行的大部分操作汇集在一起​​，消除了对项目单独管理部分的需要，从而将软件开发下的模块汇集在一起​​。 
SRE 专注于自动化运营，而 DevOps 则专注于将开发和运营团队聚集在一起。两个团队都清楚地了解另一个团队所做的要求和更改，从而弥合了不同流程之间的差距以及协调信息和同步发布周期所需的时间。 
DevOps 和 SRE 的共同目标是消除传统的分离方法，并将依赖的流程整合到一个流程中。但是，DevOps 和 SRE 实现这一目标的方式有所不同。 
这篇关于DevOps 和 SRE 区别的文章更加详细，提供了有关 SRE 和 DevOps 实践的更多信息。 
DevOps 词汇表 
敏捷。一种基于计划、开发、测试和部署的重复循环的软件开发方法。 
自动化。将进程/任务配置为自行运行而不是手动执行。 
部署。在开发范式中，部署是指计划、开发/配置、测试，然后在特定环境中运行更改以供用户使用。 
一体化。 集成是指将各种模块组合在一起作为一个单一的系统。 
发布。 版本是提供给最终用户的定期更新或最新版本。 
重构。 更改或更新现有功能或代码以进行改进或添加新更新，同时保持相同的行为。 
孤立的。 与其他对应物隔离或分开。 
版本控制。 版本控制是为同一产品的不同版本分配唯一的名称/编号。 
建议了解 DevOps 中使用的所有术语，以更有效地理解模型。我们的文章100 个 DevOps 术语详细介绍了您在 DevOps 世界中需要了解的所有术语。 
实现Devops自动化工具整理 
 
 持续构建（Continuous Build，CB）、持续集成（Continuous Integration，CI）、持续交付（Continuous Delivery，CD）、自动化测试（Auto Testing, AT）、自动化运维。 
 
版本控制&协作开发GitHub、GitLab、BitBucket、Coding、Gitee自动化构建和测试Maven 、Selenium、PyUnit、QUnit、JMeter、Gradle、Nexus持续集成&交付Jenkins、bamboo、Capistrano、BuildBot、Fabric、Travis CI、flow.ci Continuum、CruiseControl、TeamCity、Spinnaker容器平台Docker、Rocket、Ubuntu（LXC）、AWS、阿里云配置管理Saltstack、Ansible、Vagrant、Chef、Puppet、CFengine、Rudder、RunDeck微服务平台OpenShift、Pivotal Cloud Foundry、Kubernetes、Mesosphere、Istio、Docker Swarm日志管理Logstash、Fluentd监控，警告&分析Nagios、Ganglia、Sensu、Zabbix、ICINGA、Graphite、DataDog、Kibana、Prometheus安全测试blackduck、coverity、sonarQube、burp suite 
   
 
 
 
 
 
 
 
 
 
 
结论 
近年来，DevOps 获得了很大的普及。随着敏捷组织转向云来满足他们的所有需求，DevOps 获得了更多关注，因为它是实现更快部署的一种手段。安全性也是采用 DevOps 的组织的主要关注点，因此出现了 DevSecOps 一词。 
DZone 不断致力于添加科技界的最新内容和热门话题。我们为从初学者到专家的所有人提供内容，包括有趣的主题、教程、解决方案和科技界的辩论。 
要了解有关 DevOps 的更多信息、最新的 DevOps 趋势或做出贡献，请访问我们的DevOps 专区。 
 
 
 

                
        
        
"近些年来，DevOps这个词汇出现的频率越来越高，各种大会上经常出现 DevOps 专场，并随着分布式架构在业界的广泛实施，DevOps 和运维再一次成为社区的关注焦点。有人说，DevOps 是软件工程发展至今的第三次革命，可见它带给整个行业的影响是很深远的。 
最近公司内部也开始向DevOps转型，开始设计和开发 DevOps 平台。虽然说DevOps在业界上已经有不少成功的案例，但是由于公司内部团队的文化和流程千差万别，可以说几乎找不到一个标准实施路线图，可以按部就班的在公司内部去落地和推行DevOps。就如DevOps它的“定义”到底是什么，好像从来没有人能说清楚。 
现在，我们先来看看维基百科对 DevOps 的定义： 
 
 DevOps（开发 Development 与运维 Operations 的组合词）是一种文化、一场运动或实践，强调在自动化软件交付流程及基础设施变更过程中，软件开发人员与其他信息技术（IT）专业人员彼此之间的协作与沟通。它旨在建立一种文化与环境，使构建、测试、软件发布得以快速、频繁以及更加稳定地进行。 
 
看完DevOps的定义，我估计也没谁能看懂这到底是在说什么。于是乎，每当提及 DevOps 是什么的时候，最常出现的比喻就是“盲人摸象”。毕竟每个人的视角都不相同，看到的 DevOps 自然也是千差万别。客观来说，从 DevOps 运动诞生开始，那些先行者们就从来没有试图给 DevOps 下一个官方的定义。当然，这样做的好处很明显，由于不限定人群和范围，每个人都能从自己的立场来为 DevOps 做贡献，从而使 DevOps 所涵盖的范围越发宽广。但是，坏处也是显而易见的。随着 DevOps 的不断发展，刚开始接触 DevOps 的人往往不得要领，只见树木不见森林，认知的偏差使得 DevOps 越发地神秘起来。 
与其纠结于 DevOps 的定义，不如让我们一起回到起点，来看看什么是DevOps及为什么需要 DevOps 。 
什么是DevOps 
在介绍DevOps之前，我们先来看下传统的业务研发流程：开发人员开发完业务代码后，把自测通过的代码打包交给测试人员，然后测试人员把代码部署在测试环境中进行测试，如果测试不通过，就反馈 bug 给开发人员进行修复；如果通过，开发就把测试通过的代码交给运维人员打包，然后运维人员再发布到线上环境中去。由上可见，在传统的开发模式下，开发人员、测试人员和运维人员的职责划分十分明确，他们往往分属于不同的职能部门，一次业务上线流程需要三者之间进行多次沟通，整个周期基本上是以天为单位。如果我们能够把开发、测试和发布流程串联起来，就像生产流水线上那样，每个步骤完成后，就自动执行下一个步骤，无须过多的人为干预，那业务的迭代效率不就会提高很多吗？ 
是的，DevOps的思想就是如此。DevOps 是通过平台（Platform）、流程（Process）和人（People）的有机整合，以 C（协作）A（自动化）L（精益）M（度量）S（共享）文化为指引，旨在建立一种可以快速交付价值并且具有持续改进能力的现代化 IT 组织。DevOps 是一种新型的业务研发流程，也可以理解为一种新的技术思维，它摒弃了传统的开发、测试和运维严格区分的观念，把三者的角色融为一体，让服务的开发者负责从开发、测试到发布的整个生命周期，真正的承担起服务负责人的角色。 
DevOps 作为软件工程的第三次革命，在数字化转型的大潮之下，几乎成了所有通过交付软件来提供服务的企业的必选项。因为，DevOps 不仅可以改善企业的软件交付过程，实现高质量和高效率兼得，同时也可以持续改善企业内部的工程师文化，提升员工信心，激发员工的活力和价值创造，从而帮助企业在 VUCA 时代占得先机，获得更大的成功。 
为什么需要 DevOps 
近些年随着微服务、容器化等技术的兴起，越来越多的企业将原有的单体应用架构项目逐渐进行微服务化，方便服务可以独立进行开发、测试和运维。但随着原有项目的不断拆分，微服务的数量越来越多时，却又仿佛陷入一个新的泥沼，无论是业务代码的开发还是测试和运维，工作量都比之前提升了很多。 
因为在采用单体应用架构时，一个业务需求只需要修改单体应用的代码，然后针对这个单体应用进行测试，测试通过后再把单体应用的代码发布到线上即可。而拆分为微服务之后，一个大的系统被拆分为多个小的系统，一个业务需求可能要同时修改多个微服务的代码，这样的话多个微服务都需要进行测试，测试通过了都需要把代码发布到线上，显然工作量成倍增加。这时候我们迫切需要一种新的开发、测试和运维模式来解决这个问题，这也就是需要DevOps的原因。 
DevOps通过将开发、测试和运维流程自动化，以减轻微服务拆分后带来的测试和运维复杂度的提升，同时还提高了业务研发的效率。当然DevOps 除了包括流程的自动化处理，还包括智能监控决策、在线自动扩缩容等等内容，甚至还引入了人工智能技术走向另外一个新方向 AIOps。 
总结 
今天梳理了什么是DevOps及我们为什么需要DevOps，希望大家可以在我的文章中得到一些启发。以上是我近段时间对于DevOps学习内容的梳理，如有错误敬请指正。 
 
 本文由博客群发一文多发等运营工具平台 OpenWrite 发布 

                
                
                
        
        
"提到DevOps这个词，我相信很多人一定不会陌生。作为一个热门的概念，DevOps近年来频频出现在各大技术社区和媒体的文章中，备受行业大咖的追捧，也吸引了很多吃瓜群众的围观。那么，DevOps是什么呢？有人说它是一种方法，也有人说它是一种工具，还有人说它是一种思想。更有甚者，说它是一种哲学。越说越玄乎，感觉都要封神啦！DevOps这玩意真的有那么夸张吗？它到底是干嘛用的？为什么行业里都会对它趋之如骛呢？今天这篇文章，小枣君就和大家好好聊一聊这个DevOps。DevOps的起源这个故事有点长，从头开始讲起吧。上个世纪40年代，世界上第一台计算机诞生。从诞生之日起，它就离不开程序（Program）的驱动。而负责编写程序的人，就被称为“程序员”（Programmer）。程序员是计算机的驾驭者，也是极其稀缺的人才。那个时候，只有高学历、名校出身的人，才有资格成为程序员，操控计算机。随着人类科技的不断发展，PC和Internet陆续问世，我们进入了全民拥抱信息化的时代。越来越多的企业开始将计算机作为办公用的工具，用以提升生产力。而普通个人用户也开始将计算机作为娱乐工具，用以改善生活品质。于是，计算机的程序，开始变成了一门生意。程序，逐步演进为“软件（software）”，变成了最赚钱的产品之一。在软件产业里，程序员有了更专业的称谓，叫做“软件开发工程师（Software Development Engineer）”，也就是我们常说的“码农”。我们知道，一个软件从零开始到最终交付，大概包括以下几个阶段：规划、编码、构建、测试、发布、部署和维护。最初，程序比较简单，工作量不大，程序员一个人可以完成所有阶段的工作。随着软件产业的日益发展壮大，软件的规模也在逐渐变得庞大。软件的复杂度不断攀升。一个人已经hold不住了，就开始出现了精细化分工。码农的队伍扩大，工种增加。除了软件开发工程师之外，又有了软件测试工程师，软件运维工程师。分工之后，传统的软件开发流程是这样的：软件开发人员花费数周和数月编写代码，然后将代码交给QA（质量保障）团队进行测试，然后将最终的发布版交给运维团队去布署。所有的这三个阶段，即开发，测试，布署。早期所采用的软件交付模型，称之为“瀑布（Waterfall）模型”。瀑布模型，简而言之，就是等一个阶段所有工作完成之后，再进入下一个阶段。这种模型适合条件比较理想化（用户需求非常明确、开发时间非常充足）的项目。大家按部就班，轮流执行自己的职责即可。但是，项目不可能是单向运作的。客户也是有需求的。产品也是会有问题的，需要改进的。随着时间推移，用户对系统的需求不断增加，与此同时，用户给的时间周期却越来越少。在这个情况下，大家发现，笨重迟缓的瀑布式开发已经不合时宜了。于是，软件开发团队引入了一个新的概念，那就是大名鼎鼎的——“敏捷开发（Agile Development）”。敏捷开发在2000年左右开始被世人所关注，是一种能应对快速变化需求的软件开发能力。其实简单来说，就是把大项目变成小项目，把大时间点变成小时间点，然后这样：有两个词经常会伴随着DevOps出现，那就是CI和CD。CI是Continuous Integration（持续集成），而CD对应多个英文，Continuous Delivery（持续交付）或Continuous Deployment（持续部署）。美其名曰：“持续（Continuous）”，其实就是“加速——反复——加速——反复……”，这样子。画个图大家可能更明白一点：敏捷开发大幅提高了开发团队的工作效率，让版本的更新速度变得更快。很多人可能会觉得，“更新版本的速度快了，风险不是更大了吗？”其实，事实并非如此。敏捷开发可以帮助更快地发现问题，产品被更快地交付到用户手中，团队可以更快地得到用户的反馈，从而进行更快地响应。而且，DevOps小步快跑的形式带来的版本变化是比较小的，风险会更小（如下图所示）。即使出现问题，修复起来也会相对容易一些。虽然敏捷开发大幅提升了软件开发的效率和版本更新的速度，但是它的效果仅限于开发环节。研发们发现，运维那边，依旧是铁板一块，成为了新的瓶颈。运维工程师，和开发工程师有着完全不同的思维逻辑。运维团队的座右铭，很简单，就是“稳定压倒一切”。运维的核心诉求，就是不出问题。什么情况下最容易出问题？发生改变的时候最容易出问题。所以说，运维非常排斥“改变”。于是乎，矛盾就在两者之间集中爆发了。这个时候，我们的DevOps，隆重登场了。DevOps到底是什么DevOps这个词，其实就是Development和Operations两个词的组合。它的英文发音是 /de’vɒps/，类似于“迪沃普斯”。DevOps的维基百科定义是这样的：DevOps是一组过程、方法与系统的统称，用于促进开发、技术运营和质量保障（QA）部门之间的沟通、协作与整合。这个定位稍微有点抽象，但是并不难理解。反正它不是某一个特定软件、工具或平台的名字。从目标来看，DevOps就是让开发人员和运维人员更好地沟通合作，通过自动化流程来使得软件整体过程更加快捷和可靠。很多人可能觉得，所谓DevOps，不就是Dev+Ops嘛，把两个团队合并，或者将运维划归开发，不就完事了嘛，简单粗暴。注意，这个观点是不对的。这也是DevOps这些年一直难以落地的主要原因。想要将DevOps真正落地，首先第一点，是思维转变，也就是“洗脑”。不仅是运维的要洗，开发的也要洗。员工要洗，领导更要洗。DevOps并不仅仅是组织架构变革，更是企业文化和思想观念的变革。如果不能改变观念，即使将员工放在一起，也不会产生火花。除了洗脑之外，就是根据DevOps思想重新梳理全流程的规范和标准。在DevOps的流程下，运维人员会在项目开发期间就介入到开发过程中，了解开发人员使用的系统架构和技术路线，从而制定适当的运维方案。而开发人员也会在运维的初期参与到系统部署中，并提供系统部署的优化建议。DevOps的实施，促进开发和运维人员的沟通，增进彼此的理（gan）解（qing）。在思维和流程改变的同时，想要充分落地DevOps，当然离不开软件和平台的支持。目前支持DevOps的软件实在是太多了。限于篇幅，就不一一介绍了。话说回来，现在DevOps之所以被吹得天花乱坠，也有这些软件和平台的功劳，可以趁机卖钱啊。DevOps生态圈中令人眼花缭乱的工具上述这些关键要素里面，技术（工具和平台）是最容易实现的，流程次之，思维转变反而最困难。换言之，DevOps考验的不仅是一家企业的技术，更是管理水平和企业文化。对比前面所说的瀑布式开发和敏捷开发，我们可以明显看出，DevOps贯穿了软件全生命周期，而不仅限于开发阶段。下面这张图，更明显地说明了DevOps所处的位置，还有它的价值：DevOps的发展现状DevOps这个词来源于2009年在比利时根特市举办的首届DevOpsDays大会，为了在Twitter上更方便的传播，由DevOpsDays缩写为DevOps。目前，DevOps处于高速增长的阶段。尤其是在大企业中，DevOps受到了广泛的欢迎。根据2018年的调查发现，74%的受访者已经接受了DevOps，而前一年这一比例为66%。越大的企业，越喜欢DevOps。包括Adobe、Amazon、Apple、Airbnb、Ebay、Etsy、Facebook、linkedIn、Netflix、NASA、Starbucks、Walmart、Sony等公司，都在采用DevOps。如今，DevOps几乎已经成为了软件工程的代名词。DevOps迅猛发展，相关专业人才的薪资待遇也跟着水涨船高。根据调研，DevOps工程师在美国的平均年薪为130000美金，在中国平均年薪也在40万-50万区间，能力强者年薪百万也是比比皆是。薪资的猛涨，又带动了IT工程师们学习和认证的热潮。DevOps的认证目前最受欢迎的就是EXIN DevOps Master和EXIN DevOps Professional。这些认证的培训费用不低，但是仍然吸引了很多人踊跃报名。EXIN DevOps认证体系DevOps与虚拟化、容器、微服务这几年云计算技术突飞猛进，大家应该对虚拟化、容器、微服务这些概念并不陌生。当我们提到这些概念的时候，也会偶尔提及DevOps。它们之间有什么联系呢？其实很简单。大家可以设想一下，如果要对一项工作进行精细化分工，我们是对一个大铁疙瘩进行加工方便？还是拆成一块一块进行加工更加方便？显然是拆分之后会更加方便。所谓“微服务”，就是将原来黑盒化的一个整体产品进行拆分（解耦），从一个提供多种服务的整体，拆成各自提供不同服务的多个个体。如下图所示：体式架构（Monolithic）→ 微服务架构（Microservices）微服务架构下，不同的工程师可以对各自负责的模块进行处理，例如开发、测试、部署、迭代。而虚拟化，其实就是一种敏捷的云计算服务。它从硬件上，将一个系统“划分”为多个系统，系统之间相互隔离，为微服务提供便利。容器就更彻底了，不是划分为不同的操作系统，而是在操作系统上划分为不同的“运行环境”（Container），占用资源更少，部署速度更快。明白了吧？虚拟化和容器，其实为DevOps提供了很好的前提条件。开发环境和部署环境都可以更好地隔离了，减小了相互之间的影响。这也是DevOps为什么2009年时不火，现在越来越火的一个主要原因之一。最后的话天下武功，唯快不破。时代发展到现在，客户的需求瞬息万变，市场的风向也难以预测。作为企业，想要生存下去，只有让自己变得更快。作为员工，必须让自己眼光更加长远，内心更加包容。转自公众号 鲜枣课堂 
作者：UCloud云计算 链接：https://www.zhihu.com/question/58702398/answer/1691681949 来源：知乎 著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。 
新创建一个公众号 Rockey小何同学 想相互交流的同学可以关注一下哈！ 感谢支持！
                
                
                
        
        文章知识点与官方知识档案匹配，可进一步学习相关知识云原生入门技能树首页概览12783 人正在系统学习中
        
          
          
            
          
          
            日常编程交流群
            
              
              QQ群名片"
"我是做DevOps这个领域的创业者，跟一些中小互联网和传统IT公司都有过这方面的一些探讨。 
     现在对实施DevOps有想法的公司，多半都是业务发展还不错，在研发和运维上都比较大的压力的公司，希望通过引入DevOps来提升公司IT部门的总体运作效率，来支撑业务的发展速度。 
     关于DevOps对效率的提升，Puppet出过一份调研报告，算是比较成体系的。 中文版的报告链接在此：http://www.idcos.com/download/devops-report 
     工欲善其事，必先利其器，现在大家在DevOps领域最关注的还是在工具层面。 下面是我跟这么多公司接触下来，大家使用比较多的工具： 1、监控工具 比较老牌的就是Zabbix,Nagios，用Zabbix的感觉是最多的。 国内的有小米开源的OpenFalcon。 这类监控工具一般是对服务器、服务（中间件，数据库）做一些常用指标的监控。 
     2、性能分析/APM工具 APM很多时候被认为是监控的一个细分领域。 但在现代复杂分布式系统架构下，APM工具往往更能准确、直接的帮助用户定位到性能瓶颈，比如哪一个URL访问慢、哪一个方法执行慢、哪一个SQL执行慢。 
     在以往要想拿到这些数据，往往得需要比较资深的架构师、DBA一起合作才能拿到这些数据，而定位瓶颈的效率往往还不太高。 现在通过APM工具能让普通技能的运维人员，也很高效的定位到这些深层的问题。 
     现在商用的APM工具不少，国外的有Newrelic，国内知名的就有听云、Oneapm、透视宝这些。 开源的也有Pinpoint（naver开源）、Zipkin（twitter开源）、CAT（大众点评开源）. 
     3、批量+自动化运维工具 这里就比较多了，知名的有Puppet、Ansible、Chef、Saltstack这些。 这些在网上的资料也比较多，找比较新版本的官方文档看就行了。 
     Puppet和chef是比较早期的工具，受众面也很大，不过这两个工具基于ruby实现，现在要找到熟悉ruby的人来做这块的二次开发可不容易。 而ansible和saltstack则相对新生代一些，目前用户基数增长很快，基于python实现，要找做二次开发的人也相对容易的多。 
     4、集中日志分析工具 在一个服务器比较多的环境下，如何集中的管理和分析、查询日志，已经变成一个比较强的需求了。 想象一下，如果发生了某个错误，你还得一台台机器去翻日志文件，是不是很蛋疼。 在这个需求驱动下，就诞生了一些集中日志分析工具。 
     在开源领域，比较知名的就是ELK这一套工具了，涵盖了日志采集、上报、搜索、展现这一类基本需求，现在比较多的上规模的企业都用这个，网上资料也大把。 核心实现机制都是通过一些日志采集代理（类似Filebeat）去爬日志文件，将最新的部分提交到采集服务端，后端再对接搜索引擎，能支持很快速、准确的搜索即可。 
     有一个国内不怎么知名的Sentry日志收集服务，比较轻量级，本身是Python做的，与各种语言的日志框架做了非常好的集成，可以很方便的集中收集异常日志，并分配给对应的开发人员。 它在github上有10000多个star了，这在DevOps相关的软件里，都是排名非常靠前的了。 git的地址：GitHub - getsentry/sentry: Sentry is cross-platform crash reporting built with love 
     5、持续集成/发布工具 我接触的人都是用Jenkins的，没有用其他的，可能跟我所在的技术圈子有关。 
     集成打包的过程其实一般都比较简单，配好版本库和打包脚本就行。 但发布的过程就比较复杂，有些是全量发布，但也有非常多的IT团队采用增量发布。 这个方面如果想用工具，还是得先分析清楚现有的发布流程，手工情况下怎么做，哪些能通过自动化工具来完成。 
     6、IaaS集成 
      最近两年的公有云推广比较迅速，很多新的服务器采购都被导入到云上去了。 
      现在主流的公有云都提供了比较完备的API，基于这些API也可以做一些针对基础资源的自动化操作，比如游戏行业的快速开服。 
     
     
      
       
      
     
    
   
  
  
   
    
     
     Dev, QA, Ops 的交汇处我们认为就是 DevOps。 实际上说白了，DevOps 就是把产品开发过程中各部门交汇处的活给干了，让各部门都专注于干他们自己的活儿。 
     依稀记得，刚进公司的时候，每天工作的大头就是给 QA， TA， PM, Boss编译各种版本的包，真正写代码的时间寥寥无几 :( &amp;lt;img src=&quot;https://pic2.zhimg.com/50/v2-82efc5c06509b986951889f86fcd6479_hd.jpg&quot; data-rawwidth=&quot;252&quot; data-rawheight=&quot;220&quot; class=&quot;content_image&quot; width=&quot;252&quot;&amp;gt; 
      
       
       &amp;lt;img src=&quot;https://pic1.zhimg.com/50/v2-e383c25578c80ae95ae37a759194dcc8_hd.jpg&quot; data-rawwidth=&quot;210&quot; data-rawheight=&quot;193&quot; class=&quot;content_image&quot; width=&quot;210&quot;&amp;gt; 
       &amp;lt;img src=&quot;https://pic1.zhimg.com/50/v2-5bbdcf1e708b3ae27e8add977a24b194_hd.jpg&quot; data-rawwidth=&quot;1440&quot; data-rawheight=&quot;350&quot; class=&quot;origin_image zh-lightbox-thumb&quot; width=&quot;1440&quot; data-original=&quot;https://pic1.zhimg.com/v2-5bbdcf1e708b3ae27e8add977a24b194_r.jpg&quot;&amp;gt; 
      
     
    
   
  

                
        
        
"DevOps即Development和Operations的组合词，是一组过程、方法与系统的统称，用于促进开发应用程序或软件工程、技术运营和质量保障QA部门之间的沟通、协作与整合。 什么是DevOps？ DevOps是一种重视“软件开发人员（Dev）”和“IT运维技术人员（Ops）”之间沟通合作的文化，它促进开发和运营团队之间的协作，以自动化和可重复的方式更快地将代码部署到生产中。 DevOps有助于提高组织提供应用程序和服务的速度。它使组织能够更好地为客户服务，并在市场中更有竞争力。 简而言之，DevOps可以定义为开发和IT运营的一致性，以及更好的沟通和协作。 为什么需要DevOps？ 在DevOps之前： ●　开发和运营团队完全孤立。 ●　测试和部署是在设计构建之后完成的独立活动。因此，他们比实际构建周期消耗更多时间。 ●　在不使用DevOps的情况下，团队成员将大量时间花在测试，部署和设计上，而不是构建项目。 ●　手动代码部署会导致生产中出现人为错误 ●　开发和运营团队有各自的时间表，不同步导致进一步的延误。 在DevOps 模式下，开发团队和运营团队都不再是“孤立”的团队。有时，这两个团队会合为一个团队，他们的工程师会在应用程序的整个生命周期（从开发测试到部署再到运营）内相互协作，开发出一系列不限于单一职能的技能。 DevOps原则 这里有六个在采用DevOps时必不可少的原则： 1、以客户为中心的行动： DevOps团队必须采取以客户为中心的行动，因为他们应该不断投资于产品和服务。 2、端到端的责任： DevOps团队需要提供性能支持，直到它们终止为止。这提高了产品的责任水平和质量。 3、持续改进： DevOps文化专注于持续改进，以尽量减少浪费。它不断加快提供的产品或服务的改进。 4、自动化一切：自动化是DevOps流程的重要原则。这不仅适用于软件开发，也适用于整个基础架构环境。 5、作为一个团队工作：在DevOps文化角色中，设计人员，开发人员和测试人员已经定义。他们所需要做的就是作为一个团队完成合作。 6、监控和测试所有内容： DevOps团队拥有强大的监控和测试程序非常重要。 以上就是本篇文章的全部内容，希望能对大家的学习有所帮助。更多精彩内容大家可以关注php中文网相关教程栏目！！！ 以上就是DevOps是什么意思的详细内容，更多请关注php中文网其它相关文章！
                
        
        
"每个公司都在提倡保证质量，提高效率，但有人的地方必定有是非…只要不需要人操作，那么质量和效率都会直线上升，DevOps，某个牛x的人提出的概念，强调从构建、集成、测试到部署和运维等全过程的高度自动化。   构建工具链或自动化全覆盖的持续研发的方法和工具，让基础设施、运维也成为产品代码的一部分，能够实现持续设计、持续编程、持续构建、持续测试、持续发布、持续部署、持续监控等，能够及早发现并更快地修复缺陷，整个研发更具透明性、运维环境更加稳定，实现越来越快的软件交付，减少协作、测试和沟通成本。从这个角度看，测试能力体现在测试效率和速度上，在保证满足质量的要求下，测试进行的越快越好！ 以下是公司现行的基础设施框架：  
 
 解读： **Galileo：**监控系统，告警、指标、分布式链路追踪、数据可视化等监控要素，是分布式软件运维和演进的心脏，是解决复杂度和不确定性的工具。监控系统不但要给运行于基础设施之上的服务，提供可观测、可推断、可追溯的保证，基础设施自身的系统也不应例外。 **Planck：**容器云平台，基于kubernetes，此系统帮助研发减少对于运行环境的假设，使运维操作位于一致的资源抽象层之上。Planck提供的能力，包括资源分配与隔离，容器化部署与调度，证书与秘密资源管理，日志归档，用量管理，多数据中心支持等等。 **微服务：**微服务主要是通过将应用程序分解为可独立部署和可扩展的组件，来隔离故障，适应独立的演进以及适应不同规模的方法。微服务是对应分布式系统常见问题的一组工具集，从运行上看，微服务是软件服务和基础设施相互配合的环境，从演进上看，微服务是一个软件生态。   在抽象层微服务环境定义了一系列契约：服务元数据，通过流量平面和控制平面的服务治理，资源计划，进入权限，配置注入，ACL，部署模式，依赖性隔离，故障处理等等；   在契约之下，微服务环境结合Planck、Galileo、分布式和版本化配置系统（KIP）、编程架构（Maxwell）、API网关（Lorenz），通过配置注入、服务注册与发现、路由与负载均衡、故障容忍、访问控制等配合，完成对服务的治理。 
 
  基于以上基础设施，构造出测试相关的质量体系架构… 未完待续…
                
                
                
        
        
"devOps路线图 
 1. 路线图2. 使用中的路线图2.1. 内网环境依赖的其他服务/组件 
  
 
 
1. 路线图 
 
2. 使用中的路线图 
 
2.1. 内网环境依赖的其他服务/组件 

                
                
                
        
        文章知识点与官方知识档案匹配，可进一步学习相关知识Java技能树首页概览118041 人正在系统学习中"
"一、DevOps的诞生 
早期所采用的软件交付模型，称之为“瀑布（Waterfall）模型”。 
 
瀑布模型，简而言之，就是等一个阶段所有工作完成之后，再进入下一个阶段。这种模型适合条件比较理想化（用户需求非常明确、开发时间非常充足）的项目。大家按部就班，轮流执行自己的职责即可。但是，项目不可能是单向运作的。客户会有新需求、产品也会有问题需要改进。 
 
2001 年由软件领域的 17 位顶尖大师共同提出敏捷宣言，在敏捷宣言中，一个重要的原则是“频繁地交付可工作的软件，交付周期可以是数星期也可以是数月，推荐更短的周期”，并强调使用小批量任务进行增量发布，而非大规模的作业和瀑布流程的发布。同时，强调建立自组织的小团队，让成员在高度信任的环境中愉悦地工作。 
敏捷运动的兴起，大幅度提升了软件开发效率，但在开发部门和运维部门的目标和动因之间存在的巨大冲突并未得到解决。开发部门通常负责对市场变化做出响应，以最快的速度将新功能或者变更上线。而运维部门则要以为客户提供稳定、可靠和安全的服务为已任，让任何人都很难甚至无法引入可能会危害生产环境的变更，这通常是产生技术债务（注1）的一个因素。 
软件的快速迭代升级加速了“恶性循环三部曲”（注2），阻碍了业务目标的实现，不但波及公司的内部，而且还影响外部，导致质量低劣的软件和服务、糟糕的客户体验。 
在管理和技术领域里所发生的精益运动、敏捷宣言、敏捷基础设施和Velocity大会、持续交付、丰田套路等重大事件的发展下， DevOps 应运而生。 
 
二、DevOps的定义 
DevOps由Development（开发）和Operations（运维）组合而成，被称为开发运维一体化。 
维基百科对DevOps的定义是，DevOps是一组过程、方法与系统的统称，用于促进开发、技术运营和质量保障（QA）部门之间的沟通、协作与整合。 
           
从目标来看，DevOps让开发人员和运维人员更好地沟通合作（破墙工具），同时通过自动化流程来使得软件整体过程更加快捷和可靠。 
 
DevOps 基于精益、约束理论、丰田生产系统、柔性工程、学习型组织、安全文化、人员优化因素等知识体系，并参考了高信任管理文化、服务型领导、组织变动管理等方法论。把所有这些最可信的原则综合地应用到 IT 价值流中，将DevOps 贯彻于整个技术价值流中，涉及产品管理、开发、QA、IT 运维和信息安全专员等不同角色，在更低的成本和努力下，保障产品的高质量、可靠性、稳定性和安全性。 
 
三、DevOps的基础原则：三步工作法 
 
第一步：流动原则 
建立从开发到运维之间快速的、平滑的、能向客户交付价值的工作流。 
为了最大程度地优化工作流，通过使工作可见、限制在制品数、减小批量大小、减少交接次数、持续识别和改善约束点、消除价值流中的困境和浪费，持续地优化全局目标。 
第二步：反馈原则 
在从右向左的每个阶段中，应用持续、快速的工作反馈机制。通过在整个价值流和组织中建立快速、频繁、高质量的信息流，包括反馈和前馈回路，可以让系统更安全。 
在问题发生时识别问题，群策群力解决问题并构建新的知识，在源头控制质量，并且不断地为下游工作中心做优化。通过这种方式，我们能从源头控制质量，并在流程中嵌入相关的知识。这样不仅能创造出更安全的工作系统，还可以在灾难性事故发生前就检测到并解决它。 
第三步：持续学习与实验原则 
通过建立学习型组织和安全文化、将日常工作的改进制度化、把局部发现转化为全局优化、在日常工作中注入弹性模式、领导层强化学习文化，创造更安全的工作系统，也能承担更多的风险。不管是谁参与了工作，所有经验都可以持续地积累，组织里可以相互借鉴彼此的经验和智慧。 
 
四、总结 
本章描述了 DevOps 的诞生和定义，简单介绍了基础原则三步工作法。其中提升技术价值流的流动性对实施 DevOps 来说至关重要，而建立快速的反馈机制，对于实现技术价值流中的高质量、可靠性和安全性至关重要。三步工作法的第三步原则实现了学习型组织，实现了职能部门之间的高度信任和跨部门合作，接受了“复杂系统中总会发生故障”的事实，并鼓励谈论任何问题以建立一个安全的工作系统。第三步工作的成果不仅是获得了高绩效，而且还提升了弹性、员工的工作满意度以及组织的适应性。 
在下期，我们将讨论从何处开始 DevOps。 
 
 
注1： 
技术债务：类似于金融债务，是指我们当前所做出的决定会导致一些问题，而这些问题随着时间的推移会越来越难解决，未来可采取的措施也越来越少。即使我们审慎地承担技术债务，也依然会产生利息 
注2： 
恶性循环三部曲： 
第一部曲开始于 IT 运维背负技术债务。如应用程序和基础设施过于复杂、异常脆弱、文档不完备等。 
第二部曲开发团队产生新的技术债务。如利用各种捷径完成紧急任务，导致的技术债务增加。 
第三部曲工作质量持续恶化。工作耦合得更加紧密，即使是很小的行动也会导致较大的事故，更加害怕和拒绝做出变更。工作需要更多的沟通、协调和审批；团队必须等待更长的时间，等待相关的工作完成。 
 

                
        
        
"文章目录 
 参考资料六、自动化测试七、内建质量八、技术债务九、环境管理&部署管理1、环境管理的挑战2、低风险的发布手段1）蓝绿部署2）灰度发布3）暗部署 
   
  十、混沌工程十一、DevOps的正向度量体系如何建立十二、持续改进才是团队引入DevOps时最该具备的特质1、鼓励正向回溯和总结2、预留固定时间进行改进3、在团队内部共享业务指标4、激励创造性，并将价值最大化 
  
 
 《DevOps如何落地实施》一共两篇笔记 
 
【DevOps】DevOps如何落地实施（一） 
 
【DevOps】DevOps如何落地实施（二） 
 
参考资料 
 
 《DevOps实战笔记》 极客时间，石雪峰 
 
书接上文 
六、自动化测试 
 
 图片来源：“DevOps Handbook"" 测试数据、用例、脚本的管理，测试过程中数据的收集、度量、分析和展示，以及测试报告的发送等，都是一个成熟的自动化测试框架应该具备的功能。 
 
UI自动化测试（投产比低）接口自动化测试 （投产比高） 
 
 需要搭建接口自动化，可以参考我的博客 【接口自动化平台搭建】TestNG搭建接口自动化（一） 
 
单元测试 
 
 一般是由开发的领导主导，但是国内一般情况下，单元测试的覆盖面并不广泛，也不会被测试领导认可。  
 
测试误报率是体现自动化测试稳定性的一个核心指标。对于不同测试类型和产品形态，误报的的原因有很多。比如测试环境的网络不稳定导致的连接超时、测试脚本和测试工具本身的固有缺陷导致的执行失败、测试数据不齐备、测试资源不可用等等。由于测试误报的客观存在，即便执行了自动化测试并给出了测试结果，但还是需要人工审查判断之后，才能将真正的问题上报缺陷系统。这样一来，在自动化执行末端加入了人工处理，就导致自动化测试难以大规模推行，这也是自动化测试略显“鸡肋”的原因之一。 
 
 那么，要如何解决这个问题呢？ 这就要依赖于自动化测试结果的分析啦。 
 
对自动化测试的问题进行分类。 你要弄清楚一次失败是环境问题、网络问题、功能变更，还是系统缺陷？ 你需要将失败的用例归纳到这些分类之中。 
当一个类别的问题非常多的时候，你可以考虑进行拆分，比如网络问题，你可以拆分为网络不可达、延迟超时、域名解析错误等等。 
增加已有分类的自动识别能力。比如，对于捕获到的常见异常，可以根据异常信息自动上报到对应的错误分类，从而简化人工识别和归类错误的工作量。 
提升自动化测试工具和环境的健壮性，对已知问题增加一定的重试机制。持续积累和丰富错误分类，有针对性地开展改进工作，从而不断提升自动化测试的稳定性。 
七、内建质量 
什么是内建质量？ 
 
 在美国汽车工厂装配流水线的末端，总是有个人在拿着橡胶锤子敲打车门，以检查车门是否安装良好。如果一个公司要靠“拿锤子的人”来保证质量，这就说明，这个公司的流程本身可能就有问题。 
 
传统的软件开发过程中，一个软件的质量往往是由测试团队进行保证，测试工作并不直接提升软件质量，只是为了证明软件质量有缺陷。 
因此，正确的做法是，应该将质量内建到整个流程中。 
那如何实施？ 
 
 在需求环节：定义清晰的需求准入规则。比如需求的价值衡量指标是否客观、需求的技术可行性是否经过了验证、需求的依赖是否充分评估、需求描述是否清晰、需求拆分是否合理、需求验收条件是否明确等等。“一句话需求”和“老板需求”是非常典型的例子。由于没有进行充分沟通，研发就跟着感觉走，结果交付出来的东西完全不是想要的，这就带来了返工浪费。在开发阶段：代码评审和持续集成。在测试阶段：使用各类自动化测试，以及手工探索测试，覆盖安全、性能、可靠性等，来保障产品质量；在部署和发布阶段，可以增加数据库监控、危险操作扫描、线上业务监控等多种手段。 
 
快速失败原则 
关于内建质量，有个经典的案例就是丰田公司的安灯系统，也叫作安灯拉绳。 
丰田的汽车生产线上方有一条绳子，如果生产线上的员工发现了质量问题，就可以拉动安灯系统通知管理人员，并停止生产线，以避免带有缺陷的产品不断流向下游。 
要知道，在生产制造业中，生产线恨不得 24 小时运转，因为这样可以最大化地利用时间，生产更多的产品。可是现在，随随便便一个员工就可以让整条生产线停转，丰田公司是怎么想的呢？ 
其实，这背后的理念就是“Fail fast”，即快速失败。如果工人发现了有缺陷的产品，却要经过层层审批才能停止生产线，就会有大量带有缺陷的产品流向下游，所以，停止生产线并不是目的，及时发现问题和解决问题才是目的。 
当启动安灯系统之后，管理人员、产线质量控制人员等相关人员会立刻聚集到一起解决这个问题，并尽快使生产线重新恢复运转。更重要的是，这些经验会被积累下来，并融入组织的能力之中。 
内建质量扭转了看待产品质量的根本视角，也就是说，团队所做的一切不是为了验证产品存在问题，而是为了确保产品没有问题。 
八、技术债务 
传送门：写个代码也能“欠债”？关于“技术债务”的事儿 
九、环境管理&部署管理 
 
 环境问题，绝对是一个顶级背锅侠。“这一定是环境问题！”是不是很耳熟 
 
1、环境管理的挑战 
环境种类繁多。比如开发环境、测试环境、UAT 用户验收测试环境、预发布环境、灰度环境、生产环境等。环境复杂性上升。现代应用的架构逐渐从单体应用向微服务应用转变。随着服务的拆分，各种缓存、路由、消息、通知等服务缺一不可，任何一个地方配置出错，应用都有可能无法正常运行。这还不包括各种服务之间的依赖和调用关系，这就导致很多企业部署一套完整环境的代价极高，甚至变成了不可能完成的任务。环境一致性难以保证。比如，那句经典的甩锅名言“在我的机器上没问题”说的就是环境不一致的问题。如果无法保证各种环境配置的一致性，那么类似的问题就会无休止地发生。实际上，在很多企业中，生产环境由专门的团队管理维护，管理配置还算受控。但是对于开发环境来说，基本都属于一个黑盒子，毕竟是研发本地的电脑，即便想管也管不到。环境交付速度慢。环境变更难以追溯 
 
 解决方案： 一切皆代码。基础设施即代码。就是用一种描述性的语言，通过文本管理环境配置，并且自动化完成环境配置的方式。典型的就是以 CAPS 为代表的自动化环境配置管理工具，也就是 Chef、Ansible、Puppet 和 Saltstacks 四个开源工具的首字母缩写。 
 
通过将所有环境的配置过程代码化，每个环境都对应一份配置文件，可以实现公共配置的复用。 开发运维打通的 GitOps 实践顾名思义，GitOps 就是基于版本控制系统 Git 来实现的一套解决方案，核心在于基于 Git 这样一个统一的数据源，通过类似代码提交过程中的拉取请求的方式，也就是 Pull Request，来完成应用从开发到运维的交付过程，让开发和运维之间的协作可以基于 Git 来实现。 
虽然 GitOps 最初是基于容器技术和 Kubernetes 平台来实现的，但它的理念并不局限于使用容器技术，实际上，它的核心在于通过代码化的方式来描述应用部署的环境和部署过程。 
在 GitOps 中，每一个环境对应一个环境配置仓库，这个仓库中包含了应用部署所需要的一切过程。比如，使用 Kubernetes 的时候，就是应用的一组资源描述文件，比如部署哪个版本，开放哪些端口，部署过程是怎样的。 
当然，你也可以使用 Helm 工具来统一管理这些资源文件。如果你还不太熟悉 Kubernetes，可以简单地把它理解为云时代的 Linux，而 Helm 就是 RPM 或者 APT 这些包管理工具，通过应用打包的方式，来简化应用的部署过程。除了基于 Kubernetes 的应用，你也可以使用类似 Ansible Playbook 的方式。只不过与现成的 Helm 工具相比，使用 Ansible 时，需要自己实现一些部署脚本，不过这也不是一件复杂的事情。 
你可以看看下面的这段配置文件示例。这些配置文件采用了 yml 格式，它描述了应用部署的主要信息，其中，镜像名称使用参数形式，会有一个独立的文件来统一管理这些变量，你可以根据应用的实际版本进行替换，以达到部署不同应用的目标。 
你可以看看下面的这段配置文件示例。这些配置文件采用了 yml 格式，它描述了应用部署的主要信息，其中，镜像名称使用参数形式，会有一个独立的文件来统一管理这些变量，你可以根据应用的实际版本进行替换，以达到部署不同应用的目标。 

apiVersion: extensions/v1beta1
kind: Deployment
spec:
  replicas: 1
  template:
    metadata:
      labels:
        app: demo 
    spec:
      containers:
      - name: demo
        image: ""{{ .Values.image.tag }}""
        imagePullPolicy: IfNotPresent
        ports:
        - containerPort: 80
12345678910111213141516 
现在，我们来看看这个方案是如何实现的。 
首先，开发人员提交新的代码改动到 Git 仓库，这会自动触发持续集成流水线，对于常见的版本控制系统来说，配置钩子就可以实现。当代码经过一系列的构建、测试和检查环节，并最终通过持续集成流水线之后，就会生成一个新版本的应用，并上传到制品库中，典型的就是 Docker 镜像文件或者 war 包的形式。 
以上面的配置为例，假如生成了应用的 1.0 版本镜像，接下来，会自动针对测试环境的配置仓库创建一个代码合并请求，变更的内容就是修改镜像名称的版本号为 1.0。这个时候，开发或者测试人员可以通过接受合并的方式，将这段环境变更配置合入主干，并再一次自动化地触发部署流水线，将新版本的应用部署到测试环境中。每次应用的部署采用相同的过程，一般就是将最新版本的应用制品拷贝到服务器并且重启，或者更新容器镜像并触发滚动升级。 
这个时候，测试环境就部署完成了，当然，如果使用 Kubernetes，可以利用命名空间的特性，快速创建出一套独立的环境，这是使用传统部署的应用所不具备的优势。在测试环境验收通过后，可以将代码合并到主分支，再一次触发完整的集成流水线环节，进行更加全面的测试工作。 
当流水线执行成功后，可以自动针对预发布环境的配置仓库创建一个合并请求，当评审通过后，系统自动完成预发布环境的部署。如果职责分离要求预发布环境的部署必须由运维人员来操作，把合并代码的权限只开放给运维人员就行了。当运维人员收到通知后，可以登录版本控制系统，查看本次变更的范围，评估影响，并按照部署节奏完成部署。而这个操作，只需要在界面点击按钮就可以实现了。这样一来，开发和运维团队的协作就不再是一个黑盒子了。大家基于代码提交评审的方式完成应用的交付部署，整个过程中的配置过程和参数信息都是透明共享的。 
最终实现环境配置的共享和统一管理。 
2、低风险的发布手段 
1）蓝绿部署 
蓝绿部署就是为应用准备两套一模一样的环境，一套是蓝环境，一套是绿环境，每次只有一套环境提供线上服务。这里的蓝和绿，只是用于区分两套环境的标志而已。在新版本上线时，先将新版本的应用部署到没有提供线上服务的环境中，进行上线前验证，验证通过后就达到了准备就绪的状态。在发布时间点，只要将原本指向线上环境的路由切换成另外一套环境，整个发布过程就完成了。 
一般来说，这种方式的实现成本比较高。因为有两套一模一样的环境，只有一套用于真正地提供线上服务。为了减少资源浪费，在实际操作中，另外一套环境可以当作预发布环境使用，用来在上线之前验证新功能。另外，在这种模式下，数据库普遍还是采用同一套实例，通过向下兼容的方式支持多个版本的应用。 
2）灰度发布 
灰度发布，也叫金丝雀发布。与蓝绿部署相比，灰度发布更加灵活，成本也更低，所以，在企业中是一种更为普遍的低风险发布方式。 
灰度发布有很多种实现机制，最典型的就是采用一种渐进式的滚动升级来完成整个应用的发布过程。当发布新版本应用时，根据事先设计好的灰度计划，将新应用部署到一定比例的节点上。当用户流量打到这部分节点的时候，就可以使用新的功能了。 
值得注意的是，要保证同一个用户的行为一致性，不能时而看到新功能，时而看到老功能。当然，解决办法也有很多，比如通过用户 ID 或者 cookie 的方式来识别用户，并划分不同的组来保证。 
新版本应用在部分节点验证通过后，再逐步放量，部署更多的节点，依次循环，最终完成所有节点的部署，将所有应用都升级到新版本。分批部署只是实现灰度发布的方法之一，利用配置中心和特性开关，同样可以实现指向性更强的灰度策略。比如，针对不同的用户、地域、设备类型进行灰度。 
3）暗部署 
随着 A/B 测试的兴起，暗部署的方式也逐渐流行起来。**所谓暗部署，就是在用户不知道的情况下进行线上验证的一种方法。**比如后端先行的部署方式，把一个包含新功能的接口发布上线，这个时候，由于没有前端导向这个接口，用户并不会真实地调用到这个接口。当用户进行了某些操作后，系统会将用户的流量在后台复制一份并打到新部署的接口上，以验证接口的返回结果和性能是否符合预期。 
比如，对于电商业务场景来说，当用户搜索了一个关键字后，后台有两种算法，会给出两种返回结果，然后可以根据用户的实际操作，来验证哪种算法的命中率更高，从而实现了在线的功能验证。 
以上这三种低风险发布手段，如果应用规模整体不大，蓝绿部署是提升系统可用性的最好手段，比如各类 Hot-standby 的解决方案，其实就是蓝绿部署的典型应用。而对于大规模系统来说，考虑到成本和收益，灰度发布显然就成了性价比最高的做法。如果想要跑一些线上的测试收集真实用户反馈，那么，暗部署是一种不错的选择。 
十、混沌工程 
传送门：什么是混沌工程？ 
十一、DevOps的正向度量体系如何建立 
 所有指标细化、数据化。 
十二、持续改进才是团队引入DevOps时最该具备的特质 
谈到持续改进，有一个非常著名的方法体系，叫作 PDCA，也称为戴明环。没错，你从名称就能看出，这套方法体系同样来自于质量管理大师戴明博士。PDCA 是四个英文单词的缩写，也就是 Plan（计划）、Do（实施）、Check（检查）和 Action（行动）。 
PDCA 提供了一套结构化的实施框架，任何一项改进类工作，都可以划分为这四个实施阶段。通过 PDCA 循环的不断迭代，驱动组织进入一种良性循环，不断识别出新的待改进问题。针对这些问题，首先要进行根因分析，制定具体的实施计划。然后，不定期地检查实施的结果和预期目标是否一致。最后，要对改进结果进行复盘，把做得好的地方保留下来，把做得不好的地方纳入下一阶段的循环中，继续改进。 
 这个方法听起来也没什么复杂的，每个人都能够理解，关键在于是否真正地用心在做。 
构建持续改进的核心，就在于构建一个学习型组织。 
1、鼓励正向回溯和总结 
故障回溯并不一定以确定责任为第一要务，更重要的是，要识别系统流程中的潜在问题和漏洞，并通过后续机制来进行保障，比如增加测试用例、增加产品走查事项等等。 
其实，大到线上故障，小到日常错误，都值得回溯和总结。 
这就需要有团队来负责收集和总结这些常见的错误，并提取关键错误信息和常见解决方法，形成一个案例库。同时，在构建系统中嵌入一个自动化服务，下次再有人遇到编译错误的时候，就可以自动匹配案例库，并给他推送一个问题分析报告和解决建议，帮助团队成员快速解决问题。 
这样，随着团队智慧的不断积累，越来越多的问题会被识别出来，从而实现组织知识共享和研发辅助的能力，这在很多大公司里面都是一个重点建设方向。仔细想想，这本身就是一个 PDCA 的过程。 
不过，这里要补充一点，团队实施持续改进的过程，不应该是一次大而全的变革，而应该是一系列小而高频的改进动作。因为大的变革往往影响众多，很容易半途而废，而小的改进更加温和，也更加容易成功。为了方便你理解，我跟你分享一张示意图。  
2、预留固定时间进行改进 
很多时候，团队都处于忙碌的状态，时间似乎成了推行 DevOps 的最大敌人。于是，团队就陷入了一种太忙以至于没时间改进的状态中。 
如果团队选择在同等时间内去做更多的功能，那就说明，至少在当前这个阶段，业务开发的重要性要高于 DevOps 建设的重要性。 
可问题是，业务的需求是没有止境的。有时候，我去问一线员工：“你觉得有什么地方，是 DevOps 可以帮你的吗？”要么大家会说“没什么特别的，现在挺好”，要么就是一些非常琐碎的点。实际上，这只能说明，要么是没想过这个事情，要么就是不知道还有更好的做法。但是，如果不能调动一线员工的积极性，持续改进也就无从谈起了。 
所以，正确的做法是，在团队的日常迭代中，事先给改进类工作预留一部分时间，或者是在业务相对不那么繁忙的时候（比如大促刚刚结束，团队在调整状态的时候），在改进工作上多花些时间。 
这些工作量主要用于解决非功能需求、技术改进类问题，比如修复技术债务、单元测试用例补充、度量识别出来的改进事项等。通过将这部分改进时间固定下来，可以培养团队持续改进的文化。 
我比较推荐的做法是，在团队的 Backlog 中新增一类任务，专门用于记录和跟踪这类持续改进的内容。在迭代计划会议上，对这类问题进行分析，并预估工作量，保证团队有固定的时间来应对这些问题。 
另外，很多公司也开始流行举办 Hackathon Day（黑客马拉松），是说在有限的时间里通过编程实现自身的想法和创意，在这个过程中，充满了积极探索的精神、自由散发的思维和挑战极限的理念，通过团队协作与互相激发，实现创意到开发的全过程。 
3、在团队内部共享业务指标 
很多时候团队成员都像是临时工一样，对于自己所负责的需求和业务的表现一概不知。如果团队成员对一件事情没有归属感，那么又如何激发他们的责任感和自我驱动意识呢？ 
所以，对于业务的指标和表现，需要尽可能地在团队内部做到透明，让团队成员可以接触真实世界的用户反馈和评价，以及业务的度量信息。 
在一个新功能开发完成上线之后，要能实时查看这个需求的上线状态。如果需求分析时已经关联了业务考核指标，那么，同样可以将该业务关联的指标数据进行展示。这样，研发就会知道自己交付的内容有多少问题，用户的真实反馈是怎样的，从而促使团队更多地站在用户的视角思考问题。 
除了业务指标，DevOps 的指标体系也应该对内部公开透明。大家可以查看自己所在团队的表现，以及在公司内部的整体水平。 
适当的侧向压力，会促使大家更加主动地接受改进工作，并且通过度量数据展示改进的效果，从而形成正向的循环。 
4、激励创造性，并将价值最大化 
每个团队中都不乏有创新意愿和思想的员工，他们总是能从墨守成规的规范中找到可以进行优化的点。 
比如，之前，我们团队的一个测试人员发现，日常埋点测试费时费力，而且没有数据统计。于是，她就自己利用业余时间开发了一个小工具，用工具来承载这部分工作，效率大幅提升。
                
                
                
        
        
"1.精益生产 
Devops借用了其很多东西：价值流和价值流映射，快速的问题移除，稳定与均衡的流动，一个单元时间处理单一任务，识别与消除瓶颈和约束，持续改进，拉动系统，工作可视化。 

                
        
        文章知识点与官方知识档案匹配，可进一步学习相关知识云原生入门技能树首页概览12783 人正在系统学习中
        
          
            
            
          
            
              
                Smart嵌入式
                
                  
                  微信公众号
                  
                
              
              人工智能赋能嵌入式系统，让你的硬件变的更"
"DevOps 是一个完整的面向IT运维的工作流，以 IT 自动化以及持续集成（CI）、持续部署（CD）为基础，来优化程式开发、测试、系统运维等所有环节。 
  
  
DevOps的概念 
DevOps一词的来自于Development和Operations的组合，突出重视软件开发人员和运维人员的沟通合作，通过自动化流程来使得软件构建、测试、发布更加快捷、频繁和可靠。 
 
DevOps是为了填补开发端和运维端之间的信息鸿沟，改善团队之间的协作关系。不过需要澄清的一点是，从开发到运维，中间还有测试环节。DevOps其实包含了三个部分：开发、测试和运维。 
 
  
 换句话说，DevOps希望做到的是软件产品交付过程中IT工具链的打通，使得各个团队减少时间损耗，更加高效地协同工作。专家们总结出了下面这个DevOps能力图，良好的闭环可以大大增加整体的产出。 
 
历史变革 
由上所述，相信大家对DevOps有了一定的了解。但是除了触及工具链之外，作为文化和技术的方法论，DevOps还需要公司在组织文化上的变革。回顾软件行业的研发模式，可以发现大致有三个阶段：瀑布式开发、敏捷开发、DevOps。 
DevOps早在九年前就有人提出来，但是，为什么这两年才开始受到越来越多的企业重视和实践呢？因为DevOps的发展是独木不成林的，现在有越来越多的技术支撑。微服务架构理念、容器技术使得DevOps的实施变得更加容易，计算能力提升和云环境的发展使得快速开发的产品可以立刻获得更广泛的使用。 
好处是什么？ 
DevOps的一个巨大好处就是可以高效交付，这也正好是它的初衷。Puppet和DevOps Research and Assessment (DORA) 主办了2016年DevOps调查报告，根据全球4600位各IT公司的技术工作者的提交数据统计，得出高效公司平均每年可以完成1460次部署。 
与低效组织相比，高效组织的部署频繁200倍，产品投入使用速度快2555倍，服务恢复速度快24倍。在工作内容的时间分配上，低效者要多花22%的时间用在为规划好或者重复工作上，而高效者却可以多花29%的时间用在新的工作上。所以这里的高效不仅仅指公司产出的效率提高，还指员工的工作质量得到提升。 
DevOps另外一个好处就是会改善公司组织文化、提高员工的参与感。员工们变得更高效，也更有满足和成就感；调查显示高效员工的雇员净推荐值（eNPS:employee Net Promoter Score）更高，即对公司更加认同。 
快速部署同时提高IT稳定性。这难道不矛盾吗？ 
快速的部署其实可以帮助更快地发现问题，产品被更快地交付到用户手中，团队可以更快地得到用户的反馈，从而进行更快地响应。而且，DevOps小步快跑的形式带来的变化是比较小的，出现问题的偏差每次都不会太大，修复起来也会相对容易一些。 
 
因此，认为速度就意味着危险是一种偏见。此外，滞后软件服务的发布也并不一定会完全地避免问题，在竞争日益激烈的IT行业，这反而可能错失了软件的发布时机 
为什么DevOps会兴起？ 
为什么会继续火下去？ 
条件成熟：技术配套发展 
技术的发展使得DevOps有了更多的配合。早期时，大家虽然意识到了这个问题的，但是苦于当时没有完善丰富的技术工具，是一种“理想很丰满，但是现实很骨感”的情况。DevOps的实现可以基于新兴的容器技术；也可以在自动化运维工具Puppet、SaltStack、Ansible之后的延伸；还可以构建在传统的Cloud Foundry、OpenShift等PaaS厂商之上。 
来自市场的外部需求：这世界变化太快 
IT行业已经越来越与市场的经济发展紧密挂钩，专家们认为IT将会有支持中心变成利润驱动中心。事实上，这个变化已经开始了，这不仅体现在Google、苹果这些大企业中，而且也发生在传统行业中，比如出租车业务中的Uber、酒店连锁行业中的Airbnb、图书经销商Amazon等等。能否让公司的IT配套方案及时跟上市场需求的步伐，在今天显得至关重要。 
DevOps 2016年度报告给出了一个运维成本的计算公式：  停机费用成本 = 部署频率 * 版本迭代失败概率 * 平均修复时间 * 断电的金钱损失 
来自团队的内在动力：工程师也需要 
对于工程师而言，他们也是DevOps的受益者。微软资深工程师Scott Hanselman说过“对于开发者而言，最有力的工具就是自动化工具”（The most powerful tool we have as developers is automation）。 
工具链的打通使得开发者们在交付软件时可以完成生产环境的构建、测试和运行；正如Amazon的VP兼CTO Werner Vogels那句让人印象深刻的话：“谁开发谁运行”。（You build it, you run it） 
实现DevOps需要什么？ 
硬性要求：工具上的准备 
上文提到了工具链的打通，那么工具自然就需要做好准备。现将工具类型及对应的不完全列举整理如下： 
 代码管理（SCM）：GitHub、GitLab、BitBucket、SubVersion  构建工具：Ant、Gradle、maven  自动部署：Capistrano、CodeDeploy  持续集成（CI）：Bamboo、Hudson、Jenkins  配置管理：Ansible、Chef、Puppet、SaltStack、ScriptRock GuardRail  容器：Docker、LXC、第三方厂商如AWS  编排：Kubernetes、Core、Apache Mesos、DC/OS  服务注册与发现：Zookeeper、etcd、Consul  脚本语言：python、ruby、shell  日志管理：ELK、Logentries  系统监控：Datadog、Graphite、Icinga、Nagios  性能监控：AppDynamics、New Relic、Splunk  压力测试：JMeter、Blaze Meter、loader.io  预警：PagerDuty、pingdom、厂商自带如AWS SNS  HTTP加速器：Varnish  消息总线：ActiveMQ、SQS  应用服务器：Tomcat、JBoss  Web服务器：Apache、Nginx、IIS  数据库：MySQL、Oracle、PostgreSQL等关系型数据库；cassandra、mongoDB、redis等NoSQL数据库  项目管理（PM）：Jira、Asana、Taiga、Trello、Basecamp、Pivotal Tracker  
在工具的选择上，需要结合公司业务需求和技术团队情况而定。（注：更多关于工具的详细介绍可以参见此文：51 Best DevOps Tools for #DevOps Engineers） 
软性需求：文化和人 
DevOps成功与否，公司组织是否利于协作是关键。开发人员和运维人员可以良好沟通互相学习，从而拥有高生产力。并且协作也存在于业务人员与开发人员之间。 
出席了2016年伦敦企业级DevOps峰会的ITV公司在2012年就开始落地DevOps，其通用平台主管Clark在接受了InfoQ的采访，在谈及成功时表示，业务人员非常清楚他们希望在最小化可行产品中实现什么，工程师们就按需交付，不做多余工作。 
这样，工程师们使用通用的平台（即打通的工具链）得到更好的一致性和更高的质量。此外，DevOps对工程师个人的要求也提高了，很多专家也认为招募到优秀的人才也是一个挑战。 
DevOps的采用现状 
哪些公司在用？ 
DevOps正在增长，尤其是在大企业中：调查发现，DevOps的接受度有了显著提高。74%的受访者已经接受了DevOps，而去年这一比例为66%。目前，在81%的大企业开始接受DevOps，中小企业的接受度仅为70%。 
那么具体而言都有些公司在采用DevOps呢？Adobe、Amazon、Apple、Airbnb、Ebay、Etsy、Facebook、LinkedIn、Netflix、NASA、Starbucks、Target（泛欧实时全额自动清算系统）、Walmart、Sony等等。 
他们怎么实施的？ 
首先，大企业正在自下而上接受DevOps，其中业务单位或部门（31%）以及项目和团队（29%）已经实施DevOps。不过，只有21%的大企业在整个公司范围内采用了DevOps。  
其次，在工具层面上，DevOps工具的用量大幅激增。Chef和Puppet依然是最常用的DevOps工具，使用率均为32%。Docker是年增长率最快的工具，用量增长一倍以上。Ansible的用量也有显著增加，使用率从10%翻倍至20%。 
 
                
        
        
"什么是DevOps 
DevOps是Development和Operations的组合，是一组过程、方法与系统的统称，用于促进开发（应用程序/软件工程）、技术运营和质量保障（QA）部门之间的沟通、协作与整合。它的出现是由于软件行业日益清晰地认识到：为了按时交付软件产品和服务，开发和运营工作必须紧密合作。 
可以把DevOps看作开发（软件工程）、技术运营和质量保障（QA）三者的交集。 
 
image.png 
传统的软件组织将开发、IT运营和质量保障设为各自分离的部门。在这种环境下如何采用新的开发方法（例如敏捷软件开发），这是一个重要的课题：按照从前的工作方式，开发和部署不需要IT支持或者QA深入的、跨部门的支持，而却需要极其紧密的多部门协作。然而DevOps考虑的还不止是软件部署。它是一套针对这几个部门间沟通与协作问题的流程和方法。 
DevOps工具 
工欲善其事，必先利其器，现在大家在DevOps领域最关注的还是在工具层面。 
下面是我跟这么多公司接触下来，大家使用比较多的工具： 
1、监控工具 
比较老牌的就是Zabbix,Nagios，用Zabbix的感觉是最多的。国内的有小米开源的OpenFalcon。这类监控工具一般是对服务器、服务（中间件，数据库）做一些常用指标的监控。 
2、性能分析/APM工具 
APM很多时候被认为是监控的一个细分领域。但在现代复杂分布式系统架构下，APM工具往往更能准确、直接的帮助用户定位到性能瓶颈，比如哪一个URL访问慢、哪一个方法执行慢、哪一个SQL执行慢。在以往要想拿到这些数据，往往得需要比较资深的架构师、DBA一起合作才能拿到这些数据，而定位瓶颈的效率往往还不太高。现在通过APM工具能让普通技能的运维人员，也很高效的定位到这些深层的问题。现在商用的APM工具不少，国外的有Newrelic，国内知名的就有听云、Oneapm、透视宝这些。开源的也有Pinpoint（naver开源）、Zipkin（twitter开源）、CAT（大众点评开源）. 
3、批量+自动化运维工具 
这里就比较多了，知名的有Puppet、Ansible、Chef、Saltstack这些。这些在网上的资料也比较多，找比较新版本的官方文档看就行了。Puppet和chef是比较早期的工具，受众面也很大，不过这两个工具基于ruby实现，现在要找到熟悉ruby的人来做这块的二次开发可不容易。而ansible和saltstack则相对新生代一些，目前用户基数增长很快，基于python实现，要找做二次开发的人也相对容易的多。 
4、集中日志分析工具 
在一个服务器比较多的环境下，如何集中的管理和分析、查询日志，已经变成一个比较强的需求了。想象一下，如果发生了某个错误，你还得一台台机器去翻日志文件，是不是很蛋疼。在这个需求驱动下，就诞生了一些集中日志分析工具。在开源领域，比较知名的就是ELK这一套工具了，涵盖了日志采集、上报、搜索、展现这一类基本需求，现在比较多的上规模的企业都用这个，网上资料也大把。核心实现机制都是通过一些日志采集代理（类似Filebeat）去爬日志文件，将最新的部分提交到采集服务端，后端再对接搜索引擎，能支持很快速、准确的搜索即可。有一个国内不怎么知名的Sentry日志收集服务，比较轻量级，本身是Python做的，与各种语言的日志框架做了非常好的集成，可以很方便的集中收集异常日志，并分配给对应的开发人员。它在github上有10000多个star了，这在DevOps相关的软件里，都是排名非常靠前的了。git的地址：GitHub - getsentry/sentry: Sentry is cross-platform crash reporting built with love 
5、持续集成/发布工具 
我接触的人都是用Jenkins的，没有用其他的，可能跟我所在的技术圈子有关。集成打包的过程其实一般都比较简单，配好版本库和打包脚本就行。但发布的过程就比较复杂，有些是全量发布，但也有非常多的IT团队采用增量发布。这个方面如果想用工具，还是得先分析清楚现有的发布流程，手工情况下怎么做，哪些能通过自动化工具来完成。 
6、IaaS集成 
最近两年的公有云推广比较迅速，很多新的服务器采购都被导入到云上去了。现在主流的公有云都提供了比较完备的API，基于这些API也可以做一些针对基础资源的自动化操作，比如游戏行业的快速开服。 
更多的可以看下知乎上的一篇关于DevOps的文章：<<你所在的公司是如何实施DevOps的？>> 
 
 https://www.zhihu.com/question/24413538/answer/116474416 

                
        
        
"以下是一些最受欢迎的DevOps工具，其简要说明如下图所示，例如：  
1）Puppet 
  Puppet 是使用最广泛的 DevOps 工具。允许快速、频繁地交付和发布技术更改。具有版本控制、自动测试和连续交付的功能。可以将整个基础架构作为代码进行管理，而无需扩大团队规模。 特性 
实时上下文感知报告。建模和管理整个环境。定义并持续实施基础架构。所需状态冲突检测和修复。检查并报告整个基础结构上运行的软件包。消除了软件交付过程中的手动工作。有助于开发人员快速交付出色的软件。 
2）Ansible 
  Ansible 是领先的 DevOps 工具。Ansible 是一个开源 IT 引擎，可自动执行应用部署、云供应、内部服务编排和其他 IT 工具。DevOps 团队可以更轻松地扩展自动化规模并提高生产率。   Ansible 易于部署，因为它在客户端不使用任何代理或自定义安全性基础结构、也不通过将模块推送到客户端。这些模块在客户端本地执行，并将输出推回 Ansible 服务器。 特性 
开源部署应用程序很容易使用。有助于避免软件开发过程中的复杂性。消除了重复的任务。管理复杂的部署并加快开发过程。 
3）Docker 
  Docker 是高端 DevOps 工具，允许在多个系统上构建、交付和运行分布式应用程序。有助于从组件快速组装应用，通常适用于容器管理。 特性 
使系统配置更舒适，更快捷。提高生产率。提供用于在隔离环境中运行应用的容器。将可用节点上所发布端口的传入请求路由到活动容器。即使节点上没有正在运行的任务，此功能也会启用连接。允许将机密保存到群集本身中。 
4）Nagios 
  Nagios 是 DevOps 的更有用的工具之一。它可以确定错误并在网络、基础架构、服务器和日志监视系统的帮助下进行纠正。 特性 
提供对桌面和服务器操作系统的完整监视。网络分析仪有助于发现瓶颈并优化带宽利用率。有助于监视组件，例如服务、应用、操作系统和网络协议。还提供对 Java 管理扩展的完整监视。 
5）CHEF 
  Chef 是实现规模、速度和一致性的有用工具。Chef 是基于云的系统和开源技术。这项技术使用 Ruby 编码来开发必不可少的构建基块，例如菜谱和烹饪书。Chef 用于基础架构自动化，并有助于减少用于基础架构管理的手动和重复性任务。   Chef 对于不同的构建基块都有约定，这是管理和自动化基础结构所必需的。 特性 
保持高可用性。可以管理多个云环境。使用流行的 Ruby 语言来创建特定领域的语言。Chef 不会对节点的当前状态做任何假设。它使用机制来获取计算机的当前状态。 
6）Jenkins 
  Jenkins 是一个 DevOps 工具，用于监视重复任务的执行。Jenkins 是允许持续集成的软件。Jenkins 将安装在将进行集中构建的服务器上。通过快速发现问题，它有助于更有效地集成项目变更。 特性 
Jenkins 增加了自动化规模。可以通过 Web 界面轻松设置和配置。可以在多台计算机之间分配任务，从而提高并发性。支持持续集成和持续交付。提供了400个插件来支持虚拟构建和测试任何项目。几乎不需要维护，并具有内置的 GUI 工具，可轻松进行更新。 
7）Git 
  Git 是一个开源的分布式版本控制系统，每个人都可以免费使用。它旨在快速高效地处理从小到大的项目。开发它是为了协调程序员之间的工作。版本控件使您可以在同一工作区中跟踪团队成员并与之一起工作。它用作 DevOps 工具的关键分布式版本控制。 特性 
一个免费的开源工具。允许分布式开发。支持拉取请求。可以加快发布周期。Git具有很好的可扩展性。非常安全，可以非常快速地完成任务。 
8）SALTSTACK 
  Stackify 是轻量级的 DevOps 工具。它显示实时错误查询日志并且更直接地显示到工作站中。SALTSTACK 是针对软件定义的数据中心进行智能编排的理想解决方案。 特性 
消除了混乱的配置或数据更改。可以跟踪Web请求的所有类型的详细信息。使我们能够在生产前发现并修复错误。提供安全的访问并配置图像缓存。通过基于角色的精细访问控制来确保多租户。灵活的图像管理，带有专用注册表以存储和管理图像。 
9）Splunk 
Splunk 是使机器数据对所有人可用\可访问且有价值的工具。为 DevOps 团队提供运营情报。帮助公司提高安全性、生产率和竞争力。 特性 
具有下一代监视和分析解决方案。提供了不同 IT 服务的统一视图。可通过针对安全性的专用解决方案扩展 Splunk 平台。具有可行见解的数据驱动分析。 
10）Selenium 
  Selenium 是用于Web应用程序的便携式软件测试框架。它为开发自动化测试提供了简单的界面。 特性 
是一个免费的开源工具。支持多平台进行测试，例如 Android 和 iOS。很容易为 WebDriver 构建关键字驱动的框架。创建了基于浏览器的强大回归自动化套件和测试。
                
                
                
        
        
"1.DevOps思想 
DevOps是思想和方法论，包含开发、测试、运维整个过程DevOps强调软件开发人员于软件测试、运维质量保障（QA）部门之间的有效的沟通和协作自动化的方法管理软件变更，持续软件集成(CI)、软件部署（CD） 当前大、中型公司开发的大概流程  
 
 Backlog待办清单，其中事务有优先级，优先级越高先办理 
 
2.DevOps思想实现 
DevOps兴起2009，云计算互联网的发展促进了DevOps的基础设施和工具链的发展，出现了一些工具，包括开发、测试、运维等领域：如：GitHub，GIT，Docker,Jenkins,HudSon,Ant/Maven/Gradle,Qunit,Jmeter等。 实践测试 GitLab–>webhooks–>Jenkins开发人员专注开发业务代码，功能完成后提交到GitLab上，GitLab自动通知Jenkins进行构建项目，Jenkins推送镜像到docker,服务器拉取镜像并重新部署，供客户访问。自动化部署节省了大量时间，降低了部署难度和重复劳动。 
3.DevOps必要性 
 
 传统开发过程（瀑布和敏捷）都由开发团队来构建软件。开发团队需要和运维团队进行大量的“任务支持”。运维团队负责执行一系列部署活动，将软件代码移到生产环境，负责维护后续的系统稳定运行。生产环境基础设置于开发测试不同。需要额外的检查和平衡，保证一切功能正常。部署是由不同人完成的运维团队未见过这类软件  DevOps开发思想涉及到整个软件开发生命周期，只能在DevOps中实现。在较短的开发周期开发高质量的功能，提高客户满意度。  DevOps简化工作流程，提高工作效率 
                
                
                
        
        
"基于微软的相关产品的文档介绍，英文原版链接：https://docs.microsoft.com/en-us/azure/devops/learn/what-is-devops 
1. DevOps是什么？ 
为了实现持续交付价值给终端用户，对相关人员、流程和产品的结合和统筹协同。 
Dev和Ops的缩写意味着，代替了原本开发和运维团队竖井式的工作方法，强调创造多学科背景的团队成员一起努力，有共同有效的实践方法和工具集。 
【注：筒仓式阶段（Siloed），或称为多重竖井布局，形象地说，就是像竖井一样，各自隔离，流程固然已经被定义了，然则各自为政，存在着“项目组墙”。】 
基本的DevOps实践方法包括：敏捷规划（agile planning）、持续集成（continuous integration）、持续交付（continuous delivery）、应用监控（monitoring of applications）。 
  
1.1 理解你的生产周期 understand your cycle time 
假设软件开发的过程可以用奥达回路来描述。 
【注：包以德循环或奥达回路（OODA Loop），OODA是observe（观察）、orient（调整）、decide（决策）和act（行动）的缩写。 OODA Loop: in the armed forces and other defense-related agencies, a carefully worked-out chart or guide for use in making decisions throughout varying levels of policy and command.】 
起初为了防止战斗机飞行员在空中被击中，奥达回路是一个很好的领先于竞争者的思维方式。首先，你要观察行业、市场、需求、当前的用户行为和可获得的遥测数据；然后你调整你的方向，通过一一列出你能够实现的选择，也许通过实验来验证；之后你决定你继续做什么，最后通过交付一个可操作的软件，你付出了行动给真正的用户。所有的这些发生在一个生产周期内。 
1.2 由数据来启示 become data-informed 
但愿，你能够用数据来启示下一个周期你该做什么。很多经验报告表明，大约三分之一的部署会带来负面的经营成果，三分之一会有积极的经营结果，以及三分之一毫无影响。理想的情况下，你想要在那些不能促进经营成果的部署上快速失败，在那些能促进经营的部署上加快效率。有时称之为转移还是坚持（pivot or persevere）。 
1.3 寻找验证学习的方法 strive for validated learning 
你能够尽快失败或加倍效率的速度是由生产周期的长度决定的。你的生产周期决定了你收集反馈的速度，反馈数据决定了下一个周期会发生什么，在每个周期收集到的反馈应该是真实、可执行的数据，这叫做验证性学习（validated learning）。 
【当你提出一个idea，它是一个未经证实的假设 (unproven assumption)，可以通过一系列快速迭代产品，将它转变为一个经证实的认知。验证性学习（validated learning），即通过收集产品被真正使用后的衡量指标，而不是通过对用户的提问来验证效果。 
你要能回答下面这样的问题： 
我们在产品上所做的这些修改是否让更多的人注册了，逗留时间增加了，还是增加了收入? Or is it time to pivot?在做A/B测试时，该特性在哪个版本的效果更好？所有的系统指标看上去都不错，一个用户说我们的网站不能用。难道是我们的网站坏了吗？我们产品中的哪些特性是收入的最大来源？】 
1.4 缩短你的生产周期 shorten your cycle time 
当你使用DevOps的实践方法时，可以通过小批量地工作、用更多的自动化、明确发布管道（release pipeline）、改进遥测、加大部署频率来缩短你的生产周期。 
1.5 优化验证性学习 optimize validated learning 
部署频率越快、能够实验的越多，你能够“转移还是坚持”的机会就越多，并且在每个周期都能够得到验证性学习。在验证性学习中的加速就是改进的价值，可把这个看做你实现的进步和避免的错误的总和。 
  
2. 如何实现DevOps？ 
记住，目标是要缩短生产周期。从发布管道开始，去部署改过的一行代码或配置需要多长的时间？最终，那就是，给效率减速的地方。 
2.1 Continuous Integration 
持续集成会推进持续的代码合并和代码测试，这样能尽早找出缺陷，其他的好处是浪费尽可能少的时间在解决合并问题上，可以给开发团队带来更快的反馈。 
2.2 Continuous Delivery  
软件解决方案的持续交付给生产和测试环境，能够帮助企业快速修复bugs，对不断变化的经营要求快速反应。 
2.3 Version Control, Usually With Git 
版本控制（通常使用Git）使位于世界任何地方的团队能够在日常开发活动中进行有效的沟通，并与软件开发工具集成，以监视部署等活动。 
2.4 Agile Planning and lean project management 
敏捷规划和精益项目管理技术用于将工作计划和隔离到sprints中，管理团队能力，并帮助团队快速适应不断变化的业务需求。从DevOps角度定义Done就是，工作软件根据预期的业务目标收集遥测数据。 
2.5 Monitoring and Logging 
监视和记录正在运行的应用程序，包括用于应用程序健康运行和客户使用情况的生产环境，有助于组织形成假设，并快速验证或反驳策略。丰富的数据以各种日志格式捕获和存储。 
2.6 Public and Hybrid Clouds 
公共云和混合云使得不可能的事情变得容易。云已经消除了传统的瓶颈，并帮助基础设施商品化。无论您使用基础设施作为服务（IaaS）来提升和转移现有的应用程序，或平台作为服务（PaaS）以获得前所未有的生产力，云给您提供一个无限制的数据中心。 
2.7 Infrastructure as Code (IaC) 
基础设施即代码（IaC）是一种实践，它使环境的创建和分解能够实现自动化和验证，从而有助于提供安全和稳定的应用程序托管平台。 
2.8 Microservices 
微服务体系结构用于将业务用例（business use cases）分离为通过接口契约（interface contracts）进行沟通的小型可重用服务（small reusable services）。这种架构使可伸缩性和效率成为可能。 
2.9 Containers 
容器是虚拟化的下一个发展方向。它们比虚拟机更轻量，允许更快的水合作用【待查验】，并且可以从文件中轻松配置。
                
        
        
"DevOps 
DevOps 就是开发（Development）、测试（QA）、运维（Operations）这三个领域的合并。DevOps是一种软件开发方法，涉及软件在整个开发生命周期中的持续开发，持续测试，持续集成，持续部署和持续监控,如此往复。  
在 DevOps 模式下，开发团队和运营团队都不再是“孤立”的团队。 有时，这两个团队会合为一个团队，他们的工程师会在应用程序的整个生命周期（从开发测试到部署再到运营）内相互协作，开发出一系列不限于单一职能的技能。 
在一些 DevOps 模式下，质保和安全团队也会与开发和运营团队更紧密地结合在一起，贯穿应用程序的整个生命周期。当安全是所有 DevOps 团队成员的工作重心时，这有时被称为“DevSecOps”。 这些团队会使用实践经验自动执行之前手动操作的缓慢流程。他们使用能够帮助其快速可靠地操作和发展应用程序的技术体系和工具。这些工具还可以帮助工程师独立完成通常需要其他团队协作才能完成的任务（例如部署代码或预置基础设施），从而进一步提高团队的工作速度 
当前主流devOps组件 
 
 
Maven私服：nexus 镜像仓库：VMware Harbor 容器：Docker 编排：K8S+rancher 服务治理：Consul 脚本语言：Python 日志管理：Looki，还有种常用的是ELK。 系统监控：Prometheus。 负载均衡：Nginx 网关：GateWay,Kong，zuul 链路追踪：skyWalking,Zipkin 产品和UI图：蓝湖 公司内部文档：Confluence 报警：推送到工作群,钉钉机器人插件 
参考 
aws定义什么是 DevOps https://aws.amazon.com/cn/devops/what-is-devops/
                
                
                
        

"DevOps - DevOps基础概念梳理 
  
 目录 
 DevOps 
   DevOps的好处与价值可能的几个关注点DevOps能力环DevOps与持续集成、持续交付典型的DevOps流水线过程DevOps黄金思维圈初见一些图示 
   关系与演进涉及的工具 
 DevOps 
 DevOps（Development+Operations）强调共同对业务目标负责，以实现用户价值作为唯一的评判标准：保证产品功能及时实现、成功部署和稳定使用； 
 是一种重视软件开发人员（Dev）和IT运维技术人员（Ops）之间沟通合作的文化、运动或惯例，改善团队之间的协作关系；是一组过程、方法与系统的统称，但其实包含了三个部分：开发、测试和运维；用于促进开发（应用程序/软件工程）、技术运营和质量保障（QA）部门之间的沟通、协作与整合；透过自动化“软件交付”和“架构变更”的流程，使得构建、测试、发布软件能够更加地快捷、频繁和可靠，按时交付软件产品和服务； 
   
 总的说来： 
 DevOps 是把人员流程、产品进行结合，给用户提供持续价格的一个过程，这个过程既涉及到人员、过程，也涉及到产品。DevOps 最终目的是给客户提供持续交付的价值，流程包括：产品的规划跟踪、软件开发、构建测试、产品部署、运维、监控和优化，并通过一个流水线的方式串联起来。通常把 DevOps 这些流程合并起来称为一个 DevOps 的流水线，其核心目标就是持续给用户交付有价值的产品。 
  
 DevOps的好处与价值 
 对于业务与产品而言，DevOps的好处更多基于持续部署与交付。 从组织结构而言，DevOps是部门间沟通协作的一组流程和方法，有助于改善公司组织文化、提高员工的参与感。 
 代码的提交直接触发：消除等待时间，快速反馈每个变化对应一个交付管道：使问题定位和调试变得简单全开发流程高效自动化：稳定，快速，交付结果可预测持续进行自动化回归测试：提升交付质量设施共享并按需提供：资源利用最大化 
  
 可能的几个关注点 
 组织文化上的变革；合适的DevOps人员（最起码保证在“向DevOps转换阶段”中，研发人员知晓运维，运维人员了解业务）；开发/测试环境尽可能地和生产环境保持一致；涉及多个技术支撑：敏捷开发、持续集成&部署、微服务、容器、云环境等；个体和团队的成效都放在整个产品开发&运维生命周期内来进行评价； 
  
 DevOps能力环 
  
  
 DevOps与持续集成、持续交付 
 DevOps 是一个完整的面向IT运维的工作流，以 IT 自动化以及持续集成（CI）、持续部署（CD）为基础，来优化程式开发、测试、系统运维等所有环节。 DevOps的技术要点由“持续集成/部署“”一线贯穿，主干开发是进行持续集成的前提，自动化以及代码周边集中管理是实施持续集成的必要条件。 换而言之，DevOps 是持续集成思想的延伸，持续集成/部署是 DevOps 的技术核心，在没有自动化测试、持续集成/部署之下，DevOps就是空中楼阁。 
  
 典型的DevOps流水线过程 
 项目开发编写代码，然后把代码推送到 GitLab 里存储，通过 GitLab 的 hook 使 Jenkins 执行一些 CI 的过程，比如做一些单元测试，构建 Docker image再把这个 Docker image 调用 helm 部署到开发环境或测试环境在测试环境里通过 Jenkins 触发一个集成测试的功能完成后就可以把它部署到生产环境通过 Kubernetes addon 的方式，把 Prometheus、Grafana 等监控组件部署到集群里，实现一整套从 CI 到 CD 的监控过程 
  
 DevOps黄金思维圈 
 Why---》How---》What 
 Why（目的、理念） 
 持续且快速、可靠的自动交付软件给用户： 
 实现价值的持续交付，赢得市场竞争提升研发（增值活动）的时间，极大化增值活动产出 
 How（方法、措施） 
 建设自动化、可重复、可靠的持续交付流水线（IT服务供应链）主要包括代码管理、持续集成、自动化测试、自动化部署、基础设施自动化管理等方面的工程能力 
 What（现象、成果） 
 每次代码提交都需要经过流水线验证每次部署的版本都经过多环境验证部署频率可以得到提升周期时间（从代码提交到部署上线）的时间可以到分钟级部署失败率低部署失败的修复时间短，影响小 
  
  回到顶部 
  
 初见 
 给产品经理讲讲，什么是持续交付和DevOps一篇文了解DevOps：从概念、关键问题、兴起到实现需求不以敏捷开发为基础的DevOps都是耍流氓 
  
  回到顶部 
  
 一些图示 
  
 关系与演进 
  
  
 涉及的工具 
 DevOps的目标不是单靠一款工具就能实现的。 在各个阶段，每个都有其单独对应的目标。 依赖于组织的选择，有着各种各样的工具可以实现目标。 
   
 
 
  
 Action is the antidote to despair! 欢迎转载和引用，但请在明显处保留原文链接和原作者信息! 本博客内容多为个人工作与学习的记录，少部分内容来自于网络并略有修改，已尽力标明原文链接和转载说明。如有冒犯，即刻删除！ 

                
  
"头一次听到这个东西，真的是一脸懵逼。感觉应该类似项目管理中的一些理念，却又不是很清晰。哎，请原谅我的孤陋寡闻。 
 一、是什么？ 
 百度百科中是这么定义的：DevOps（ Development 和 Operations 的组合词）是一组过程、方法与系统的统称，用于促进开发（应用程序/软件工程）、技术运营和质量保障（ QA ）部门之间的沟通、协作与整合。 
 它是一种重视「软件开发人员（Dev）」和「IT 运维技术人员（Ops）」之间沟通合作的文化、运动或惯例。透过自动化软件交付和架构变更的流程，来使得构建、测试、发布软件能够更加地快捷、频繁和可靠。 
  
  为了按时交付软件产品和服务，开发和运营工作必须紧密合作。 
  
 二、常见开发模型 
 看了专业的解释，我们不难理解到，DevOps 是一种开发模型。那么什么是开发模型，又有哪些常见的开发模型呢？1.什么是开发模型？软件开发模型(Software Development Model)是指软件开发全部过程、活动和任务的结构框架。软件开发包括需求、设计、编码和测试等阶段，有时也包括维护阶段。 软件开发模型能清晰、直观地表达软件开发全过程，明确规定了要完成的主要活动和任务，用来作为软件项目工作的基础。 
 2.常见的开发模型 
 瀑布式开发敏捷开发DevOps 
 三、化繁为简 
 DevOps 一词的来自于 Development 和 Operations 的组合，突出重视软件开发人员和运维人员的沟通合作，通过自动化流程来使得软件构建、测试、发布更加快捷、频繁和可靠。 
  
  DevOps 是为了填补开发端和运维端之间的信息鸿沟，改善团队之间的协作关系。 
  
 不过需要澄清的一点是，从开发到运维，中间还有测试环节。DevOps 其实包含了三个部分：开发、测试和运维。 
 专家们总结出了下面这个 DevOps 能力图，良好的闭环可以大大增加整体的产出： 
 四、使用场景 
 以下几方面因素可能促使一个组织引入 DevOps：1、使用敏捷或其他软件开发过程与方法；2、业务负责人要求加快产品交付的速率；3、虚拟化和云计算基础设施（可能来自内部或外部供应商）日益普遍；4、数据中心自动化技术和配置管理工具的普及；5、有一种观点认为，占主导地位的传统美国式管理风格（斯隆模型 vs 丰田模型）会导致「烟囱式自动化」，从而造成开发与运营之间的鸿沟，因此需要 DevOps 能力来克服由此引发的问题。 
  
  DevOps 经常被描述为「开发团队与运营团队之间更具协作性、更高效的关系」。 
  
 由于团队间协作关系的改善，整个组织的效率因此得到提升，伴随频繁变化而来的生产环境的风险也能得到降低。 
 五、DevOps 对应用程序发布的影响 
  
  在很多企业中，应用程序发布是一项涉及多个团队、压力很大、风险很高的活动。 
  
 然而在具备 DevOps 能力的组织中，应用程序发布的风险很低，原因如下： 
 减少变更范围与传统的瀑布式开发模型相比，采用敏捷或迭代式开发意味着更频繁的发布、每次发布包含的变化更少。由于部署经常进行，因此每次部署不会对生产系统造成巨大影响，应用程序会以平滑的速率逐渐生长。 加强发布协调靠强有力的发布协调人来弥合开发与运营之间的技能鸿沟和沟通鸿沟；采用电子数据表、电话会议、即时消息、企业门户（wiki、sharepoint）等协作工具来确保所有相关人员理解变更的内容并全力合作。 自动化强大的部署自动化手段确保部署任务的可重复性、减少部署出错的可能性。  
 与传统开发方法那种大规模的、不频繁的发布（通常以季度或年为单位）相比，敏捷方法大大提升了发布频率（通常以天或周为单位），同时也增大了出错的概率。 
 六、DevOps 又有啥不同？它有什么好处？ 
 减少变更范围与传统的瀑布式开发模型相比，采用敏捷或迭代式开发意味着更频繁的发布、每次发布包含的变化更少。由于部署经常进行，因此每次部署不会对生产系统造成巨大影响，应用程序会以平滑的速率逐渐生长。 
  
  加强发布协调靠强有力的发布协调人来弥合开发与运营之间的技能鸿沟和沟通鸿沟。 
  
 这里需要明确两点认识：1.开发是由功能性需求（通常与业务需求直接相关）驱动的。2.运营是由非功能性需求（例如可获得性、可靠性、性能等）驱动的。 
 七、精益 7 原则 
 杜绝浪费内建质量创建知识(放大学习)延迟决策(尽量延迟决定)快速交付尊重人员(团队授权)全局优化 
 八、DevOps 八荣八耻 
 偶然在网上看到了这个，觉得很形象，所以拿过来（感谢原作者）： 
 以可配置为荣，以硬编码为耻。以系统互备为荣，以系统单点为耻。以随时可重启为荣，以不能迁移为耻。以整体交付为荣，以部分交付为耻。以无状态为荣，以特殊化为耻。以自动化工具为荣，以人肉操作为耻。以无人值守为荣，以人工介入为耻。 
 真正理解上面这些规则，你才能熟练的应用于项目开发。 
 九、反思 
 在了解 DevOps 之后，我陷入了深深的恐惧之中。总以为可以通过不断学习技术来弥补短板，然而现实并非如此。越是努力的学习，越是发现自己掌控之外的东西数不胜数。 
 所以，有时间真得去琢磨琢磨项目管理相关内容了。唯有博览群书，才能博学多才！ 
 十、参考 
 1.百度百科2.DevOps简介3.一分钟了解DevOps4.Devops 到底是什么？ 

                
        
 
"python 虚拟环境 与项目迁移 
制作pip包（爬虫类、业务类（mysql、kafka、redis等的封状）） 
多机器批量安装docker 
tmux + 代码压缩打包 + paramiko部署代码 + 代码解压缩 + tmux脚本部署启动 （Tmuxinator tmuxp teamocil ohmytmux zsh） 
gitlab + docker + k8s 
github（or gitee）备份 
写一些python脚本（操作github、gitlab的 push与pull） 
ansible、jekins等 
python脚本 自动维护kafka
                
                
                
        
        
"DevOps 一词的来自于 Development 和 Operations 的组合，突出重视软件开发人员和运维人员的沟通合作，通过自动化流程来使得软件构建、测试、发布更加快捷、频繁和可靠。DevOps 其实包含了三个部分：开发、测试和运维。换句话 DevOps 希望做到的是软件产品交付过程中IT工具链的打通，使得各个团队减少时间损耗，更加高效地协同工作。 
 
 
​         可以把DevOps看作开发（软件工程）、技术运营和质量保障（QA）三者的交集。 
 
  
         传统的软件组织将开发、IT运营和质量保障设为各自分离的部门。在这种环境下如何采用新的开发方法（例如敏捷软件开发），这是一个重要的课题：按照从前的工作方式，开发和部署不需要IT支持或者QA深入的、跨部门的支持，而却需要极其紧密的多部门协作。然而DevOps考虑的还不止是软件部署。它是一套针对这几个部门间沟通与协作问题的流程和方法。 
        需要频繁交付的企业可能更需要对DevOps有一个大致的了解。Flickr发展了自己的DevOps能力，使之能够支撑业务部门“每天部署10次”的要求──如果一个组织要生产面向多种用户、具备多样功能的应用程序，其部署周期必然会很短。这种能
                
        

"devops简介 
DevOps是什么呢？ 有人说它是一种方法，也有人说它是一种工具，还有人说它是一种思想。更有甚者，说它是一种哲学。  越说越玄乎，感觉都要封神啦！DevOps这玩意真的有那么夸张吗？它到底是干嘛用的？为什么行业里都会对它趋之如骛呢？ 
传统的开发模式 
我们知道，一个软件从零开始到最终交付，大概包括以下几个阶段：规划、编码、构建、测试、发布、部署和维护。  随着软件产业的日益发展壮大，软件的规模也在逐渐变得庞大。软件的复杂度不断攀升。一个人已经hold不住了，就开始出现了精细化分工。 码农的队伍扩大，工种增加。除了软件开发工程师之外，又有了软件测试工程师，软件运维工程师。  分工之后，传统的软件开发流程是这样的： 软件开发人员花费数周和数月编写代码，然后将代码交给QA（质量保障）团队进行测试，然后将最终的发布版交给运维团队去布署。所有的这三个阶段，即开发，测试，布署。 早期所采用的软件交付模型，称之为“瀑布（Waterfall）模型”。  瀑布模型，简而言之，就是等一个阶段所有工作完成之后，再进入下一个阶段。 这种模型适合条件比较理想化（用户需求非常明确、开发时间非常充足）的项目。大家按部就班，轮流执行自己的职责即可。 但是，项目不可能是单向运作的。客户也是有需求的。产品也是会有问题的，需要改进的。  随着时间推移，用户对系统的需求不断增加，与此同时，用户给的时间周期却越来越少。在这个情况下，大家发现，笨重迟缓的瀑布式开发已经不合时宜了。 于是，软件开发团队引入了一个新的概念，那就是大名鼎鼎的——“敏捷开发（Agile Development）”。 敏捷开发在2000年左右开始被世人所关注，是一种能应对快速变化需求的软件开发能力，敏捷开发(Agile Development) 的核心是迭代开发(Iterative Development) 与 增量开发 (Incremental Development) 。其实简单来说，就是把大项目变成小项目，把大时间点变成小时间点，，然后这样就可以更加快速的上线项目了。 
迭代开发 
对于大型软件项目，传统的开发方式是采用一个大周期(比如一年)进行开发，整个过程就是一次""大 开发"";迭代开发的方式则不一样，它将开发过程拆分成多个小周期，即一次""大开发""变成多次""小开 发""，每次小开发都是同样的流程，所以看上去就好像重复在做同样的步骤。 
增量开发 
软件的每个版本，都会新增一个用户可以感知的完整功能。也就是说，按照新增功能来划分迭代。 
敏捷开发如何迭代？ 虽然敏捷开发将软件开发分成多个迭代，但是也要求，每次迭代都是一个完整的软件开发周期，必须按 照软件工程的方法论，进行正规的流程管理。 
公司中的开发流程： 
需求评审（参与人员是 客户+产品+UI+开发+测试，也就是所有人员）
主要是产品人员讲解需求，用户需要给出反馈或者提出意见，其他人员可以相应的提出自己的见解。

Story划分（产品+UI+开发）
产品根据UI做出来的原型图给开发人员讲解系统构成和运行，将整个网站按照功能划分成一个个细粒度的story来说明，开发人员（前端和后端）也需要明白自己应该关注那些关键点。

人员划分（leader+开发）
主要是项目小组的leader 根据story划分，给前端和后端开发人员划分story，开发人员根据自己的情况去估算所需时间。

方案设计（数据库设计文档、接口设计文档、方案设计文档）
先根据系统的实际情况去设计DB，包括数据库和表的名字，以及具体的字段。
然后设计接口文档，按照页面和功能进行设计，包括具体的请求地址和入参出参。
最后是根据接口文档中出现的疑难点去做方案设计文档，对遇到的问题进行分析并拿出至少两种具体的解决方案。

方案评审（所有人员）
对前端和后端给出的方案评审其它人员给出各自的意见，有问题的话下次再次开始。

禅道任务拆分（开发人员）
方案评审通过以后开发人员就需要按照预估的总开发时间去拆分story，可以分成多个小的任务，但是一个任务的时间最好不要超过4个小时。

开发（项目日报+工作日报+进度邮件）
每天实际开发过程中遇到问题可以写成项目日报；每天的任务完成情况写成工作日报；相比较整个系统的进度完成情况需要写进度邮件。

端对端（接口）测试（开发人员）
前端写好了页面，后端完实现了接口，就可以进行端到端的测试，可以远程测试，也可以本地测试。

压力测试+集成测试
系统完成以后需要用Jmeter 进行模拟用户访问，通过设置线程来提高并发量的方式达到一定的效果，测试生成的数据需要总结成测试报告。

Demo
对于复盘来说，这就是最后一个程序了，在前后端大师兄的评审下，主要是前端人员进行系统演示，各个功能是否实现、页面是否达到用户要求、有没有什么需要完善的地方。点评过之后如果有问题那就修改之后再次评审；如果没有问题那就算完成复盘项目了。
12345678910111213141516171819202122232425262728293031 
敏捷开发大幅提高了开发团队的工作效率，让版本的更新速度变得更快。 很多人可能会觉得，“更新版本的速度快了，风险不是更大了吗？” 其实，事实并非如此。 
敏捷开发可以帮助更快地发现问题，产品被更快地交付到用户手中，团队可以更快地得到用户的反馈，从而进行更快地响应。而且，DevOps小步快跑的形式带来的版本变化是比较小的，风险会更小（如下图所示）。即使出现问题，修复起来也会相对容易一些。  
CI、CD 
随着DevOps出现，CI和CD也慢慢走入大家视野。CI是Continuous Integration（持续集成），而CD对应多个英文，Continuous Delivery（持续交付）或Continuous Deployment（持续部署）。 
持续集成：强调开发人员提交了新代码之后，立刻进行构建、（单元）测试。根据测试结果，我们可以确定新代码和原有代码能否正确地集成在一起。 
持续交付：在持续集成的基础上，将集成后的代码部署到更贴近真实运行环境的「类生产环境」（production-like environments）中。比如，我们完成单元测试后，可以把代码部署到连接数据库的 Staging 环境中更多的测试。如果代码没有问题，可以继续手动部署到生产环境中。 
持续部署：则是在持续交付的基础上，把部署到生产环境的过程自动化。我个人觉得持续集成、持续交付、持续部署非常值得推广。开发过程中最怕集成时遇到问题导致返工，而持续集成、持续交付、持续部署恰恰可以早发现早解决，从而可以避免这个问题。 
持续集成要素 
1.一个自动构建过程，从检出代码、编译构建、运行测试、结果记录、测试统计等都是自动完成的，无需人工干预。 2.一个代码存储库，即需要版本控制软件来保障代码的可维护性，同时作为构建过程的素材库，一般使用SVN或Git。 3.一个持续集成服务器， Jenkins 就是一个配置简单和使用方便的持续集成服务器。 
持续集成的好处 
1、降低风险，由于持续集成不断去构建，编译和测试，可以很早期发现问题，所以修复的代价就会减少 2、对系统健康持续检查，减少发布风险带来的问题 3、减少重复性工作 4、持续部署，提供可部署单元包 5、持续交付可供使用的版本 6、增强团队信心 
devops详解 
虽然敏捷开发大幅提升了软件开发的效率和版本更新的速度，但是它的效果仅限于开发环节。研发们发现，运维那边，依旧是铁板一块，成为了新的瓶颈，这个时候，我们的DevOps，隆重登场了。 那么问题来了：DevOps到底是什么？ DevOps这个词，其实就是Development和Operations两个词的组合。它的英文发音是 /de’vɒps/，类似于“迪沃普斯”。 
 DevOps的维基百科定义是这样的： DevOps是一组过程、方法与系统的统称，用于促进开发、技术运营和质量保障（QA）部门之间的沟通、协作与整合。  这个定位稍微有点抽象，但是并不难理解。反正它不是某一个特定软件、工具或平台的名字。 从目标来看，DevOps就是让开发人员和运维人员更好地沟通合作，通过自动化流程来使得软件整体过程更加快捷和可靠。  很多人可能觉得，所谓DevOps，不就是Dev+Ops嘛，把两个团队合并，或者将运维划归开发，不就完事了嘛，简单粗暴。 注意，这个观点是不对的。这也是DevOps这些年一直难以落地的主要原因 
在DevOps的流程下，运维人员会在项目开发期间就介入到开发过程中，了解开发人员使用的系统架构和技术路线，从而制定适当的运维方案。而开发人员也会在运维的初期参与到系统部署中，并提供系统部署的优化建议。 
DevOps的实施，促进开发和运维人员的沟通，增进彼此的理（gan）解（qing）。 
在思维和流程改变的同时，想要充分落地DevOps，当然离不开软件和平台的支持。 
目前支持DevOps的软件实在是太多了。限于篇幅，就不一一介绍了。话说回来，现在DevOps之所以被吹得天花乱坠，也有这些软件和平台的功劳，可以趁机卖钱啊。 对比前面所说的瀑布式开发和敏捷开发，我们可以明显看出，DevOps贯穿了软件全生命周期，而不仅限于开发阶段。  下面这张图，更明显地说明了DevOps所处的位置，还有它的价值：  DevOps这个词来源于2009年在比利时根特市举办的首届DevOpsDays大会，为了在Twitter上更方便的传播，由DevOpsDays缩写为DevOps。 目前，DevOps处于高速增长的阶段。尤其是在大企业中，DevOps受到了广泛的欢迎。 
根据2018年的调查发现，74%的受访者已经接受了DevOps，而前一年这一比例为66%。 
越大的企业，越喜欢DevOps。包括Adobe、Amazon、Apple、Airbnb、Ebay、Etsy、Facebook、LinkedIn、Netflix、NASA、Starbucks、Walmart、Sony等公司，都在采用DevOps。 
如今，DevOps几乎已经成为了软件工程的代名词。 
DevOps迅猛发展，相关专业人才的薪资待遇也跟着水涨船高。 
根据调研，DevOps工程师在美国的平均年薪为130000美金，在中国平均年薪也在40万-50万区间，能力强者年薪百万也是比比皆是。 所以你还不趁着目前DevOps发展期学习，还等啥呢？
                
                
                
        
 
"DevOps=Development+Operation 
小步快跑，小迭代、增量，敏捷实践模式。 
软件研发模式：瀑布模式、敏捷模式、DevOps 
  
Dev->CI/Build  ->Deploy->Ops->Feedback 
自动化提高迭代效率（代码托管，打包，上线），最快达到秒级迭代。 
  
内容： 持续构建部署上线，监控告警，自动恢复 
  
  
 
                
        

"DevOps是什么？ 
在容器云、微服务、DevOps等快速发展变化的时期，希望借助新技术、新思想提升我们的技术能力和业务能力, 需要更快的学习最新技术并快速落地，最终达到产品的快速交付并不断产生收益。 
从概念上说，DevOps 是一种方法论，是一组过程、方法与系统的统称,用于促进应用开发、应用运维和质量保障（QA）部门之间的沟通、协作与整合。概念有了，怎么落地？很多公司在实施容器云时实现CI（Continuous Integration， 持续集成），或者CI/CD（Continuous Integration/Continuous Delivery or Deployment， 持续集成/持续交付 or 持续部署）就叫DevOps。我们觉得这只是实现DevOps的一部分，但不等于DevOps。 
CI持续集成是编码、构建的过程。容器云DevOps从CI起步，也是一个很好的切入点。但这仅仅是一个开发构建过程，都在开发端，是实现敏捷开发的一种方式，研发过程自动化，这也是我们考虑采用容器云和DevOps的一个因素。但仅有开发端的敏捷还不等于DevOps。 
现在我们也总是听到一天要上线多少次多少次的。是一个应用吗？频繁上线是需求不明确还是代码质量不高？厂商在这里可能有点偷换概念。一天上线几十次几百次，肯定不是一个应用。像阿里等，那么多系统那么多应用，每天那么多的更新次数很正常。持续交付、持续部署的好处是基于自动化的过程支持。也就是开发、测试、交付部署过程工具链集成实现自动化。 
但CI/CD依然没有解决开发、运维、质量保证部门之间的协作和整合。职责依然没有划分清楚。而且目前的容器云CI/CD流水线设计，不足以支撑企业生产环境部署要求。更多像是PoC概念验证阶段（英语：Proof of concept，简称POC，是对某些想法的一个较短而不完整的实现，以证明其可行性，示范其原理，其目的是为了验证一些概念或理论。）。这也是为什么很多公司即便采用容器云也只是在开发测试环境使用的原因。 
DevOps在概念上理解其实很简单，但落地很难。很多厂商也提出要建立领导小组、委员会什么的，就是要调整企业组织结构。我们觉得这就是技术人员思维方式，理想化！组织结构的调整是大事，牵扯的利益很多，很难要求一家公司为了一个项目去调整组织架构。其实云计算已经有了一个很好的解决方案：多租户。这也是我们对多租户设计要求比较高的一个原因。 
采用容器云的需求： 
1．提升敏捷开发能力。这是DevOps能力 
2．建立开发测试甚至生产环境一致性。 这是容器云和DevOps能力。 
3．实现应用全生命周期自动化管理。这是DevOps能力。 
4．弹性伸缩、灰度发布等。 这是容器云和微服务的能力。 
这也是我们为了适应公司互联网业务发展和应用快速迭代开发的要求，让生产端也更加敏捷起来；逐步建立标准化、一致性的开发、测试、运维环境，专注于业务应用研发而不操心资源管理；满足公司内私有云环境内的应用托管、应用开发、自动化运维等应用服务全生命周期管理需求；实现应用服务的弹性伸缩、灰度发布等能力，满足促销、秒杀等业务需求；从而逐步提升自主研发能力，促进业务创新和快速迭代。 
从我们采用容器云的需求上看，前三项都是涉及DevOps能力的。DevOps要求开发、测试、运维一体化，谁开发谁运维，实现敏捷开发、敏捷部署和敏捷生产。 
 
 
DevOps从计划、编码、构建，到测试、发布、部署，以及运营、监控，形成一个环路。这也是我们实施服务化或者采用微服务持续改进的要求。结合容器的搭建和微服务架构的采用，我们把DevOps分为下面几个流程： 
持续集成，需求的不断变动触发持续的编码、构建流程。持续交付，完成测试的业务应用以合适的方式交付到适当的节点。部署发布，将交付的业务应用按照规则部署到生产环境，完成测试后发布。持续监控，时时监控业务应用以及系统平台的运行情况，形成监控报告。持续反馈，是基于监控和业务应用的使用情况，持续的数据分析，持续地提出完善意见。持续改进，基于反馈的意见，启动新的改进计划流程。 
这些流程的实现，需要众多工具的支持，形成一套DevOps工具链。这些流程如何落地？我们觉得可以从这些方面考虑： 
持续集成 
持续集成阶段，考虑实现计划流程自动化、资源选择自动化、代码质量控制自动化、构建自动化等流程。借助相应的工具链，来提升对业务需求的响应能力和敏捷的开发能力。 
1、计划流程自动化，是从最初的想法提出，或者反馈的意见建议，有自动跟踪的工具。经过可行性分析讨论，最后形成业务需求，安排开发计划。这个阶段的信息我们觉得应该对所有人开放。有人会觉得这样的话你一言我一语、乱七八糟的信息就特别多，我们反而觉得这样才能收集到真实的需求、真心的建议、真正的意见！我们有大数据平台，可以通过大数据平台来初步分析这些信息，提取有价值的想法建议，由相应的业务人员、分析人员作出初步的评估，形成初步需求，和技术分析师、业务分析师等进行评估讨论可行性、疑难点、紧迫性、资源投入、风险特性等，然后根据实际排进研发计划。计划流程使用什么工具？我们觉得Jira就是一个不错的工具，可以满足这些需求。 
2、资源选择自动化，其实我们是考虑把人力资源做成一个资源池，或者仅仅把软件技术人员做一个人力资源池，这样可以结合Jira实现技术资源的自动化选择。同时也可以作为技术人员评估考核的一个量化依据。不过人力系统需要做点扩展，同时需要提供集成接口。 
3、代码质量控制自动化，是实现代码质量的自动检查。编码当然还是离不开人，研发人员完成编码之后，提交到SVN或Git，可以借助于Sonar等工具来实现代码质量的自动检查。代码提交，触发代码质量检查。Sonar插件集成到IDE工具，自动实现编码质量扫描，比后期的提交之后再做扫描会更好。 
4、构建自动化，采用容器云后就是构建镜像。在代码检查完毕，没有什么缺陷的情况下，可以自动启动构建流程，Maven或Gradle是目前比较受欢迎的工具。说起构建，一般都离不开Jenkins。它可以集成SVN或Git，JDK，Sonar，Maven等众多工具，是非常方便的构建自动化实现方式。 
持续交付 
镜像构建完毕，上传到镜像仓库。开发工作暂告一段落，需要准备测试环境进行测试。实现自动化测试，需要实现环境准备自动化、测试用例生成自动化、质量监控自动化、交付自动化。 
1、测试环境准备，传统测试方式是非常花费时间的事情。借助于容器云，实现开发、测试甚至生产环境一致性，提高测试的效率，提高敏捷性。我们希望通过申请，容器云构建分配测试需要的环境和资源。测试环境由QA来维护和提供，测试环境用到的基础设施资源，由运维人员来维护和提供。研发人员在此阶段专注于业务应用的测试。这里我们定义一个测试域，就是一个业务应用的范围。业务应用之间的调用测试通过虚拟接口模拟数据的方式实现，一个测试环境一次测试不会超越这个域。QA可以很明确很方便的去维护这些域环境。这样其实也和我们多租户的设计相关。不同的租户都有自己独立的明确的边界，和其他租户的交互通过标准的协议和接口实现。 
2、测试用例生成自动化，这可能需要QA团队实现一些工具，根据业务需要自动生成测试用例数据。 
测试过程中，不可避免会发现一些缺陷和漏洞，需要自动记录测试数据和异常信息，以备进一步分析。完全的质量监控自动化比较困难，结合自动测试和人工测试，自动检测和人工记录，形成测试报告。测试工具有很多种，这可能需要QA去做一些工作，比如用Jmeter测试业务服务时发现异常或缺陷，如何自动和Jira系统集成自动把缺陷信息记录。 
测试完成没有问题，自动交付到生产镜像仓库。 
镜像仓库 
容器云中镜像仓库我们作为持续集成和持续交付的终点，也是开发和业务部署运营的中介、中间节点。所有的开发测试工作到此已经完全完成，所交付出来的是可以部署到生产的业务应用镜像。每个镜像备注说明，包括配置说明，部署事项，依赖关系等。 
镜像仓库中的镜像需要实现镜像的自动安全扫描（可以采用Clair），确保使用的镜像是安全的。 
部署发布 
部署首先涉及到基础设施资源，资源供给实现自动化。不同的应用可能对资源的要求不一样。就象AWS，提供了几十种不同的资源类型，不同的业务需求可以选择不同的资源类型，在容器云（基于k8s）上也可以通过简单的标签来实现资源类型匹配，从而实现资源选择的自动化能力。 
容器云还有一个重要的特性是弹性伸缩的能力，这也是我们考虑采用容器云的一个因素。弹性伸缩非常适合促销、秒杀等业务活动。大部分厂商也基于CPU、Memory实现了自动弹性伸缩能力。如果能更完善，更能满足业务弹性伸缩的需求。需要说明的是，即便有自动弹性伸缩的能力，在一些促销、秒杀业务开始前，还是需要提前根据预测部署足够的实例，准备足够的备用资源。自动弹性伸缩是为了避免意外，不是为了放任不管。 
业务运营过程中，会涉及到一些定时任务或批处理任务。这些工作可以通过任务调度自动化能力来实现。可以通过自动调度组件（xxl-job等）来实现，也可以通过脚本来实现。 
业务运营中很重要的工作是服务治理。服务治理和服务部署也密切相关。不同的服务架构、不同的服务治理实现方式，都可能会影响到服务部署的方式。服务的路由、熔断、容错、优先级等也需要实现自动化能力（微服务架构，springCloud实现治理）。当然这部分大部分组件都已提供了相应的能力。 
 
持续监控 
日志、监控是业务运营过程中判断业务运行是否正常的重要的基础能力，持续监控就是实现平台各层次的健康检查能力。包括基础设施层、平台层、应用层等。基础设施层就是我们通常所说的IaaS层，存储、网络、计算资源等。平台层是容器云平台的能力，比如Docker引擎、容器编排调度、服务发现、负载均衡等。应用层需要实现对应用的进程、使用资源（存储、计算资源等）、网络流量等进行监控检查，收集日志。 
持续监控是实现日志收集、健康检查监控的自动化。 
持续反馈 
持续反馈是基于日志和监控的基础上，实现数据分析自动化、告警自动化、反馈自动化等。日志中心对收集到的数据可以进行分析，监控中心对监控数据也需要进行分析，不只是有异常才提示、告警，其实这些数据也可以和大数据平台进行集成，使用大数据平台实现一些关联数据分析，从而提供更多有价值的反馈。 
反馈的形式可以是简单的短信、邮件告警，也可以是分析报告。集成短信、邮件、微信、设置是Jira等系统可以实现反馈的自动化。当然在实现的时候也需要相应的过滤规则。 
持续改进 
基于反馈的信息，继续改进应用服务。实现了业务应用的全生命周期管理。在各个阶段实现自动化，也提升了效率和响应能力。 
总结 
介绍了DevOps一些常见概念和落地需要考虑的几个重点问题，为了实现自动化而采用一系列工具链，最终达到快速高效的集成部署和交付能力。 
 
 
 

                
        
        文章知识点与官方知识档案匹配，可进一步学习相关知识Java技能树首页概览118041 人正在系统学习中"
"DevOps是什么？ 
以下是来自维基百科的定义： 
 
 DevOps（开发 Development 与运维 Operations 的组合词）是一种文化、一场运动或实践，强调在自动化软件交付流程及基础设施变更过程中，软件开发人员与其他信息技术（IT）专业人员彼此之间的协作与沟通。它旨在建立一种文化与环境，使构建、测试、软件发布得以快速、频繁以及更加稳定地进行。 
 
DevOps的前世今生 
我们知道软件工程的开发模式从瀑布开发模式到敏捷开发模式，再到如今的DevOps模式都是在不同的阶段解决了不同的问题。 瀑布开发模式定义了最初的软件开发流程，规范了不同阶段的交付标准和交付产物。  敏捷开发模式则给频繁迭代的互联网应用提供了方法论，以不断迭代，小步快跑的形式配合自动化测试，持续集成等手段保证快速地持续交付高质量的软件。但快速交付的前提是能够真正部署到生产环境，而在部署环节，运维人员往往会因为考虑系统的稳定性、可用性和安全性给部署上线设立较高的门槛。这样不能部署上线的快速交付也就没有了意义。 
 
 而DevOps却正好解决了敏捷开发模式的这些不足之处，DevOps 是通过平台（Platform）、流程（Process）和人（People）的有机整合，以 C（协作）A（自动化）L（精益）M（度量）S（共享）文化为指引，旨在建立一种可以快速交付价值并且具有持续改进能力的现代化 IT 组织。 
 
DevOps 可以理解为一种开发（Development）和运维（Operations）一起紧密协作的工作方式，从而可以更快更可靠的构建、测试和发布软件。 DevOps 并不意味着开发一定要懂运维技术，运维要懂开发技术，而是说两个工种要更紧密的协作，有共同的目标：更快更可靠的构建、测试和发布软件。这就意味着，对于运维来说，不再抵触开发的频繁更新部署，会帮助搭建自动化部署平台，提供自动化部署工具；对于开发来说，不再认为运维的工作和开发没关系，开发人员会邀请运维人员参与架构设计，帮助运维实现自动化脚本开发。 
DevOps带来的好处 
上面我们说到在敏捷模式中，运维并没有深入的参与软件的整个设计，开发流程，从而导致在最后一环“部署”的时候，运维会有比较多的考虑和担心。那么DevOps能带来哪些好处和解决哪些问题呢？ 
整个软件的构建、测试和发布过程高度自动化 
DevOps 一个很重要的基础就是自动化，通过对自动化的应用，是最简单有效的打破开发和运维之间壁垒的方式。因为应用自动化后，对于运维人员来说，自动化的交付流程，减少了繁重的手工操作，自动化测试可以有效对产品质量提供很好的保障。对于开发人员来说，可以方便高频率地进行部署。 
信息更加透明和易于测量 
传统的开发模式，运维和开发之前的信息并不是透明和共享的。出现了问题，很多时候大家都在互相甩锅。对于开发来说，不了解程序在服务器上运行的情况，对于运维来说，程序就是个黑盒子，无法对程序内部进行监控，出现问题只能重启或者回滚。 当采用 DevOps 的工作方式，信息更加透明，通过日志和工具，数据也可以被更好测量。比如说： 
可以直观看到开发到部署需要多少时间，哪个环节可以改进？当前服务运行情况如何，每分钟访问数多少，API 出错率多少？当前用户数多少，有多少新增用户？ 
这些数据，不仅可以帮助运维更好地预警，或者是帮助开发更好地优化程序，还可以帮助业务团队更好地了解服务的运营情况。 
DevOps需要做什么 
帮助团队建立基于持续集成和持续交付工作流程建立一套基于日志的监控报警的系统，以及故障响应的流程构建基于云计算和虚拟化技术的基础设施 
参考资料 
极客时间专栏《软件工程之美》极客时间专栏《DevOps实战笔记》 
 

                
                
                
        
        
"DevOps的理念中包含了很重要也是众多互联网公司非常关注的两大点：敏捷+精益；也就是我们要用最少的成本+最快的速度+最高的品质，来满足客户/用户的各种需求场景。 
1 速度——更短的开发周期，更快的创新 
    可以更快速地针对客户进行创新、更好地适应不断变化的市场，同时更有效地推动业务成果。DevOps 模式能够帮助开发人员和运营团队实现这些目标，确保更快速地发布更新。 
2 快速交付——减少部署失败，回滚和恢复时间 
提高发布的频率和速度，以便更快速地进行创新并完善产品，发布新功能和修复错误的速度越快，就越能快速地响应客户需求并建立竞争优势，缩短市场的响应时间，这是非常重要的，因为公司的成功基于他们比竞争对手更快的创新能力。 
3 可靠性——提高效率 
自动化和一致性可在降低风险的同时，有效管理复杂或不断变化的系统。例如，基础设施即代码能够以一种可重复且更有效的方式来管理部署、测试和生产环境，这意味着软件工程师可以专注于完成无法自动化的任务。 
4 降低成本和IT人员 
DevOps在工具自动化的过程中降低了总体成本和IT人员需求，使得资源利用最大化。 
5 改进沟通和协作 
随着DevOps，软件开发文化日益完善，团队合作更愉快且更有成效。文化变得专注于绩效而不是个人目标，在团队相互信任的时候，他们可以更成功地测试和改进。团队可以专注于将产品推向市场或投入生产，并且应该相应地组织他们的KPI。 
  
  
 
                
   
"目录 
 一、DevOps介绍 
  
 
 
一、DevOps介绍 
软件开发最开始是由两个团队组成： 
开发计划由开发团队从头开始设计和整体系统的构建。需要系统不停的迭代更新。运维团队将开发团队的Code进行测试后部署上线。希望系统稳定安全运行。 
这看似两个目标不同的团队需要协同完成一个软件的开发。 
在开发团队指定好计划并完成coding后，需要提供到运维团队。 
运维团队向开发团队反馈需要修复的BUG以及一些需要返工的任务。 
这时开发团队需要经常等待运维团队的反馈。这无疑延长了事件并推迟了整个软件开发的周期。 
会有一种方式，在开发团队等待的时候，让开发团队转移到下一个项目中。等待运维团队为之前的代码提供反馈。 
可是这样就意味着一个完整的项目需要一个更长的周期才可以开发出最终代码。 
 
基于现在的互联网现状，更推崇敏捷式开发，这样就导致项目的迭代速度更快，但是由于开发团队与运维团队的沟通问题，会导 
致新版本上线的时间成本很高。这又违背的敏捷式开发的最初的目的。 
那么如果让开发团队和运维团队整合到成一个团队，协同应对一套软件呢？这就被称为DevOps。 
DevOps，字面意思是Development &Operations的缩写，也就是开发&运维。 
虽然字面意思只涉及到了开发团队和运维团队，其实QA测试团队也是参与其中的。 
网上可以查看到DevOps的符号类似于一个无穷大的符号。  
这表明DevOps是一个不断提高效率并且持续不断工作的过程 
DevOps的方式可以让公司能够更快地应对更新和市场发展变化，开发可以快速交付，部署也更加稳定。 
核心就在于简化Dev和Ops团队之间的流程，使整体软件开发过程更快速。 
整体的软件开发流程包括： 
PLAN：开发团队根据客户的目标制定开发计划CODE：根据PLAN开始编码过程，需要将不同版本的代码存储在一个库中。BUILD：编码完成后，需要将代码构建并且运行。TEST：成功构建项目后，需要测试代码是否存在BUG或错误。DEPLOY：代码经过手动测试和自动化测试后，认定代码已经准备好部署并且交给运维团队。OPERATE：运维团队将代码部署到生产环境中。MONITOR：项目部署上线后，需要持续的监控产品。INTEGRATE：然后将监控阶段收到的反馈发送回PLAN阶段，整体反复的流程就是DevOps的核心，即持续集成、持续部署。 
为了保证整体流程可以高效的完成，各个阶段都有比较常见的工具，如下图：  最终可以给DevOps下一个定义：DevOps 强调的是高效组织团队之间如何通过自动化的工具协作和沟通来完成软件的生命周期管理，从而更快、更频繁地交付更稳定的软件。 
 
下图是整个自动化的简易流程图： 
开发人员编辑好代码后push到Git上，然后Jenkins从Git上拉取，通过Maven进行构建、打包（build），期间也会进行一些手工测试的工作，测试没有问题之后，Jenkins会把编写好的、可运行的并且构建完成的软件发布到服务器（push）的生产环境上，再通过docker把整个软件部署到目标服务器上（测试/预发布/生产环境）。 
                
                
                
        
        
"DevOps是什么 
    Development和Operations的组合词； 
     
     
    DevOps: Development 和 Operations 的组合 
    DevOps 看作开发(软件工程)、技术运营和质量保障(QA)三者的交集。 突出重视软件开发人员和运维人员的沟通合作，通过自动化流程来使得软件构建、测试、 发布更 加快捷、频繁和可靠。 DevOps 希望做到的是软件产品交付过程中 IT 工具链的打通，使得各个团队减少时间损 耗，更加 高效地协同工作。专家们总结出了下面这个 DevOps 能力图，良好的闭环可以大大 增加整体的产 出 
    CICD是什么 
    基本理念 
     
    持续集成(Continuous Integration) 
    持续集成是指软件个人研发的部分向软件整体部分交付，频繁进行集成以便更快地发现 其中的错 误。“持续集成”源自于极限编程(XP)，是 XP 最初的 12 种实践之一。  
    CI 需要具备这些：  
    全面的自动化测试。这是实践持续集成&持续部署的基础，同时，选择合适的 自动化测试工具也极 其重要； 灵活的基础设施。容器，虚拟机的存在让开发人员和 QA 人员不必再大费周 折； 版本控制工具。如 Git，CVS，SVN 等； 自动化的构建和软件发布流程的工具，如 Jenkins，​​flow.ci​​；反馈机制。如构建/测试的失败，可以快速地反馈到相关负责人，以尽快解决达到一个更稳定的版本。 持续交付(Continuous Delivery)  
     
     持续交付在持续集成的基础上，将集成后的代码部署到更贴近真实运行环境的「类生产环境」 (production-like environments)中。持续交付优先于整个产品生命周期的软件部署，建立 在高水平自 动化持续集成之上。  
     
    灰度发布。  
    持续交付和持续集成的优点非常相似：  
    快速发布。能够应对业务需求，并更快地实现软件价值。 编码->测试->上线->交付的频繁迭代周期缩短，同时获得迅速反馈； 高质量的软件发布标准。整个交付过程标准化、可重复、可靠， 整个交付过程进度可视化，方便团队人员了解项目成熟度； 更先进的团队协作方式。从需求分析、产品的用户体验到交互 设计、开发、测试、运维等角色密 切协作，相比于传统的瀑布式软件团队，更少浪费。  
    持续部署(Continuous Deployment)  
    持续部署是指当交付的代码通过评审之后，自动部署到生产环境中。持续部署是持续交付的最高阶段。 这意味着，所有通过了一系列的自动化测试的改动都将自动部署到生产环境。它也可以被称 为“Continuous Release”。  
     
     “开发人员提交代码，持续集成服务器获取代码，执行单元测试，根据测试结果决定是否部署到预 演环境，如果成功部署到预演环境，进行整体验收测试，如果测试通过，自动部署到产品环境， 全程自动化高效运转。  
     
    持续部署主要好处是，可以相对独立地部署新的功能，并能快速地收集真实用户的反馈。  
     
     “You build it, you run it”，这是 Amazon 一年可以完成 5000 万次部署， 平均每个工程师每天部署 超过 50 次的核心秘籍。  
     5000/365 = 15 万次  
     
    开发人员代码敲完。可以 release 的时候，提交代码， 剩下的全部一站式自动搞定 
    最佳实践 
    内循环与外循环 
     
    内循环(开发要做的事情)： 
    编码、测试、运行、debug、提交  
    代码推送到代码仓库(svn，git)【代码回滚】 进行CI过程(持续集成)，万物皆可容器化。打包成一个Docker镜像 镜像推送到镜像仓库 测试 持续部署流程(CD)，拿到之前的镜像，进行CD。怎么放到各种环境。uat、test、prod 外循环()  
    运行时监控 生产环境的管理 监控 线上反馈到开发  
    来到内循环  
    MVC：Model(bean,entity,to,po......) View(thymeleaf、前后分离....) Controller(xxxxx) 
    实践流程 
     
    新功能，bug修复。 
    创建分支来做这个事情(开发功能) 提交分支的代码改变 进入持续集成流程  
    当前分支代码功能性自动化构建和测试 自动工具推送这次提交 自动化集成测试 可以看到效果 人工确认此次功能是否发布到生产环境  
    代码合并 进入持续部署流程  
    构建、测试、发布...... 
     CICD LandSpace 
    禅道 
     
    
   
  

                
        
     
"DevOps是什么 
 DevOps维基百科定义 DevOps（Development和Operations的组合词）是一种重视“软件开发人员（Dev）”和“IT运维技术人员（Ops）”之间沟通合作的文化、运动或惯例。透过自动化“软件交付”和“架构变更”的流程，来使得构建、测试、发布软件能够更加地快捷、频繁和可靠。 
 Devops的产生 
 起初按照“单体架构+瀑布模式”，这个时候服务监控也简单，服务出了问题，直接去线上看一下运行日志，为了解放双手监控服务，开发者会写一些脚本分析日志，服务器少，部署简单，通常开发就可以完成运维的工作，不需要专门的运维来做部署，所以开发模式很简答，直接按照瀑布流方式开发就可。 
 但随着业务体量发展越来越大，开发与运维的一些固有问题暴露出来，运维，就要协调人员配合，运维的宿命就是维稳，他们是很讨厌变动的；开发的天职确是不断地推代码上线，进行代码变动，更替迭代，这两个工种天生就是对立的。很多大公司有那种，开发人员想要上线，需要提交各种审批，层层签字画押，多少人的上线激情被一句冷冰冰的‘还没到窗口发布期’给泼的透心凉。所以，敏捷开发解决了协同开发和多机器部署开发问题，但是没有解决内部人员的矛盾，留着这个矛盾在公司，开发和运维随时都可能约‘生死架’。 
  
   
    
     
    
   
  
 2008年。一位名叫Patrick Debois的比利时IT顾问在比利时布鲁塞尔组织了一次名为“Agile Infrastructure”的会议，该会议旨在让开发人员和运维人员能够更好地协作和交流。Debois 和参与者为了解决这些问题，Debois提出了一种将开发和运维人员紧密协作的方法，称之为“DevOps”。DevOps的实践者们发现，通过采用DevOps的理念和方法，能够大大加快软件交付和部署的速度，提高软件质量，并减少错误和故障的发生。因此，DevOps已经成为现代软件开发和运维的重要实践方法之一。 
 DevOps的深度理解 
 我们知道，一个软件从零开始到最终交付，大概包括以下几个阶段：产品规划、开发编码、构建、QA测试、发布、部署和维护。 
 最初大家说到DEVOPS，都是指的‘开发运维一体化’，如下图: 
  
   
    
     
    
   
  
  
 现在大家说的 DevOps 已经是扩大到“端到端”的概念了，如下图： 
  
   
    
     
    
   
  
  
 DevOps 的三大支柱之中，即 
 人（People）、流程（Process）和平台（Platform）。 
 DevOps = 人 + 流程 + 平台 
 人 + 流程 = 文化 
 流程 + 平台 = 工具 
 平台 + 人 = 赋能 
 总而言之，DevOps是一种软件开发和运营的方法论，它的核心理念包括自动化、持续交付、持续集成、持续部署、可伸缩性、监控和反馈等。它旨在缩短软件开发和发布的周期、提高软件质量和可靠性，并增强团队协作和沟通。DevOps强调开发人员和运维人员之间的合作，以实现快速、高质量的软件交付和运营。DevOps工具和流程可以使软件开发和运营团队更加协同、高效地进行工作，从而提高软件交付的速度和质量。 
 文章转自： 
 什么是DevOps？ 
  

                
        
        
"普元发布了PRIMETON DEVOPS的5.0版本，其愿景定位为”打造新一代软件生产线, 快速提升IT运营质量与效率”。结合普元官方提供的资料，我们来围观一下其围绕DevOps的打法与路线。 
Why DevOps 
普元提出敏态IT和稳态IT，其实就是一直在说的DevOps的Dev的速度优先和Ops的稳定优先的永恒话题的另外一种说法，现在的企业需要既快且稳，何去何从，选普元的DevOps。   
传统应用 vs 新兴互联网应用 
项目详细说明传统应用服务内部用户为主；需求明确、功能全，覆盖广，大集成，中央控制，适合稳定发展阶段；刚性强，难以快速变化，维护成本高，快速变革的新业态无法支持新兴互联网应用服务外部客户和合作伙伴；需求变动快，功能简单，独立和分散，分布式进化，一切都从零开始，业务与IT无法分开，需要快速创新；运用规模变化大，大范围广泛的尝试，易失败（淘汰），对业务弹性、快速发布要求高 
DevOps为什么能解决问题 
  普元是这样认为的： 
 
 DevOps不是简单的集成或整合，而是一条支撑企业敏捷的数字化生产线，覆盖从需求到最终运营的全周期； 也少不了对于质量、安全方面的支撑，为IT运营提供足够的保障。 想一次性从需求做到运营往往是一个理想，更多的是选择生命周期中最需优化的点来逐步建设，但现在也看到一个现象： 越来越多的厂商开始研发DevOps产品，有的基于项目管理工具衍生，有的从运维工具开始，有的从容器云过渡，有的从开发平台着手，貌似大家把所有工作都归结为DevOps。 显然在定位上忽略了DevOps的初衷。 
 
平台优势 
优势详细信息全面的开发运营一体化覆盖产品、项目全生命周期，提供需求管理、架构管理、代码管理、持续集成、自动部署、流水线协作等全方位能力大规模的生产能力平台经过多家企业大规模生产历练，能够为客户提供稳定可靠的IT生产运营支撑，加速企业业务交付可控下的自动化平台并非自动化一切，而是基于企业既有软件生产制度，以自动化为辅助手段，降低人为操作风险，提升质量与效率基于运营数据持续优化平台提供多维度报表，作为运营数据的同时，可通过细粒度分析，驱动IT过程优化，支撑业务创新无缝结合微服务、容器除支撑传统应用架构与基础设施外，平台与springcloud、kubernetes无缝结合，支撑微服务全生命周期交付，支撑容器云上的应用运维 
产品功能 
 
应用场景 
引入的功效 
 
某项目实例 
 
某项目一期成果 
 
总结 
区别于BAT作为云服务绑定和附加价值的提供者，普元的产品更多定位于帮助企业落地自己的DevOps甚至搭建企业自己的DevOps平台。提供从方法论到产品原型的一整套方案。以企业要实现的目标作为衡量标准，每个月都有详细的迭代计划以及实际目标，最终的成果也落实与可衡量的结果，虽然实际的效果截图选取的只是sonarqube的代码评审的结果原图，也不太了解普元的平台自身做了什么，但是一整套的思路非常清晰，从为什么要做DevOps，到如何落地，以及落地计划和落地结果，非常之清晰，结果也一目了然，很有说服力和吸引力，非常适合用于DevOps的实验性项目的总结报告。 
参考文档 
http://www.primeton.com/products/devops/
                
                
                
        
        
"devops工程师 
  简而言之，Devops是一种文化和哲学，旨在将以前分开的开发 （创建应用程序的人）和操作 （确保这些应用程序按应有的方式工作的人）的孤岛统一为一个团队。 该团队使用持续集成，持续交付和测试 ，将对现有代码库的频繁增量改进发布到生产中。  
  因此，从逻辑上讲，devops工程师是具有为这样的团队服务所需的技能的人。 但是像所有开发人员一样，很难确定开发人员工程师的确切定义，而且有些人声称“开发人员工程师”一词根本不是有意义的工作描述 。 然而，越来越多的公司说他们想雇用devop工程师，并愿意付给他们丰厚的薪水。 让我们看看他们在寻找什么。  
  [InfoWorld的要点： CI / CD入门：使用CI / CD管道自动执行应用程序交付 。 • CI / CD的5个常见陷阱-以及如何避免这些陷阱 。 | 通过InfoWorld的App Dev Report新闻通讯了解编程方面的热门话题。 ]  
  Devops工程师定义    
  实施devops理念并不意味着您要用一群毫无差别的devop员工来取代整个开发和运营团队。 不同的员工将具有不同的技能。 将会有程序员，系统管理员，DBA等一起工作。  
  当公司使用devops工程师一词时，他们希望有人可以帮助将所有这些角色联系在一起。 软件工程公司Altexsoft的公司博客以这种方式描述了角色 ：  
  
   有些人认为此人是知道如何编码的系统管理员，或是具有系统管理员技能的开发人员。 从某种意义上说，两个定义都是公平的。 devops工程师的主要功能是介绍持续交付和连续集成工作流程，这需要了解[devops]工具和几种编程语言的知识。  
  
  或者，正如开发人员Igor Kantor 在Medium帖子中所说，devops工程师是   “了解软件开发生命周期并带来软件工程工具和流程以解决经典运营挑战的人。” 关键是在开发人员和操作人员方面都具有足够的知识和经验，以了解他们如何能够一起工作—加上“软”的人员技能，以帮助更多专业的团队成员彼此联系，并超越他们的孤岛。  
  Devops工程师培训  
  在像Reddit这样的IT专业人员闲逛的地方突然冒出一个玩笑： 没有像初级开发工程师这样的事情 。 这是因为招聘设备工程师的公司正在寻找的技术技能超出了刚从学校或新手训练营获得的技能。  
  
  “培训” Devops工程师的角色的方式是通过在职经验，这种经验可以使开发人员了解事物的操作方面，反之亦然。 正如Jeffrey Lee在Hacker Noon上所说的那样 ：  
  
  
   成为devop工程师没有任何培训或教育途径。 换句话说，通常是人们对自己当前的技能充满信心并扩展到其他角色。 之所以聘请他们，是因为他们对这一领域有深入的了解，并且拥有丰富的实践经验。 您不会在LinkedIn上找到一份要求至少五年以上工作经验的职位空缺，然后再进行申请。  
  
  Devops工程师技能  
  仅仅因为没有正式的devop工程师教育轨道，并不意味着您不能选择将自己的职业定位为获得devops工程师的工作。 但是您必须做出有意识的决定，才能获得各种技能，无论是通过在职经验还是通过外部正式或自我指导的培训。  
  
  Igor Kantor提出了一系列有关关键技术和平台的系列文章， 以了解您是否想成为一名开发工程师 。 他将它们分为以下几类：  
  基础： Linux管理 ， Python和AWS或其他一些 云平台  配置： Terraform和Ansible  版本控制： Git和GitHub  包装： Docker  部署： 詹金斯  运行： Amazon ECS和Kubernetes  监控： ELK堆栈  
  显然，这是一个艰巨的任务！ 但是，尽管掌握所有这些平台是不现实的，但您至少应该对它们的工作方式有所了解。 更重要的是，您应该知道如何在需要时学习更多信息。  
  作为一名开发工程师，不仅要了解特定的产品或技术，而且毕竟，随着行业的发展，这些都会一直在变化。 同样重要的是，要熟悉devops哲学和基本的生命周期 。 这意味着您需要了解位于devops商店核心的持续部署和持续集成过程（CI / CD） ，以及随之而来的软件测试类型。  
  并且不要忘记这些软技能：对于在朝着更快速，迭代的软件开发和发布周期转变的文化中心扮演角色至关重要，并且这需要弥合开发人员和操作人员之间的鸿沟，这两者都很重要可能习惯于对抗关系。 Cybric的创始人和前Yahoo首席信息官Mike D. Kail在TechBeacon的一篇文章中总结道 ：“越来越多的组织希望掌握了移情，诚信和弹性等软技能的软件工程师能够迎来新一波的发展。”  
  
  在线检查devops工程师的面试问题， 例如Edureka的这些样本面试问题 ，可以使您很好地了解您对工作的期望。 显然，有关特定技术的问题仍然存在，但是您还应该解释所有这些平台和工具如何协同工作，并向潜在的雇主表明您了解发展理念和流程。  
  如果您需要一些机构指导来称呼自己是一名devops工程师必须具备的技能，则可能需要研究来自Amazon的AWS Certified DevOps Engineer考试。 该认证显然专注于Amazon的云平台，但是对测试进行研究将向您展示在devops工程师知识中的空白。 Udemy的学习指南说，它将帮助您“学习如何使用AWS Developer Tools在AWS中开发功能齐全的CI / CD管道”。  
  Devops工程师的角色和职责  
  那么，devops工程师每天做什么？ Altexsoft说， 典型的devops工程师职责清单如下所示：  
  编写服务器端功能的规格和文档  管理CI / CD  CI / CD脚本编写  绩效评估与监测  IT基础架构维护和管理（包括硬件，软件，网络，存储，虚拟和远程资产以及云数据存储）  
  当然，没有两个工作是相同的，并且devops工程师的角色因公司而异。 组织的规模可能会产生特定的影响。 在小型企业中，您的职责可能会跨越整个devops生命周期，而在较大的团队中，您最终可能会专注于其中的一部分。  
  如果您想了解雇主会要求您作为一名devops工程师做什么，那么您可能希望查看Dice ， Workable和ZipRecruiter等网站上可用的devops工程师职位描述模板。 这些提供了行业期望的基准。  
  Devops工程师职位  
  Devops工程师的工作正在激增。 TechTarget表示，这是devops理念普遍传播的结果，而这又是由于企业希望向内部和外部客户更快地推出应用程序。 有理由寻求这些职位-根据平均薪水和工作满意度的综合考虑，Glassdoor将devops工程师职位称为目前美国第六好的职位 。  
  Devops工程师薪水  
  关于那些薪水……他们很高！ 在Dice的2019年薪酬报告中 ，devops工程师排名前五，平均为111,683美元。 Glassdoor 的平ASP格为115,666美元 ，其中91,000美元处于典型范围的低端，而155,000美元处于高端。 无疑，收集这些技能将花费时间和精力，但显然是有回报的。  
  
   
   
  
  
   devops工程师 

                
        
        文章知识点与官方知识档案匹配，可进一步学习相关知识Java技能树首页概览118041 人正在系统学习中
  相关资源：devops:学习Devops的材料和代码_devops资源-CSDN文库"
"DevOps成熟度清单 流程成熟度框架将使用清单和讨论进行评估。 对于每个关键重点领域，详细的调查结果将表明成熟度水平。 
一。发展框架： 1.开发工作交付（时间表，质量）   初始成熟度观察：   初始成熟度等级：   目标成熟度评级：   流程改进观察：   流程采用的好处：   最佳实践： 2.客户互动（功能要求，状态报告）   初始成熟度观察：   初始成熟度等级：   目标成熟度评级：   流程改进观察：   流程采用的好处：   最佳实践： 二。团队协作： 1.部门之间的握手：   初始成熟度观察：   初始成熟度等级：   目标成熟度评级：   流程改进观察：   流程采用的好处：   最佳实践： 2.整合过程成熟度   初始成熟度观察：   初始成熟度等级：   目标成熟度评级：   流程改进观察：   流程采用的好处：   最佳实践： 
三。软件性能： 1.返工与新功能或价值交付   初始成熟度观察：   初始成熟度等级：   目标成熟度评级：   流程改进观察：   流程采用的好处：   最佳实践： 四。流程框架： 1.构建过程工作流程   初始成熟度观察：   初始成熟度等级：   目标成熟度评级：   流程改进观察：   流程采用的好处：   最佳实践： 2.部署过程有效性   初始成熟度观察：   初始成熟度等级：   目标成熟度评级：   流程改进观察：   流程采用的好处：   最佳实践： 
五。关键指标摘要： 1.代码质量   初始成熟度观察：   初始成熟度等级：   目标成熟度评级：   流程改进观察：   流程采用的好处：   最佳实践： 2.测试用例自动化和结果   初始成熟度观察：   初始成熟度等级：   目标成熟度评级：   流程改进观察：   流程采用的好处：   最佳实践： 3.应用程序监控-KPI   初始成熟度观察：   初始成熟度等级：   目标成熟度评级：   流程改进观察：   流程采用的好处：   最佳实践： 
六。生产框架： 1.识别缺陷   初始成熟度观察：   初始成熟度等级：   目标成熟度评级：   流程改进观察：   流程采用的好处：   最佳实践： 2.响应/性能   初始成熟度观察：   初始成熟度等级：   目标成熟度评级：   流程改进观察：   流程采用的好处：   最佳实践： 3.系统架构的可扩展性   初始成熟度观察：   初始成熟度等级：   目标成熟度评级：   流程改进观察：   流程采用的好处：   最佳实践： 
七。云技术采用进度：   初始成熟度观察：   初始成熟度等级：   目标成熟度评级：   流程改进观察：   流程采用的好处：   最佳实践：
                
                
                
        
        
"开始介绍第三章内容，第三章主要讲DevOps的几个组件或者叫概念。在本章中，我们想与你讨论与DevOps相关的一些主要概念：敏捷，精益和itope。本小节与Agile相关，与DevOps相关。 Patrick Dubois和Andrew Clayshafer参加了多伦多的Agile 2008大会。在会议上，Andrew提出了一个关于敏捷基础设施的会议。Patrick是唯一到场出席的。他们谈到安德鲁在明年第二次参加Velocity会议上的敏捷基础设施。         然后在2009年晚些时候，Patrick在他的家乡比利时根特开始了一个新的小型开放空间基地会议。他召集了Dev Ops Days会议，有效地创造了DevOps这个术语并开始了DevOps运动。我在2010年1月在奥斯汀的一个名为Ops Camp的活动中听说过John Willis和Damon Edwards，他们正在跑步，每个人都在谈论这个名为DevOps的新事物。由于Dev Ops的历史源于敏捷，所以让我们谈谈它。您可能已经熟悉敏捷了。         敏捷软件开发的宣言是由一群软件开发人员于2001年编写的，他们对当前的软件开发状态不满意。他们认为越来越多的官僚机构和流程正在分层到项目上，希望能取得更有效的结果，但结果往往相反。是的，之前的软件开发方法称为瀑布式，这是因为它将软件从一个阶段移动到另一个阶段。首先，您完全完成所有要求并记录下来，然后将它们扔到墙上（服务器）进行编码，然后对其进行编码。然后他们把它扔到墙上给QA测试它然后他们把它扔到墙上给那些发版工程的人然后如果它是一个服务它被扔到另一个墙上进行操作，听起来很痛苦。在敏捷开发中，这个过程是多次迭代的。对，而不是试图预先完成每个阶段，它强调开发团队和客户之间灵活的协作，围绕工作软件的频繁内部交付。这可以快速生成解决方案，更好地满足客户需求，减少挥之不去的质量问题。 
        敏捷已经证明了它的好处。第1版的第10个年度敏捷调查报告显示，85％的敏捷团队已经看到了提高的生产力。 80％的受访者表示上市时间更快。敏捷的批评者认为，由于它更快，更具协作性，因此它必须是草率和随意的。是的，但实际上我们看到反过来是正确的。敏捷团队还报告了81％的案例中更好的交付可预测性，并在79％的案例中提高了软件质量。        了解敏捷是一项重大的努力。图书馆有各种各样的书籍，可以帮助您了解更多有关敏捷的知识。如果您已经阅读了敏捷宣言中的原则，那么您将看到缺少的内容：任何提及操作的内容。确切地说，敏捷谈论工作软件，但将系统管理员带入产品团队，但是他们并不习惯。此外，宣言没有提及软件交付管道的最后部分，其中包括构建基础架构，并且在生产中部署和维护了应用程序。         实际上，一开始，敏捷被IT组织中的基础设施方面视为威胁。我必须确信开发经理并不疯狂。而且我非常确信我自己和我的运营团队一起尝试过，而且效果很好。从那时起，我使用Agile运行各种操作和混合DevOps团队，我永远不会回去（瀑布模型）。DevOps与Agile完全一样吗？ 你可以在没有敏捷的情况下练习DevOps，反之亦然，但它可以并且坦率地说可能应该被实现为敏捷的扩展，因为DevOps在敏捷方面有如此强大的根源。       网上自己搜索下敏捷宣言内容。作者的DevOps宣言和敏捷宣言对比，大概就是这样：把敏捷中软件，换成系统。敏捷中主要是开发人员，DevOps需要把运维添加进来。加上结果指导开发DevOps之旅的坚实基础这点。正如我们在下一个节看到的，DevOps不仅仅是敏捷的算法，它归功于精益软件。
                
   
